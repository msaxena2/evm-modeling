requires "foundry.md"

module AccountParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAccountParamsTestContract
    
    syntax S2KAccountParamsTestContract ::= "S2KAccountParamsTest" [symbol(), klabel(contract_AccountParamsTest)]
    
      
    
    syntax Field ::= AccountParamsTestField
    
    syntax AccountParamsTestField ::= "IS_TEST" [symbol(), klabel(field_AccountParamsTest_IS_TEST)]
    
    syntax AccountParamsTestField ::= "_failed" [symbol(), klabel(field_AccountParamsTest__failed)]
    
    syntax AccountParamsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AccountParamsTest_IS_SCRIPT)]
    
    syntax AccountParamsTestField ::= "stdstore" [symbol(), klabel(field_AccountParamsTest_stdstore)]
    
    rule  ( #loc ( S2KAccountParamsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAccountParamsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAccountParamsTestContract "." S2KAccountParamsTestMethod [function(), symbol(), klabel(method_AccountParamsTest)]
    
    syntax S2KAccountParamsTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-IS_SCRIPT_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-IS_TEST_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-failed_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-testDealConcrete" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-testDealConcrete_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-testDealSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AccountParamsTest_method-testDealSymbolic_uint256)]
    
    syntax S2KAccountParamsTestMethod ::= "method-testEtchConcrete" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-testEtchConcrete_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-testEtchSymbolic" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_AccountParamsTest_method-testEtchSymbolic_bytes)]
    
    syntax S2KAccountParamsTestMethod ::= "method-testFail_GetNonce_false" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-testFail_GetNonce_false_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-testFail_GetNonce_true" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-testFail_GetNonce_true_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-testNonceSymbolic" "(" Int ":" "uint64" ")" [symbol(), klabel(method_AccountParamsTest_method-testNonceSymbolic_uint64)]
    
    syntax S2KAccountParamsTestMethod ::= "method-test_GetNonce_false" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-test_GetNonce_false_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-test_GetNonce_true" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-test_GetNonce_true_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-test_Nonce_ExistentAddress" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-test_Nonce_ExistentAddress_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-test_Nonce_NonExistentAddress" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-test_Nonce_NonExistentAddress_)]
    
    syntax S2KAccountParamsTestMethod ::= "method-test_getNonce_unknownSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_AccountParamsTest_method-test_getNonce_unknownSymbolic_address)]
    
    syntax S2KAccountParamsTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_AccountParamsTest_method-vm_)]
    
    rule  ( S2KAccountParamsTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-testDealConcrete ( ) => #abiCallData ( "testDealConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-testDealSymbolic ( V0_value : uint256 ) => #abiCallData ( "testDealSymbolic" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KAccountParamsTest . method-testEtchConcrete ( ) => #abiCallData ( "testEtchConcrete" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-testEtchSymbolic ( V0_code : bytes ) => #abiCallData ( "testEtchSymbolic" , #bytes ( V0_code ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_code ) )
      
    
    rule  ( S2KAccountParamsTest . method-testFail_GetNonce_false ( ) => #abiCallData ( "testFail_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-testFail_GetNonce_true ( ) => #abiCallData ( "testFail_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-testNonceSymbolic ( V0_newNonce : uint64 ) => #abiCallData ( "testNonceSymbolic" , #uint64 ( V0_newNonce ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_newNonce )
      
    
    rule  ( S2KAccountParamsTest . method-test_GetNonce_false ( ) => #abiCallData ( "test_GetNonce_false" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-test_GetNonce_true ( ) => #abiCallData ( "test_GetNonce_true" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-test_Nonce_ExistentAddress ( ) => #abiCallData ( "test_Nonce_ExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-test_Nonce_NonExistentAddress ( ) => #abiCallData ( "test_Nonce_NonExistentAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAccountParamsTest . method-test_getNonce_unknownSymbolic ( V0_addr : address ) => #abiCallData ( "test_getNonce_unknownSymbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( S2KAccountParamsTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testDealConcrete()" ) => 530093250 )
      
    
    rule  ( selector ( "testDealSymbolic(uint256)" ) => 2584982624 )
      
    
    rule  ( selector ( "testEtchConcrete()" ) => 807503996 )
      
    
    rule  ( selector ( "testEtchSymbolic(bytes)" ) => 2109411263 )
      
    
    rule  ( selector ( "testFail_GetNonce_false()" ) => 2393877859 )
      
    
    rule  ( selector ( "testFail_GetNonce_true()" ) => 1067907152 )
      
    
    rule  ( selector ( "testNonceSymbolic(uint64)" ) => 1310260491 )
      
    
    rule  ( selector ( "test_GetNonce_false()" ) => 3545243759 )
      
    
    rule  ( selector ( "test_GetNonce_true()" ) => 3968101798 )
      
    
    rule  ( selector ( "test_Nonce_ExistentAddress()" ) => 1598387740 )
      
    
    rule  ( selector ( "test_Nonce_NonExistentAddress()" ) => 2985064833 )
      
    
    rule  ( selector ( "test_getNonce_unknownSymbolic(address)" ) => 3941547284 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AddrTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAddrTestContract
    
    syntax S2KAddrTestContract ::= "S2KAddrTest" [symbol(), klabel(contract_AddrTest)]
    
      
    
    syntax Field ::= AddrTestField
    
    syntax AddrTestField ::= "IS_TEST" [symbol(), klabel(field_AddrTest_IS_TEST)]
    
    syntax AddrTestField ::= "_failed" [symbol(), klabel(field_AddrTest__failed)]
    
    syntax AddrTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AddrTest_IS_SCRIPT)]
    
    syntax AddrTestField ::= "stdstore" [symbol(), klabel(field_AddrTest_stdstore)]
    
    rule  ( #loc ( S2KAddrTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAddrTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAddrTestContract "." S2KAddrTestMethod [function(), symbol(), klabel(method_AddrTest)]
    
    syntax S2KAddrTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_AddrTest_method-IS_SCRIPT_)]
    
    syntax S2KAddrTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_AddrTest_method-IS_TEST_)]
    
    syntax S2KAddrTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_AddrTest_method-failed_)]
    
    syntax S2KAddrTestMethod ::= "method-kevm" "(" ")" [symbol(), klabel(method_AddrTest_method-kevm_)]
    
    syntax S2KAddrTestMethod ::= "method-testFail_addr_false" "(" ")" [symbol(), klabel(method_AddrTest_method-testFail_addr_false_)]
    
    syntax S2KAddrTestMethod ::= "method-testFail_addr_true" "(" ")" [symbol(), klabel(method_AddrTest_method-testFail_addr_true_)]
    
    syntax S2KAddrTestMethod ::= "method-test_addr_false" "(" ")" [symbol(), klabel(method_AddrTest_method-test_addr_false_)]
    
    syntax S2KAddrTestMethod ::= "method-test_addr_symbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AddrTest_method-test_addr_symbolic_uint256)]
    
    syntax S2KAddrTestMethod ::= "method-test_addr_true" "(" ")" [symbol(), klabel(method_AddrTest_method-test_addr_true_)]
    
    syntax S2KAddrTestMethod ::= "method-test_builtInAddresses" "(" ")" [symbol(), klabel(method_AddrTest_method-test_builtInAddresses_)]
    
    syntax S2KAddrTestMethod ::= "method-test_notBuiltinAddress_concrete" "(" ")" [symbol(), klabel(method_AddrTest_method-test_notBuiltinAddress_concrete_)]
    
    syntax S2KAddrTestMethod ::= "method-test_notBuiltinAddress_symbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_AddrTest_method-test_notBuiltinAddress_symbolic_address)]
    
    syntax S2KAddrTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_AddrTest_method-vm_)]
    
    rule  ( S2KAddrTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-kevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-testFail_addr_false ( ) => #abiCallData ( "testFail_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-testFail_addr_true ( ) => #abiCallData ( "testFail_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-test_addr_false ( ) => #abiCallData ( "test_addr_false" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-test_addr_symbolic ( V0_pk : uint256 ) => #abiCallData ( "test_addr_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( S2KAddrTest . method-test_addr_true ( ) => #abiCallData ( "test_addr_true" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-test_builtInAddresses ( ) => #abiCallData ( "test_builtInAddresses" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-test_notBuiltinAddress_concrete ( ) => #abiCallData ( "test_notBuiltinAddress_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KAddrTest . method-test_notBuiltinAddress_symbolic ( V0_addr : address ) => #abiCallData ( "test_notBuiltinAddress_symbolic" , #address ( V0_addr ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_addr )
      
    
    rule  ( S2KAddrTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testFail_addr_false()" ) => 3302866643 )
      
    
    rule  ( selector ( "testFail_addr_true()" ) => 2486005453 )
      
    
    rule  ( selector ( "test_addr_false()" ) => 4124294109 )
      
    
    rule  ( selector ( "test_addr_symbolic(uint256)" ) => 3071220939 )
      
    
    rule  ( selector ( "test_addr_true()" ) => 809049819 )
      
    
    rule  ( selector ( "test_builtInAddresses()" ) => 3220291840 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_concrete()" ) => 2409208231 )
      
    
    rule  ( selector ( "test_notBuiltinAddress_symbolic(address)" ) => 2160641203 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AllowChangesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAllowChangesTestContract
    
    syntax S2KAllowChangesTestContract ::= "S2KAllowChangesTest" [symbol(), klabel(contract_AllowChangesTest)]
    
      
    
    syntax Field ::= AllowChangesTestField
    
    syntax AllowChangesTestField ::= "IS_TEST" [symbol(), klabel(field_AllowChangesTest_IS_TEST)]
    
    syntax AllowChangesTestField ::= "_failed" [symbol(), klabel(field_AllowChangesTest__failed)]
    
    syntax AllowChangesTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AllowChangesTest_IS_SCRIPT)]
    
    syntax AllowChangesTestField ::= "stdstore" [symbol(), klabel(field_AllowChangesTest_stdstore)]
    
    rule  ( #loc ( S2KAllowChangesTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAllowChangesTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAllowChangesTestContract "." S2KAllowChangesTestMethod [function(), symbol(), klabel(method_AllowChangesTest)]
    
    syntax S2KAllowChangesTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-IS_SCRIPT_)]
    
    syntax S2KAllowChangesTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-IS_TEST_)]
    
    syntax S2KAllowChangesTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-failed_)]
    
    syntax S2KAllowChangesTestMethod ::= "method-kevm" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-kevm_)]
    
    syntax S2KAllowChangesTestMethod ::= "method-test" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-test_)]
    
    syntax S2KAllowChangesTestMethod ::= "method-testAllow" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-testAllow_)]
    
    syntax S2KAllowChangesTestMethod ::= "method-testAllow_fail" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-testAllow_fail_)]
    
    syntax S2KAllowChangesTestMethod ::= "method-testFailAllowCallsToAddress" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-testFailAllowCallsToAddress_)]
    
    syntax S2KAllowChangesTestMethod ::= "method-testFailAllowChangesToStorage" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-testFailAllowChangesToStorage_)]
    
    syntax S2KAllowChangesTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_AllowChangesTest_method-vm_)]
    
    rule  ( S2KAllowChangesTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . method-kevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . method-test ( ) => #abiCallData ( "test" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . method-testAllow ( ) => #abiCallData ( "testAllow" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . method-testAllow_fail ( ) => #abiCallData ( "testAllow_fail" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . method-testFailAllowCallsToAddress ( ) => #abiCallData ( "testFailAllowCallsToAddress" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . method-testFailAllowChangesToStorage ( ) => #abiCallData ( "testFailAllowChangesToStorage" , .TypedArgs ) )
      
    
    rule  ( S2KAllowChangesTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "test()" ) => 4171824493 )
      
    
    rule  ( selector ( "testAllow()" ) => 3693132891 )
      
    
    rule  ( selector ( "testAllow_fail()" ) => 4129570225 )
      
    
    rule  ( selector ( "testFailAllowCallsToAddress()" ) => 1262828121 )
      
    
    rule  ( selector ( "testFailAllowChangesToStorage()" ) => 1529992487 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ValueStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KValueStoreContract
    
    syntax S2KValueStoreContract ::= "S2KValueStore" [symbol(), klabel(contract_ValueStore)]
    
      
    
    syntax Field ::= ValueStoreField
    
    syntax ValueStoreField ::= "value1" [symbol(), klabel(field_ValueStore_value1)]
    
    syntax ValueStoreField ::= "value2" [symbol(), klabel(field_ValueStore_value2)]
    
    rule  ( #loc ( S2KValueStore . value1 ) => 0 )
      
    
    rule  ( #loc ( S2KValueStore . value2 ) => 1 )
      
    
    syntax Bytes ::= S2KValueStoreContract "." S2KValueStoreMethod [function(), symbol(), klabel(method_ValueStore)]
    
    syntax S2KValueStoreMethod ::= "method-changeValue1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_ValueStore_method-changeValue1_uint256)]
    
    syntax S2KValueStoreMethod ::= "method-changeValue2" "(" Int ":" "uint256" ")" [symbol(), klabel(method_ValueStore_method-changeValue2_uint256)]
    
    syntax S2KValueStoreMethod ::= "method-value1" "(" ")" [symbol(), klabel(method_ValueStore_method-value1_)]
    
    syntax S2KValueStoreMethod ::= "method-value2" "(" ")" [symbol(), klabel(method_ValueStore_method-value2_)]
    
    rule  ( S2KValueStore . method-changeValue1 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue1" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KValueStore . method-changeValue2 ( V0_newValue : uint256 ) => #abiCallData ( "changeValue2" , #uint256 ( V0_newValue ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newValue )
      
    
    rule  ( S2KValueStore . method-value1 ( ) => #abiCallData ( "value1" , .TypedArgs ) )
      
    
    rule  ( S2KValueStore . method-value2 ( ) => #abiCallData ( "value2" , .TypedArgs ) )
      
    
    rule  ( selector ( "changeValue1(uint256)" ) => 1634438405 )
      
    
    rule  ( selector ( "changeValue2(uint256)" ) => 367426214 )
      
    
    rule  ( selector ( "value1()" ) => 808665403 )
      
    
    rule  ( selector ( "value2()" ) => 1563665023 )
      

endmodule

module ArithmeticTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KArithmeticTestContract
    
    syntax S2KArithmeticTestContract ::= "S2KArithmeticTest" [symbol(), klabel(contract_ArithmeticTest)]
    
      
    
    syntax Field ::= ArithmeticTestField
    
    syntax ArithmeticTestField ::= "IS_TEST" [symbol(), klabel(field_ArithmeticTest_IS_TEST)]
    
    syntax ArithmeticTestField ::= "_failed" [symbol(), klabel(field_ArithmeticTest__failed)]
    
    syntax ArithmeticTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ArithmeticTest_IS_SCRIPT)]
    
    syntax ArithmeticTestField ::= "stdstore" [symbol(), klabel(field_ArithmeticTest_stdstore)]
    
    rule  ( #loc ( S2KArithmeticTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KArithmeticTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KArithmeticTestContract "." S2KArithmeticTestMethod [function(), symbol(), klabel(method_ArithmeticTest)]
    
    syntax S2KArithmeticTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_ArithmeticTest_method-IS_SCRIPT_)]
    
    syntax S2KArithmeticTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_ArithmeticTest_method-IS_TEST_)]
    
    syntax S2KArithmeticTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_ArithmeticTest_method-failed_)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_decreasing_div" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_decreasing_div_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_max1" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_max1_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_max1_broken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_max1_broken_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_max2" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_max2_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_wdiv_rounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_wdiv_rounding_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_wmul_increasing" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_wmul_increasing_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_wmul_increasing_gt_one" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_wmul_increasing_gt_one_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_wmul_increasing_overflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_wmul_increasing_overflow_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_wmul_increasing_positive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_wmul_increasing_positive_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_wmul_rounding" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_wmul_rounding_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_wmul_wdiv_inverse" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_wmul_wdiv_inverse_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_wmul_wdiv_inverse_underflow" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_wmul_wdiv_inverse_underflow_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-test_wmul_weakly_increasing_positive" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_ArithmeticTest_method-test_wmul_weakly_increasing_positive_uint256_uint256)]
    
    syntax S2KArithmeticTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_ArithmeticTest_method-vm_)]
    
    rule  ( S2KArithmeticTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KArithmeticTest . method-test_decreasing_div ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_decreasing_div" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_max1 ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_max1_broken ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_max1_broken" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_max2 ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_max2" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_wdiv_rounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wdiv_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_wmul_increasing ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_wmul_increasing_gt_one ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_gt_one" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_wmul_increasing_overflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_overflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_wmul_increasing_positive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_wmul_rounding ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_rounding" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_wmul_wdiv_inverse ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_wmul_wdiv_inverse_underflow ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_wdiv_inverse_underflow" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-test_wmul_weakly_increasing_positive ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_wmul_weakly_increasing_positive" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KArithmeticTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "test_decreasing_div(uint256,uint256)" ) => 1011519306 )
      
    
    rule  ( selector ( "test_max1(uint256,uint256)" ) => 1625765100 )
      
    
    rule  ( selector ( "test_max1_broken(uint256,uint256)" ) => 2809107068 )
      
    
    rule  ( selector ( "test_max2(uint256,uint256)" ) => 434746443 )
      
    
    rule  ( selector ( "test_wdiv_rounding(uint256,uint256)" ) => 345004095 )
      
    
    rule  ( selector ( "test_wmul_increasing(uint256,uint256)" ) => 2784670501 )
      
    
    rule  ( selector ( "test_wmul_increasing_gt_one(uint256,uint256)" ) => 899022695 )
      
    
    rule  ( selector ( "test_wmul_increasing_overflow(uint256,uint256)" ) => 1123042280 )
      
    
    rule  ( selector ( "test_wmul_increasing_positive(uint256,uint256)" ) => 490103800 )
      
    
    rule  ( selector ( "test_wmul_rounding(uint256,uint256)" ) => 4261140569 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse(uint256,uint256)" ) => 3719613508 )
      
    
    rule  ( selector ( "test_wmul_wdiv_inverse_underflow(uint256,uint256)" ) => 2736038219 )
      
    
    rule  ( selector ( "test_wmul_weakly_increasing_positive(uint256,uint256)" ) => 1421647895 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AssumeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAssumeTestContract
    
    syntax S2KAssumeTestContract ::= "S2KAssumeTest" [symbol(), klabel(contract_AssumeTest)]
    
      
    
    syntax Field ::= AssumeTestField
    
    syntax AssumeTestField ::= "IS_TEST" [symbol(), klabel(field_AssumeTest_IS_TEST)]
    
    syntax AssumeTestField ::= "_failed" [symbol(), klabel(field_AssumeTest__failed)]
    
    syntax AssumeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AssumeTest_IS_SCRIPT)]
    
    syntax AssumeTestField ::= "stdstore" [symbol(), klabel(field_AssumeTest_stdstore)]
    
    rule  ( #loc ( S2KAssumeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAssumeTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KAssumeTestContract "." S2KAssumeTestMethod [function(), symbol(), klabel(method_AssumeTest)]
    
    syntax S2KAssumeTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_AssumeTest_method-IS_SCRIPT_)]
    
    syntax S2KAssumeTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_AssumeTest_method-IS_TEST_)]
    
    syntax S2KAssumeTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_AssumeTest_method-failed_)]
    
    syntax S2KAssumeTestMethod ::= "method-testFail_assume_false" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_method-testFail_assume_false_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "method-testFail_assume_true" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_method-testFail_assume_true_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "method-test_assume_false" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_method-test_assume_false_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "method-test_assume_staticCall" "(" Int ":" "bool" ")" [symbol(), klabel(method_AssumeTest_method-test_assume_staticCall_bool)]
    
    syntax S2KAssumeTestMethod ::= "method-test_assume_true" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssumeTest_method-test_assume_true_uint256_uint256)]
    
    syntax S2KAssumeTestMethod ::= "method-test_multi_assume" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_AssumeTest_method-test_multi_assume_address_address)]
    
    syntax S2KAssumeTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_AssumeTest_method-vm_)]
    
    rule  ( S2KAssumeTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KAssumeTest . method-testFail_assume_false ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . method-testFail_assume_true ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "testFail_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . method-test_assume_false ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . method-test_assume_staticCall ( V0_a : bool ) => #abiCallData ( "test_assume_staticCall" , #bool ( V0_a ) , .TypedArgs ) )
       ensures #rangeBool ( V0_a )
      
    
    rule  ( S2KAssumeTest . method-test_assume_true ( V0_a : uint256 , V1_b : uint256 ) => #abiCallData ( "test_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( S2KAssumeTest . method-test_multi_assume ( V0_alice : address , V1_bob : address ) => #abiCallData ( "test_multi_assume" , #address ( V0_alice ) , #address ( V1_bob ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_alice )
       andBool ( #rangeAddress ( V1_bob )
               ))
      
    
    rule  ( S2KAssumeTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testFail_assume_false(uint256,uint256)" ) => 1596879099 )
      
    
    rule  ( selector ( "testFail_assume_true(uint256,uint256)" ) => 246830810 )
      
    
    rule  ( selector ( "test_assume_false(uint256,uint256)" ) => 3827036084 )
      
    
    rule  ( selector ( "test_assume_staticCall(bool)" ) => 1479621703 )
      
    
    rule  ( selector ( "test_assume_true(uint256,uint256)" ) => 1861181564 )
      
    
    rule  ( selector ( "test_multi_assume(address,address)" ) => 2625007844 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module BMCLoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBMCLoopsTestContract
    
    syntax S2KBMCLoopsTestContract ::= "S2KBMCLoopsTest" [symbol(), klabel(contract_BMCLoopsTest)]
    
      
    
    syntax Field ::= BMCLoopsTestField
    
    syntax BMCLoopsTestField ::= "IS_TEST" [symbol(), klabel(field_BMCLoopsTest_IS_TEST)]
    
    syntax BMCLoopsTestField ::= "_failed" [symbol(), klabel(field_BMCLoopsTest__failed)]
    
    syntax BMCLoopsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BMCLoopsTest_IS_SCRIPT)]
    
    syntax BMCLoopsTestField ::= "stdstore" [symbol(), klabel(field_BMCLoopsTest_stdstore)]
    
    rule  ( #loc ( S2KBMCLoopsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KBMCLoopsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KBMCLoopsTestContract "." S2KBMCLoopsTestMethod [function(), symbol(), klabel(method_BMCLoopsTest)]
    
    syntax S2KBMCLoopsTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_BMCLoopsTest_method-IS_SCRIPT_)]
    
    syntax S2KBMCLoopsTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_BMCLoopsTest_method-IS_TEST_)]
    
    syntax S2KBMCLoopsTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_BMCLoopsTest_method-failed_)]
    
    syntax S2KBMCLoopsTestMethod ::= "method-test_bmc" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BMCLoopsTest_method-test_bmc_uint256)]
    
    syntax S2KBMCLoopsTestMethod ::= "method-test_countdown_concrete" "(" ")" [symbol(), klabel(method_BMCLoopsTest_method-test_countdown_concrete_)]
    
    syntax S2KBMCLoopsTestMethod ::= "method-test_countdown_symbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BMCLoopsTest_method-test_countdown_symbolic_uint256)]
    
    syntax S2KBMCLoopsTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_BMCLoopsTest_method-vm_)]
    
    rule  ( S2KBMCLoopsTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . method-test_bmc ( V0_n : uint256 ) => #abiCallData ( "test_bmc" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KBMCLoopsTest . method-test_countdown_concrete ( ) => #abiCallData ( "test_countdown_concrete" , .TypedArgs ) )
      
    
    rule  ( S2KBMCLoopsTest . method-test_countdown_symbolic ( V0_n : uint256 ) => #abiCallData ( "test_countdown_symbolic" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KBMCLoopsTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "test_bmc(uint256)" ) => 2531276689 )
      
    
    rule  ( selector ( "test_countdown_concrete()" ) => 1189516988 )
      
    
    rule  ( selector ( "test_countdown_symbolic(uint256)" ) => 3183316184 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module BlockParamsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBlockParamsTestContract
    
    syntax S2KBlockParamsTestContract ::= "S2KBlockParamsTest" [symbol(), klabel(contract_BlockParamsTest)]
    
      
    
    syntax Field ::= BlockParamsTestField
    
    syntax BlockParamsTestField ::= "IS_TEST" [symbol(), klabel(field_BlockParamsTest_IS_TEST)]
    
    syntax BlockParamsTestField ::= "_failed" [symbol(), klabel(field_BlockParamsTest__failed)]
    
    syntax BlockParamsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BlockParamsTest_IS_SCRIPT)]
    
    syntax BlockParamsTestField ::= "stdstore" [symbol(), klabel(field_BlockParamsTest_stdstore)]
    
    rule  ( #loc ( S2KBlockParamsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KBlockParamsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KBlockParamsTestContract "." S2KBlockParamsTestMethod [function(), symbol(), klabel(method_BlockParamsTest)]
    
    syntax S2KBlockParamsTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_BlockParamsTest_method-IS_SCRIPT_)]
    
    syntax S2KBlockParamsTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_BlockParamsTest_method-IS_TEST_)]
    
    syntax S2KBlockParamsTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_BlockParamsTest_method-failed_)]
    
    syntax S2KBlockParamsTestMethod ::= "method-testBlockNumber" "(" ")" [symbol(), klabel(method_BlockParamsTest_method-testBlockNumber_)]
    
    syntax S2KBlockParamsTestMethod ::= "method-testChainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_method-testChainId_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "method-testCoinBase" "(" ")" [symbol(), klabel(method_BlockParamsTest_method-testCoinBase_)]
    
    syntax S2KBlockParamsTestMethod ::= "method-testFee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_method-testFee_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "method-testRoll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_method-testRoll_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "method-testWarp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_BlockParamsTest_method-testWarp_uint256)]
    
    syntax S2KBlockParamsTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_BlockParamsTest_method-vm_)]
    
    rule  ( S2KBlockParamsTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . method-testBlockNumber ( ) => #abiCallData ( "testBlockNumber" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . method-testChainId ( V0_newChainId : uint256 ) => #abiCallData ( "testChainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( S2KBlockParamsTest . method-testCoinBase ( ) => #abiCallData ( "testCoinBase" , .TypedArgs ) )
      
    
    rule  ( S2KBlockParamsTest . method-testFee ( V0_newFee : uint256 ) => #abiCallData ( "testFee" , #uint256 ( V0_newFee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newFee )
      
    
    rule  ( S2KBlockParamsTest . method-testRoll ( V0_newHeight : uint256 ) => #abiCallData ( "testRoll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( S2KBlockParamsTest . method-testWarp ( V0_time : uint256 ) => #abiCallData ( "testWarp" , #uint256 ( V0_time ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_time )
      
    
    rule  ( S2KBlockParamsTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testBlockNumber()" ) => 3916490861 )
      
    
    rule  ( selector ( "testChainId(uint256)" ) => 486990902 )
      
    
    rule  ( selector ( "testCoinBase()" ) => 2231467180 )
      
    
    rule  ( selector ( "testFee(uint256)" ) => 687351365 )
      
    
    rule  ( selector ( "testRoll(uint256)" ) => 3832502715 )
      
    
    rule  ( selector ( "testWarp(uint256)" ) => 1957961066 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module BroadcastTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBroadcastTestContract
    
    syntax S2KBroadcastTestContract ::= "S2KBroadcastTest" [symbol(), klabel(contract_BroadcastTest)]
    
      
    
    syntax Field ::= BroadcastTestField
    
    syntax BroadcastTestField ::= "IS_TEST" [symbol(), klabel(field_BroadcastTest_IS_TEST)]
    
    syntax BroadcastTestField ::= "_failed" [symbol(), klabel(field_BroadcastTest__failed)]
    
    syntax BroadcastTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BroadcastTest_IS_SCRIPT)]
    
    syntax BroadcastTestField ::= "stdstore" [symbol(), klabel(field_BroadcastTest_stdstore)]
    
    syntax BroadcastTestField ::= "ACCOUNT_A" [symbol(), klabel(field_BroadcastTest_ACCOUNT_A)]
    
    syntax BroadcastTestField ::= "ACCOUNT_B" [symbol(), klabel(field_BroadcastTest_ACCOUNT_B)]
    
    rule  ( #loc ( S2KBroadcastTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KBroadcastTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KBroadcastTest . ACCOUNT_A ) => 8 )
      
    
    rule  ( #loc ( S2KBroadcastTest . ACCOUNT_B ) => 9 )
      
    
    syntax Bytes ::= S2KBroadcastTestContract "." S2KBroadcastTestMethod [function(), symbol(), klabel(method_BroadcastTest)]
    
    syntax S2KBroadcastTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_BroadcastTest_method-IS_SCRIPT_)]
    
    syntax S2KBroadcastTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_BroadcastTest_method-IS_TEST_)]
    
    syntax S2KBroadcastTestMethod ::= "method-deployNoArgs" "(" ")" [symbol(), klabel(method_BroadcastTest_method-deployNoArgs_)]
    
    syntax S2KBroadcastTestMethod ::= "method-deployOther" "(" ")" [symbol(), klabel(method_BroadcastTest_method-deployOther_)]
    
    syntax S2KBroadcastTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_BroadcastTest_method-failed_)]
    
    syntax S2KBroadcastTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_BroadcastTest_method-setUp_)]
    
    syntax S2KBroadcastTestMethod ::= "method-testDeploy" "(" ")" [symbol(), klabel(method_BroadcastTest_method-testDeploy_)]
    
    syntax S2KBroadcastTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_BroadcastTest_method-vm_)]
    
    rule  ( S2KBroadcastTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . method-deployNoArgs ( ) => #abiCallData ( "deployNoArgs" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . method-deployOther ( ) => #abiCallData ( "deployOther" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . method-testDeploy ( ) => #abiCallData ( "testDeploy" , .TypedArgs ) )
      
    
    rule  ( S2KBroadcastTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "deployNoArgs()" ) => 1902058844 )
      
    
    rule  ( selector ( "deployOther()" ) => 4254441026 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testDeploy()" ) => 894117685 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Constants-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KConstantsContract
    
    syntax S2KConstantsContract ::= "S2KConstants" [symbol(), klabel(contract_Constants)]
    
      

endmodule

module Contract-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractContract
    
    syntax S2KContractContract ::= "S2KContract" [symbol(), klabel(contract_Contract)]
    
      

endmodule

module ContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractTestContract
    
    syntax S2KContractTestContract ::= "S2KContractTest" [symbol(), klabel(contract_ContractTest)]
    
      
    
    syntax Field ::= ContractTestField
    
    syntax ContractTestField ::= "IS_TEST" [symbol(), klabel(field_ContractTest_IS_TEST)]
    
    syntax ContractTestField ::= "_failed" [symbol(), klabel(field_ContractTest__failed)]
    
    syntax ContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractTest_IS_SCRIPT)]
    
    syntax ContractTestField ::= "stdstore" [symbol(), klabel(field_ContractTest_stdstore)]
    
    rule  ( #loc ( S2KContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KContractTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KContractTestContract "." S2KContractTestMethod [function(), symbol(), klabel(method_ContractTest)]
    
    syntax S2KContractTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_ContractTest_method-IS_SCRIPT_)]
    
    syntax S2KContractTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_ContractTest_method-IS_TEST_)]
    
    syntax S2KContractTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_ContractTest_method-failed_)]
    
    syntax S2KContractTestMethod ::= "method-testExample" "(" ")" [symbol(), klabel(method_ContractTest_method-testExample_)]
    
    syntax S2KContractTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_ContractTest_method-vm_)]
    
    rule  ( S2KContractTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . method-testExample ( ) => #abiCallData ( "testExample" , .TypedArgs ) )
      
    
    rule  ( S2KContractTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testExample()" ) => 1062881834 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ContractBTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KContractBTestContract
    
    syntax S2KContractBTestContract ::= "S2KContractBTest" [symbol(), klabel(contract_ContractBTest)]
    
      
    
    syntax Field ::= ContractBTestField
    
    syntax ContractBTestField ::= "IS_TEST" [symbol(), klabel(field_ContractBTest_IS_TEST)]
    
    syntax ContractBTestField ::= "_failed" [symbol(), klabel(field_ContractBTest__failed)]
    
    syntax ContractBTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractBTest_IS_SCRIPT)]
    
    syntax ContractBTestField ::= "stdstore" [symbol(), klabel(field_ContractBTest_stdstore)]
    
    syntax ContractBTestField ::= "testNumber" [symbol(), klabel(field_ContractBTest_testNumber)]
    
    rule  ( #loc ( S2KContractBTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KContractBTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KContractBTest . testNumber ) => 8 )
      
    
    syntax Bytes ::= S2KContractBTestContract "." S2KContractBTestMethod [function(), symbol(), klabel(method_ContractBTest)]
    
    syntax S2KContractBTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_ContractBTest_method-IS_SCRIPT_)]
    
    syntax S2KContractBTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_ContractBTest_method-IS_TEST_)]
    
    syntax S2KContractBTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_ContractBTest_method-failed_)]
    
    syntax S2KContractBTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_ContractBTest_method-setUp_)]
    
    syntax S2KContractBTestMethod ::= "method-testCannotSubtract43" "(" ")" [symbol(), klabel(method_ContractBTest_method-testCannotSubtract43_)]
    
    syntax S2KContractBTestMethod ::= "method-testFailSubtract43" "(" ")" [symbol(), klabel(method_ContractBTest_method-testFailSubtract43_)]
    
    syntax S2KContractBTestMethod ::= "method-testNumberIs42" "(" ")" [symbol(), klabel(method_ContractBTest_method-testNumberIs42_)]
    
    syntax S2KContractBTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_ContractBTest_method-vm_)]
    
    rule  ( S2KContractBTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2S2KtractBTest . method-testCannotSubtract43 ( ) => #abiCallData ( "testCannotSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . method-testFailSubtract43 ( ) => #abiCallData ( "testFailSubtract43" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . method-testNumberIs42 ( ) => #abiCallData ( "testNumberIs42" , .TypedArgs ) )
      
    
    rule  ( S2KContractBTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testCannotSubtract43()" ) => 932201548 )
      
    
    rule  ( selector ( "testFailSubtract43()" ) => 1021814620 )
      
    
    rule  ( selector ( "testNumberIs42()" ) => 795542700 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Counter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KCounterContract
    
    syntax S2KCounterContract ::= "S2KCounter" [symbol(), klabel(contract_Counter)]
    
      
    
    syntax Field ::= CounterField
    
    syntax CounterField ::= "number" [symbol(), klabel(field_Counter_number)]
    
    rule  ( #loc ( S2KCounter . number ) => 0 )
      
    
    syntax Bytes ::= S2KCounterContract "." S2S2KnterMethod [function(), symbol(), klabel(method_Counter)]
    
    syntax S2KCounterMethod ::= "method-increment" "(" ")" [symbol(), klabel(method_Counter_method-increment_)]
    
    syntax S2KCounterMethod ::= "method-number" "(" ")" [symbol(), klabel(method_Counter_method-number_)]
    
    syntax S2KCounterMethod ::= "method-setNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Counter_method-setNumber_uint256)]
    
    rule  ( S2KCounter . method-increment ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2KCounter . method-number ( ) => #abiCallData ( "number" , .TypedArgs ) )
      
    
    rule  ( S2KCounter . method-setNumber ( V0_newNumber : uint256 ) => #abiCallData ( "setNumber" , #uint256 ( V0_newNumber ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newNumber )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "number()" ) => 2206332298 )
      
    
    rule  ( selector ( "setNumber(uint256)" ) => 1068876235 )
      

endmodule

module CounterTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KCounterTestContract
    
    syntax S2KCounterTestContract ::= "S2S2KnterTest" [symbol(), klabel(contract_CounterTest)]
    
      
    
    syntax Field ::= CounterTestField
    
    syntax CounterTestField ::= "IS_TEST" [symbol(), klabel(field_CounterTest_IS_TEST)]
    
    syntax CounterTestField ::= "_failed" [symbol(), klabel(field_CounterTest__failed)]
    
    syntax CounterTestField ::= "IS_SCRIPT" [symbol(), klabel(field_CounterTest_IS_SCRIPT)]
    
    syntax CounterTestField ::= "stdstore" [symbol(), klabel(field_CounterTest_stdstore)]
    
    syntax CounterTestField ::= "counter" [symbol(), klabel(field_CounterTest_counter)]
    
    rule  ( #loc ( S2KCounterTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KCounterTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KCounterTest . counter ) => 8 )
      
    
    syntax Bytes ::= S2KCounterTestContract "." S2KCounterTestMethod [function(), symbol(), klabel(method_CounterTest)]
    
    syntax S2KCounterTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_CounterTest_method-IS_SCRIPT_)]
    
    syntax S2S2KnterTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_CounterTest_method-IS_TEST_)]
    
    syntax S2KCounterTestMethod ::= "method-counter" "(" ")" [symbol(), klabel(method_CounterTest_method-counter_)]
    
    syntax S2KCounterTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_CounterTest_method-failed_)]
    
    syntax S2KCounterTestMethod ::= "method-kevm" "(" ")" [symbol(), klabel(method_CounterTest_method-kevm_)]
    
    syntax S2KCounterTestMethod ::= "method-testIncrement" "(" ")" [symbol(), klabel(method_CounterTest_method-testIncrement_)]
    
    syntax S2KCounterTestMethod ::= "method-testSetNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_CounterTest_method-testSetNumber_uint256)]
    
    syntax S2KCounterTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_CounterTest_method-vm_)]
    
    rule  ( S2KCounterTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2S2KnterTest . method-counter ( ) => #abiCallData ( "counter" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . method-kevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . method-testIncrement ( ) => #abiCallData ( "testIncrement" , .TypedArgs ) )
      
    
    rule  ( S2KCounterTest . method-testSetNumber ( V0_x : uint256 ) => #abiCallData ( "testSetNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KCounterTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "counter()" ) => 1639719450 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testIncrement()" ) => 3105072586 )
      
    
    rule  ( selector ( "testSetNumber(uint256)" ) => 1895400894 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module DynamicTypes-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDynamicTypesContract
    
    syntax S2KDynamicTypesContract ::= "S2KDynamicTypes" [symbol(), klabel(contract_DynamicTypes)]
    
      
    
    syntax Field ::= DynamicTypesField
    
    syntax DynamicTypesField ::= "IS_TEST" [symbol(), klabel(field_DynamicTypes_IS_TEST)]
    
    syntax DynamicTypesField ::= "_failed" [symbol(), klabel(field_DynamicTypes__failed)]
    
    syntax DynamicTypesField ::= "IS_SCRIPT" [symbol(), klabel(field_DynamicTypes_IS_SCRIPT)]
    
    syntax DynamicTypesField ::= "stdstore" [symbol(), klabel(field_DynamicTypes_stdstore)]
    
    rule  ( #loc ( S2S2KamicTypes . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KDynamicTypes . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KDynamicTypesContract "." S2KDynamicTypesMethod [function(), symbol(), klabel(method_DynamicTypes)]
    
    syntax S2KDynamicTypesMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_DynamicTypes_method-IS_SCRIPT_)]
    
    syntax S2KDynamicTypesMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_DynamicTypes_method-IS_TEST_)]
    
    syntax S2KDynamicTypesMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_DynamicTypes_method-failed_)]
    
    syntax S2S2KamicTypesMethod ::= "method-test_dynamic_byte_read" "(" Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol(), klabel(method_DynamicTypes_method-test_dynamic_byte_read_bytes_uint256)]
    
    syntax S2KDynamicTypesMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_DynamicTypes_method-vm_)]
    
    rule  ( S2KDynamicTypes . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KDynamicTypes . method-test_dynamic_byte_read ( V0_data : bytes , V1_offset : uint256 ) => #abiCallData ( "test_dynamic_byte_read" , #bytes ( V0_data ) , #uint256 ( V1_offset ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 128 , lengthBytes ( V0_data ) )
       andBool ( #rangeUInt ( 256 , V1_offset )
               ))
      
    
    rule  ( S2KDynamicTypes . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "test_dynamic_byte_read(bytes,uint256)" ) => 4003228173 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ExpectEmit-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectEmitContract
    
    syntax S2KExpectEmitContract ::= "S2S2KectEmit" [symbol(), klabel(contract_ExpectEmit)]
    
      
    
    syntax Bytes ::= S2KExpectEmitContract "." S2KExpectEmitMethod [function(), symbol(), klabel(method_ExpectEmit)]
    
    syntax S2KExpectEmitMethod ::= "method-t" "(" ")" [symbol(), klabel(method_ExpectEmit_method-t_)]
    
    rule  ( S2KExpectEmit . method-t ( ) => #abiCallData ( "t" , .TypedArgs ) )
      
    
    rule  ( selector ( "t()" ) => 2463158611 )
      

endmodule

module EmitContractTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KEmitContractTestContract
    
    syntax S2KEmitContractTestContract ::= "S2KEmitContractTest" [symbol(), klabel(contract_EmitContractTest)]
    
      
    
    syntax Field ::= EmitContractTestField
    
    syntax EmitContractTestField ::= "IS_TEST" [symbol(), klabel(field_EmitContractTest_IS_TEST)]
    
    syntax EmitContractTestField ::= "_failed" [symbol(), klabel(field_EmitContractTest__failed)]
    
    syntax EmitContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EmitContractTest_IS_SCRIPT)]
    
    syntax EmitContractTestField ::= "stdstore" [symbol(), klabel(field_EmitContractTest_stdstore)]
    
    rule  ( #loc ( S2KEmitContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2S2KtContractTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KEmitContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KEmitContractTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KEmitContractTestContract "." S2KEmitContractTestMethod [function(), symbol(), klabel(method_EmitContractTest)]
    
    syntax S2KEmitContractTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_EmitContractTest_method-IS_SCRIPT_)]
    
    syntax S2KEmitContractTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_EmitContractTest_method-IS_TEST_)]
    
    syntax S2KEmitContractTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_EmitContractTest_method-failed_)]
    
    syntax S2KEmitContractTestMethod ::= "method-testExpectEmit" "(" ")" [symbol(), klabel(method_EmitContractTest_method-testExpectEmit_)]
    
    syntax S2S2KtContractTestMethod ::= "method-testExpectEmitCheckEmitter" "(" ")" [symbol(), klabel(method_EmitContractTest_method-testExpectEmitCheckEmitter_)]
    
    syntax S2KEmitContractTestMethod ::= "method-testExpectEmitDoNotCheckData" "(" ")" [symbol(), klabel(method_EmitContractTest_method-testExpectEmitDoNotCheckData_)]
    
    syntax S2KEmitContractTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_EmitContractTest_method-vm_)]
    
    rule  ( S2KEmitContractTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . method-testExpectEmit ( ) => #abiCallData ( "testExpectEmit" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . method-testExpectEmitCheckEmitter ( ) => #abiCallData ( "testExpectEmitCheckEmitter" , .TypedArgs ) )
      
    
    rule  ( S2KEmitContractTest . method-testExpectEmitDoNotCheckData ( ) => #abiCallData ( "testExpectEmitDoNotCheckData" , .TypedArgs ) )
      
    
    rule  ( S2S2KtContractTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testExpectEmit()" ) => 2385562937 )
      
    
    rule  ( selector ( "testExpectEmitCheckEmitter()" ) => 3822672185 )
      
    
    rule  ( selector ( "testExpectEmitDoNotCheckData()" ) => 4244930061 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module EnvTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KEnvTestContract
    
    syntax S2KEnvTestContract ::= "S2KEnvTest" [symbol(), klabel(contract_EnvTest)]
    
      
    
    syntax Field ::= EnvTestField
    
    syntax EnvTestField ::= "IS_TEST" [symbol(), klabel(field_EnvTest_IS_TEST)]
    
    syntax EnvTestField ::= "_failed" [symbol(), klabel(field_EnvTest__failed)]
    
    syntax EnvTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EnvTest_IS_SCRIPT)]
    
    syntax EnvTestField ::= "stdstore" [symbol(), klabel(field_EnvTest_stdstore)]
    
    rule  ( #loc ( S2KEnvTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KEnvTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KEnvTestContract "." S2S2KTestMethod [function(), symbol(), klabel(method_EnvTest)]
    
    syntax S2KEnvTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_EnvTest_method-IS_SCRIPT_)]
    
    syntax S2KEnvTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_EnvTest_method-IS_TEST_)]
    
    syntax S2KEnvTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_EnvTest_method-failed_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvAddress" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvAddress_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvAddresseArray" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvAddresseArray_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvBool" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvBool_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvBoolArray" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvBoolArray_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvBytes" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvBytes_)]
    
    syntax S2S2KTestMethod ::= "method-testEnvBytes32" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvBytes32_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvBytes32Array" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvBytes32Array_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvBytesArray" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvBytesArray_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvInt" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvInt_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvIntArray" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvIntArray_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvString" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvString_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvStringArray" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvStringArray_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvUInt" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvUInt_)]
    
    syntax S2KEnvTestMethod ::= "method-testEnvUIntArray" "(" ")" [symbol(), klabel(method_EnvTest_method-testEnvUIntArray_)]
    
    syntax S2S2KTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_EnvTest_method-vm_)]
    
    rule  ( S2KEnvTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvAddress ( ) => #abiCallData ( "testEnvAddress" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvAddresseArray ( ) => #abiCallData ( "testEnvAddresseArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvBool ( ) => #abiCallData ( "testEnvBool" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvBoolArray ( ) => #abiCallData ( "testEnvBoolArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvBytes ( ) => #abiCallData ( "testEnvBytes" , .TypedArgs ) )
      
    
    rule  ( S2S2KTest . method-testEnvBytes32 ( ) => #abiCallData ( "testEnvBytes32" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvBytes32Array ( ) => #abiCallData ( "testEnvBytes32Array" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvBytesArray ( ) => #abiCallData ( "testEnvBytesArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvInt ( ) => #abiCallData ( "testEnvInt" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvIntArray ( ) => #abiCallData ( "testEnvIntArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvString ( ) => #abiCallData ( "testEnvString" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvStringArray ( ) => #abiCallData ( "testEnvStringArray" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvUInt ( ) => #abiCallData ( "testEnvUInt" , .TypedArgs ) )
      
    
    rule  ( S2KEnvTest . method-testEnvUIntArray ( ) => #abiCallData ( "testEnvUIntArray" , .TypedArgs ) )
      
    
    rule  ( S2S2KTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testEnvAddress()" ) => 2862857531 )
      
    
    rule  ( selector ( "testEnvAddresseArray()" ) => 3294476741 )
      
    
    rule  ( selector ( "testEnvBool()" ) => 894343624 )
      
    
    rule  ( selector ( "testEnvBoolArray()" ) => 2095834153 )
      
    
    rule  ( selector ( "testEnvBytes()" ) => 1439135834 )
      
    
    rule  ( selector ( "testEnvBytes32()" ) => 1818390676 )
      
    
    rule  ( selector ( "testEnvBytes32Array()" ) => 1427447379 )
      
    
    rule  ( selector ( "testEnvBytesArray()" ) => 2593538909 )
      
    
    rule  ( selector ( "testEnvInt()" ) => 446472630 )
      
    
    rule  ( selector ( "testEnvIntArray()" ) => 994678527 )
      
    
    rule  ( selector ( "testEnvString()" ) => 1097637738 )
      
    
    rule  ( selector ( "testEnvStringArray()" ) => 3587215751 )
      
    
    rule  ( selector ( "testEnvUInt()" ) => 2066287170 )
      
    
    rule  ( selector ( "testEnvUIntArray()" ) => 551796351 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Dummy-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDummyContract
    
    syntax S2KDummyContract ::= "S2KDummy" [symbol(), klabel(contract_Dummy)]
    
      
    
    syntax Bytes ::= S2KDummyContract "." S2KDummyMethod [function(), symbol(), klabel(method_Dummy)]
    
    syntax S2KDummyMethod ::= "method-numberA" "(" ")" [symbol(), klabel(method_Dummy_method-numberA_)]
    
    rule  ( S2KDummy . method-numberA ( ) => #abiCallData ( "numberA" , .TypedArgs ) )
      
    
    rule  ( selector ( "numberA()" ) => 2571869527 )
      

endmodule

module ExpectCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectCallTestContract
    
    syntax S2S2KectCallTestContract ::= "S2KExpectCallTest" [symbol(), klabel(contract_ExpectCallTest)]
    
      
    
    syntax Field ::= ExpectCallTestField
    
    syntax ExpectCallTestField ::= "IS_TEST" [symbol(), klabel(field_ExpectCallTest_IS_TEST)]
    
    syntax ExpectCallTestField ::= "_failed" [symbol(), klabel(field_ExpectCallTest__failed)]
    
    syntax ExpectCallTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ExpectCallTest_IS_SCRIPT)]
    
    syntax ExpectCallTestField ::= "stdstore" [symbol(), klabel(field_ExpectCallTest_stdstore)]
    
    rule  ( #loc ( S2KExpectCallTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KExpectCallTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KExpectCallTestContract "." S2KExpectCallTestMethod [function(), symbol(), klabel(method_ExpectCallTest)]
    
    syntax S2KExpectCallTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_ExpectCallTest_method-IS_SCRIPT_)]
    
    syntax S2S2KectCallTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_ExpectCallTest_method-IS_TEST_)]
    
    syntax S2KExpectCallTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_ExpectCallTest_method-failed_)]
    
    syntax S2KExpectCallTestMethod ::= "method-kevm" "(" ")" [symbol(), klabel(method_ExpectCallTest_method-kevm_)]
    
    syntax S2KExpectCallTestMethod ::= "method-testExpectRegularCall" "(" ")" [symbol(), klabel(method_ExpectCallTest_method-testExpectRegularCall_)]
    
    syntax S2KExpectCallTestMethod ::= "method-testExpectStaticCall" "(" ")" [symbol(), klabel(method_ExpectCallTest_method-testExpectStaticCall_)]
    
    syntax S2KExpectCallTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_ExpectCallTest_method-vm_)]
    
    rule  ( S2KExpectCallTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2S2KectCallTest . method-kevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . method-testExpectRegularCall ( ) => #abiCallData ( "testExpectRegularCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . method-testExpectStaticCall ( ) => #abiCallData ( "testExpectStaticCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectCallTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testExpectRegularCall()" ) => 676731872 )
      
    
    rule  ( selector ( "testExpectStaticCall()" ) => 3219733999 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module DepthReverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDepthReverterContract
    
    syntax S2KDepthReverterContract ::= "S2KDepthReverter" [symbol(), klabel(contract_DepthReverter)]
    
      
    
    syntax Field ::= DepthReverterField
    
    syntax DepthReverterField ::= "reverter" [symbol(), klabel(field_DepthReverter_reverter)]
    
    rule  ( #loc ( S2KDepthReverter . reverter ) => 0 )
      
    
    syntax Bytes ::= S2KDepthReverterContract "." S2S2KthReverterMethod [function(), symbol(), klabel(method_DepthReverter)]
    
    syntax S2KDepthReverterMethod ::= "method-revertAtNextDepth" "(" ")" [symbol(), klabel(method_DepthReverter_method-revertAtNextDepth_)]
    
    rule  ( S2KDepthReverter . method-revertAtNextDepth ( ) => #abiCallData ( "revertAtNextDepth" , .TypedArgs ) )
      
    
    rule  ( selector ( "revertAtNextDepth()" ) => 332278727 )
      

endmodule

module ExpectRevertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KExpectRevertTestContract
    
    syntax S2KExpectRevertTestContract ::= "S2KExpectRevertTest" [symbol(), klabel(contract_ExpectRevertTest)]
    
      
    
    syntax Field ::= ExpectRevertTestField
    
    syntax ExpectRevertTestField ::= "IS_TEST" [symbol(), klabel(field_ExpectRevertTest_IS_TEST)]
    
    syntax ExpectRevertTestField ::= "_failed" [symbol(), klabel(field_ExpectRevertTest__failed)]
    
    syntax ExpectRevertTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ExpectRevertTest_IS_SCRIPT)]
    
    syntax ExpectRevertTestField ::= "stdstore" [symbol(), klabel(field_ExpectRevertTest_stdstore)]
    
    rule  ( #loc ( S2KExpectRevertTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KExpectRevertTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2S2KectRevertTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KExpectRevertTestContract "." S2KExpectRevertTestMethod [function(), symbol(), klabel(method_ExpectRevertTest)]
    
    syntax S2KExpectRevertTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-IS_SCRIPT_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-IS_TEST_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-failed_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-testFail_ExpectRevert_failAndSuccess" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-testFail_ExpectRevert_failAndSuccess_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-testFail_expectRevert_bytes4" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-testFail_expectRevert_bytes4_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-testFail_expectRevert_empty" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-testFail_expectRevert_empty_)]
    
    syntax S2S2KectRevertTestMethod ::= "method-testFail_expectRevert_false" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-testFail_expectRevert_false_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-testFail_expectRevert_multipleReverts" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-testFail_expectRevert_multipleReverts_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-test_ExpectRevert_increasedDepth" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-test_ExpectRevert_increasedDepth_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-test_expectRevert_bytes4" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-test_expectRevert_bytes4_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-test_expectRevert_encodedSymbolic" "(" Int ":" "address" ")" [symbol(), klabel(method_ExpectRevertTest_method-test_expectRevert_encodedSymbolic_address)]
    
    syntax S2KExpectRevertTestMethod ::= "method-test_expectRevert_internalCall" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-test_expectRevert_internalCall_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-test_expectRevert_message" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-test_expectRevert_message_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-test_expectRevert_returnValue" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-test_expectRevert_returnValue_)]
    
    syntax S2KExpectRevertTestMethod ::= "method-test_expectRevert_true" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-test_expectRevert_true_)]
    
    syntax S2S2KectRevertTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_ExpectRevertTest_method-vm_)]
    
    rule  ( S2KExpectRevertTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-testFail_ExpectRevert_failAndSuccess ( ) => #abiCallData ( "testFail_ExpectRevert_failAndSuccess" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-testFail_expectRevert_bytes4 ( ) => #abiCallData ( "testFail_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-testFail_expectRevert_empty ( ) => #abiCallData ( "testFail_expectRevert_empty" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-testFail_expectRevert_false ( ) => #abiCallData ( "testFail_expectRevert_false" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-testFail_expectRevert_multipleReverts ( ) => #abiCallData ( "testFail_expectRevert_multipleReverts" , .TypedArgs ) )
      
    
    rule  ( S2S2KectRevertTest . method-test_ExpectRevert_increasedDepth ( ) => #abiCallData ( "test_ExpectRevert_increasedDepth" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-test_expectRevert_bytes4 ( ) => #abiCallData ( "test_expectRevert_bytes4" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-test_expectRevert_encodedSymbolic ( V0_controller : address ) => #abiCallData ( "test_expectRevert_encodedSymbolic" , #address ( V0_controller ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_controller )
      
    
    rule  ( S2KExpectRevertTest . method-test_expectRevert_internalCall ( ) => #abiCallData ( "test_expectRevert_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-test_expectRevert_message ( ) => #abiCallData ( "test_expectRevert_message" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-test_expectRevert_returnValue ( ) => #abiCallData ( "test_expectRevert_returnValue" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-test_expectRevert_true ( ) => #abiCallData ( "test_expectRevert_true" , .TypedArgs ) )
      
    
    rule  ( S2KExpectRevertTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testFail_ExpectRevert_failAndSuccess()" ) => 2386222785 )
      
    
    rule  ( selector ( "testFail_expectRevert_bytes4()" ) => 3540765930 )
      
    
    rule  ( selector ( "testFail_expectRevert_empty()" ) => 3691097669 )
      
    
    rule  ( selector ( "testFail_expectRevert_false()" ) => 2152588325 )
      
    
    rule  ( selector ( "testFail_expectRevert_multipleReverts()" ) => 2539873268 )
      
    
    rule  ( selector ( "test_ExpectRevert_increasedDepth()" ) => 910856553 )
      
    
    rule  ( selector ( "test_expectRevert_bytes4()" ) => 1300765909 )
      
    
    rule  ( selector ( "test_expectRevert_encodedSymbolic(address)" ) => 27292786 )
      
    
    rule  ( selector ( "test_expectRevert_internalCall()" ) => 1766536967 )
      
    
    rule  ( selector ( "test_expectRevert_message()" ) => 3706733127 )
      
    
    rule  ( selector ( "test_expectRevert_returnValue()" ) => 4193569282 )
      
    
    rule  ( selector ( "test_expectRevert_true()" ) => 2931127071 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Reverter-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KReverterContract
    
    syntax S2S2KerterContract ::= "S2KReverter" [symbol(), klabel(contract_Reverter)]
    
      
    
    syntax Bytes ::= S2KReverterContract "." S2KReverterMethod [function(), symbol(), klabel(method_Reverter)]
    
    syntax S2KReverterMethod ::= "method-noRevert" "(" ")" [symbol(), klabel(method_Reverter_method-noRevert_)]
    
    syntax S2KReverterMethod ::= "method-revertWithReason" "(" String ":" "string" ")" [symbol(), klabel(method_Reverter_method-revertWithReason_string)]
    
    syntax S2KReverterMethod ::= "method-revertWithoutReason" "(" ")" [symbol(), klabel(method_Reverter_method-revertWithoutReason_)]
    
    rule  ( S2KReverter . method-noRevert ( ) => #abiCallData ( "noRevert" , .TypedArgs ) )
      
    
    rule  ( S2KReverter . method-revertWithReason ( V0__a : string ) => #abiCallData ( "revertWithReason" , #string ( V0__a ) , .TypedArgs ) )
      
    
    rule  ( S2S2Kerter . method-revertWithoutReason ( ) => #abiCallData ( "revertWithoutReason" , .TypedArgs ) )
      
    
    rule  ( selector ( "noRevert()" ) => 3072618433 )
      
    
    rule  ( selector ( "revertWithReason(string)" ) => 4154655617 )
      
    
    rule  ( selector ( "revertWithoutReason()" ) => 1097275021 )
      

endmodule

module ReverterWithReturn-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KReverterWithReturnContract
    
    syntax S2KReverterWithReturnContract ::= "S2KReverterWithReturn" [symbol(), klabel(contract_ReverterWithReturn)]
    
      
    
    syntax Bytes ::= S2KReverterWithReturnContract "." S2KReverterWithReturnMethod [function(), symbol(), klabel(method_ReverterWithReturn)]
    
    syntax S2KReverterWithReturnMethod ::= "method-returnBytesUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_ReverterWithReturn_method-returnBytesUnless_bool)]
    
    syntax S2KReverterWithReturnMethod ::= "method-returnTupleUnless" "(" Int ":" "bool" ")" [symbol(), klabel(method_ReverterWithReturn_method-returnTupleUnless_bool)]
    
    rule  ( S2KReverterWithReturn . method-returnBytesUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnBytesUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( S2S2KerterWithReturn . method-returnTupleUnless ( V0_revertInstead : bool ) => #abiCallData ( "returnTupleUnless" , #bool ( V0_revertInstead ) , .TypedArgs ) )
       ensures #rangeBool ( V0_revertInstead )
      
    
    rule  ( selector ( "returnBytesUnless(bool)" ) => 3511402276 )
      
    
    rule  ( selector ( "returnTupleUnless(bool)" ) => 3931056962 )
      

endmodule

module FfiTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KFfiTestContract
    
    syntax S2KFfiTestContract ::= "S2KFfiTest" [symbol(), klabel(contract_FfiTest)]
    
      
    
    syntax Field ::= FfiTestField
    
    syntax FfiTestField ::= "IS_TEST" [symbol(), klabel(field_FfiTest_IS_TEST)]
    
    syntax FfiTestField ::= "_failed" [symbol(), klabel(field_FfiTest__failed)]
    
    syntax FfiTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FfiTest_IS_SCRIPT)]
    
    syntax FfiTestField ::= "stdstore" [symbol(), klabel(field_FfiTest_stdstore)]
    
    rule  ( #loc ( S2KFfiTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KFfiTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KFfiTestContract "." S2S2KTestMethod [function(), symbol(), klabel(method_FfiTest)]
    
    syntax S2KFfiTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_FfiTest_method-IS_SCRIPT_)]
    
    syntax S2KFfiTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_FfiTest_method-IS_TEST_)]
    
    syntax S2KFfiTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_FfiTest_method-failed_)]
    
    syntax S2KFfiTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_FfiTest_method-setUp_)]
    
    syntax S2KFfiTestMethod ::= "method-testFFIFOO" "(" ")" [symbol(), klabel(method_FfiTest_method-testFFIFOO_)]
    
    syntax S2KFfiTestMethod ::= "method-testFFIScript" "(" ")" [symbol(), klabel(method_FfiTest_method-testFFIScript_)]
    
    syntax S2KFfiTestMethod ::= "method-testFFIScript2" "(" ")" [symbol(), klabel(method_FfiTest_method-testFFIScript2_)]
    
    syntax S2KFfiTestMethod ::= "method-testffi" "(" ")" [symbol(), klabel(method_FfiTest_method-testffi_)]
    
    syntax S2S2KTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_FfiTest_method-vm_)]
    
    rule  ( S2KFfiTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . method-testFFIFOO ( ) => #abiCallData ( "testFFIFOO" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . method-testFFIScript ( ) => #abiCallData ( "testFFIScript" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . method-testFFIScript2 ( ) => #abiCallData ( "testFFIScript2" , .TypedArgs ) )
      
    
    rule  ( S2KFfiTest . method-testffi ( ) => #abiCallData ( "testffi" , .TypedArgs ) )
      
    
    rule  ( S2S2KTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFFIFOO()" ) => 2415994822 )
      
    
    rule  ( selector ( "testFFIScript()" ) => 2734086837 )
      
    
    rule  ( selector ( "testFFIScript2()" ) => 4125794598 )
      
    
    rule  ( selector ( "testffi()" ) => 4068116 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module FilesTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KFilesTestContract
    
    syntax S2KFilesTestContract ::= "S2KFilesTest" [symbol(), klabel(contract_FilesTest)]
    
      
    
    syntax Field ::= FilesTestField
    
    syntax FilesTestField ::= "IS_TEST" [symbol(), klabel(field_FilesTest_IS_TEST)]
    
    syntax FilesTestField ::= "_failed" [symbol(), klabel(field_FilesTest__failed)]
    
    syntax FilesTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FilesTest_IS_SCRIPT)]
    
    syntax FilesTestField ::= "stdstore" [symbol(), klabel(field_FilesTest_stdstore)]
    
    rule  ( #loc ( S2KFilesTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KFilesTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KFilesTestContract "." S2S2KesTestMethod [function(), symbol(), klabel(method_FilesTest)]
    
    syntax S2KFilesTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_FilesTest_method-IS_SCRIPT_)]
    
    syntax S2KFilesTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_FilesTest_method-IS_TEST_)]
    
    syntax S2KFilesTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_FilesTest_method-failed_)]
    
    syntax S2KFilesTestMethod ::= "method-testFailRemoveFile" "(" ")" [symbol(), klabel(method_FilesTest_method-testFailRemoveFile_)]
    
    syntax S2KFilesTestMethod ::= "method-testReadWriteFile" "(" ")" [symbol(), klabel(method_FilesTest_method-testReadWriteFile_)]
    
    syntax S2KFilesTestMethod ::= "method-testReadWriteLine" "(" ")" [symbol(), klabel(method_FilesTest_method-testReadWriteLine_)]
    
    syntax S2KFilesTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_FilesTest_method-vm_)]
    
    rule  ( S2KFilesTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2S2KesTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . method-testFailRemoveFile ( ) => #abiCallData ( "testFailRemoveFile" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . method-testReadWriteFile ( ) => #abiCallData ( "testReadWriteFile" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . method-testReadWriteLine ( ) => #abiCallData ( "testReadWriteLine" , .TypedArgs ) )
      
    
    rule  ( S2KFilesTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testFailRemoveFile()" ) => 2780725830 )
      
    
    rule  ( selector ( "testReadWriteFile()" ) => 3880869465 )
      
    
    rule  ( selector ( "testReadWriteLine()" ) => 3039298541 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module ForkTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KForkTestContract
    
    syntax S2KForkTestContract ::= "S2KForkTest" [symbol(), klabel(contract_ForkTest)]
    
      
    
    syntax Field ::= ForkTestField
    
    syntax ForkTestField ::= "IS_TEST" [symbol(), klabel(field_ForkTest_IS_TEST)]
    
    syntax ForkTestField ::= "_failed" [symbol(), klabel(field_ForkTest__failed)]
    
    syntax ForkTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ForkTest_IS_SCRIPT)]
    
    syntax ForkTestField ::= "stdstore" [symbol(), klabel(field_ForkTest_stdstore)]
    
    rule  ( #loc ( S2S2KkTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KForkTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KForkTestContract "." S2KForkTestMethod [function(), symbol(), klabel(method_ForkTest)]
    
    syntax S2KForkTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_ForkTest_method-IS_SCRIPT_)]
    
    syntax S2KForkTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_ForkTest_method-IS_TEST_)]
    
    syntax S2KForkTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_ForkTest_method-failed_)]
    
    syntax S2S2KkTestMethod ::= "method-testActiveFork" "(" ")" [symbol(), klabel(method_ForkTest_method-testActiveFork_)]
    
    syntax S2KForkTestMethod ::= "method-testAllRPCUrl" "(" ")" [symbol(), klabel(method_ForkTest_method-testAllRPCUrl_)]
    
    syntax S2KForkTestMethod ::= "method-testCreateFork" "(" ")" [symbol(), klabel(method_ForkTest_method-testCreateFork_)]
    
    syntax S2KForkTestMethod ::= "method-testCreateForkBlock" "(" ")" [symbol(), klabel(method_ForkTest_method-testCreateForkBlock_)]
    
    syntax S2KForkTestMethod ::= "method-testCreateSelectFork" "(" ")" [symbol(), klabel(method_ForkTest_method-testCreateSelectFork_)]
    
    syntax S2KForkTestMethod ::= "method-testCreateSelectForkBlock" "(" ")" [symbol(), klabel(method_ForkTest_method-testCreateSelectForkBlock_)]
    
    syntax S2KForkTestMethod ::= "method-testRPCUrl" "(" ")" [symbol(), klabel(method_ForkTest_method-testRPCUrl_)]
    
    syntax S2KForkTestMethod ::= "method-testRPCUrlRevert" "(" ")" [symbol(), klabel(method_ForkTest_method-testRPCUrlRevert_)]
    
    syntax S2KForkTestMethod ::= "method-testRollFork" "(" ")" [symbol(), klabel(method_ForkTest_method-testRollFork_)]
    
    syntax S2S2KkTestMethod ::= "method-testRollForkId" "(" ")" [symbol(), klabel(method_ForkTest_method-testRollForkId_)]
    
    syntax S2KForkTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_ForkTest_method-vm_)]
    
    rule  ( S2KForkTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-testActiveFork ( ) => #abiCallData ( "testActiveFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-testAllRPCUrl ( ) => #abiCallData ( "testAllRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-testCreateFork ( ) => #abiCallData ( "testCreateFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-testCreateForkBlock ( ) => #abiCallData ( "testCreateForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2S2KkTest . method-testCreateSelectFork ( ) => #abiCallData ( "testCreateSelectFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-testCreateSelectForkBlock ( ) => #abiCallData ( "testCreateSelectForkBlock" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-testRPCUrl ( ) => #abiCallData ( "testRPCUrl" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-testRPCUrlRevert ( ) => #abiCallData ( "testRPCUrlRevert" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-testRollFork ( ) => #abiCallData ( "testRollFork" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-testRollForkId ( ) => #abiCallData ( "testRollForkId" , .TypedArgs ) )
      
    
    rule  ( S2KForkTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testActiveFork()" ) => 2981024546 )
      
    
    rule  ( selector ( "testAllRPCUrl()" ) => 707490019 )
      
    
    rule  ( selector ( "testCreateFork()" ) => 9848133 )
      
    
    rule  ( selector ( "testCreateForkBlock()" ) => 2820856803 )
      
    
    rule  ( selector ( "testCreateSelectFork()" ) => 2307095206 )
      
    
    rule  ( selector ( "testCreateSelectForkBlock()" ) => 269695700 )
      
    
    rule  ( selector ( "testRPCUrl()" ) => 3938449696 )
      
    
    rule  ( selector ( "testRPCUrlRevert()" ) => 470834373 )
      
    
    rule  ( selector ( "testRollFork()" ) => 3222356361 )
      
    
    rule  ( selector ( "testRollForkId()" ) => 3215996813 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module GasTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KGasTestContract
    
    syntax S2KGasTestContract ::= "S2S2KTest" [symbol(), klabel(contract_GasTest)]
    
      
    
    syntax Field ::= GasTestField
    
    syntax GasTestField ::= "IS_TEST" [symbol(), klabel(field_GasTest_IS_TEST)]
    
    syntax GasTestField ::= "_failed" [symbol(), klabel(field_GasTest__failed)]
    
    syntax GasTestField ::= "IS_SCRIPT" [symbol(), klabel(field_GasTest_IS_SCRIPT)]
    
    syntax GasTestField ::= "stdstore" [symbol(), klabel(field_GasTest_stdstore)]
    
    rule  ( #loc ( S2KGasTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KGasTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KGasTestContract "." S2KGasTestMethod [function(), symbol(), klabel(method_GasTest)]
    
    syntax S2KGasTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_GasTest_method-IS_SCRIPT_)]
    
    syntax S2KGasTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_GasTest_method-IS_TEST_)]
    
    syntax S2S2KTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_GasTest_method-failed_)]
    
    syntax S2KGasTestMethod ::= "method-kevm" "(" ")" [symbol(), klabel(method_GasTest_method-kevm_)]
    
    syntax S2KGasTestMethod ::= "method-testInfiniteGas" "(" ")" [symbol(), klabel(method_GasTest_method-testInfiniteGas_)]
    
    syntax S2KGasTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_GasTest_method-vm_)]
    
    rule  ( S2KGasTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . method-kevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KGasTest . method-testInfiniteGas ( ) => #abiCallData ( "testInfiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2S2KTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testInfiniteGas()" ) => 1677640502 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module GetCodeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KGetCodeTestContract
    
    syntax S2KGetCodeTestContract ::= "S2KGetCodeTest" [symbol(), klabel(contract_GetCodeTest)]
    
      
    
    syntax Field ::= GetCodeTestField
    
    syntax GetCodeTestField ::= "IS_TEST" [symbol(), klabel(field_GetCodeTest_IS_TEST)]
    
    syntax GetCodeTestField ::= "_failed" [symbol(), klabel(field_GetCodeTest__failed)]
    
    syntax GetCodeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_GetCodeTest_IS_SCRIPT)]
    
    syntax GetCodeTestField ::= "stdstore" [symbol(), klabel(field_GetCodeTest_stdstore)]
    
    syntax GetCodeTestField ::= "myToken" [symbol(), klabel(field_GetCodeTest_myToken)]
    
    rule  ( #loc ( S2KGetCodeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KGetCodeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KGetCodeTest . myToken ) => 8 )
      
    
    syntax Bytes ::= S2S2KCodeTestContract "." S2KGetCodeTestMethod [function(), symbol(), klabel(method_GetCodeTest)]
    
    syntax S2KGetCodeTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_GetCodeTest_method-IS_SCRIPT_)]
    
    syntax S2KGetCodeTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_GetCodeTest_method-IS_TEST_)]
    
    syntax S2KGetCodeTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_GetCodeTest_method-failed_)]
    
    syntax S2KGetCodeTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_GetCodeTest_method-setUp_)]
    
    syntax S2KGetCodeTestMethod ::= "method-testGetCode" "(" ")" [symbol(), klabel(method_GetCodeTest_method-testGetCode_)]
    
    syntax S2KGetCodeTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_GetCodeTest_method-vm_)]
    
    rule  ( S2KGetCodeTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . method-testGetCode ( ) => #abiCallData ( "testGetCode" , .TypedArgs ) )
      
    
    rule  ( S2KGetCodeTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testGetCode()" ) => 3906163359 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module S2KCheats-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KKEVMCheatsContract
    
    syntax S2KKEVMCheatsContract ::= "S2KKEVMCheats" [symbol(), klabel(contract_KEVMCheats)]
    
      
    
    syntax Bytes ::= S2KKEVMCheatsContract "." S2KKEVMCheatsMethod [function(), symbol(), klabel(method_KEVMCheats)]
    
    syntax S2KKEVMCheatsMethod ::= "method-kevm" "(" ")" [symbol(), klabel(method_KEVMCheats_method-kevm_)]
    
    rule  ( S2KKEVMCheats . method-kevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      

endmodule

module KEVMCheatsBase-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KKEVMCheatsBaseContract
    
    syntax S2KKEVMCheatsBaseContract ::= "S2KKEVMCheatsBase" [symbol(), klabel(contract_KEVMCheatsBase)]
    
      
    
    syntax Bytes ::= S2KKEVMCheatsBaseContract "." S2KKEVMCheatsBaseMethod [function(), symbol(), klabel(method_KEVMCheatsBase)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-allowCallsToAddress" "(" Int ":" "address" ")" [symbol(), klabel(method_KEVMCheatsBase_method-allowCallsToAddress_address)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-allowChangesToStorage" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_KEVMCheatsBase_method-allowChangesToStorage_address_uint256)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-expectCreate" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_method-expectCreate_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-expectCreate2" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_method-expectCreate2_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-expectDelegateCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_method-expectDelegateCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-expectNoCall" "(" ")" [symbol(), klabel(method_KEVMCheatsBase_method-expectNoCall_)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-expectRegularCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_method-expectRegularCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-expectRegularCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_method-expectRegularCall_address_uint256_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-expectStaticCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_KEVMCheatsBase_method-expectStaticCall_address_bytes)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-infiniteGas" "(" ")" [symbol(), klabel(method_KEVMCheatsBase_method-infiniteGas_)]
    
    syntax S2KKEVMCheatsBaseMethod ::= "method-symbolicStorage" "(" Int ":" "address" ")" [symbol(), klabel(method_KEVMCheatsBase_method-symbolicStorage_address)]
    
    rule  ( S2KKEVMCheatsBase . method-allowCallsToAddress ( V0_ : address ) => #abiCallData ( "allowCallsToAddress" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KKEVMCheatsBase . method-allowChangesToStorage ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "allowChangesToStorage" , #address ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . method-expectCreate ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . method-expectCreate2 ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCreate2" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . method-expectDelegateCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectDelegateCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . method-expectNoCall ( ) => #abiCallData ( "expectNoCall" , .TypedArgs ) )
      
    
    rule  ( S2KKEVMCheatsBase . method-expectRegularCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . method-expectRegularCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectRegularCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KKEVMCheatsBase . method-expectStaticCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectStaticCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KKEVMCheatsBase . method-infiniteGas ( ) => #abiCallData ( "infiniteGas" , .TypedArgs ) )
      
    
    rule  ( S2KKEVMCheatsBase . method-symbolicStorage ( V0_ : address ) => #abiCallData ( "symbolicStorage" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( selector ( "allowCallsToAddress(address)" ) => 1850795572 )
      
    
    rule  ( selector ( "allowChangesToStorage(address,uint256)" ) => 4207417100 )
      
    
    rule  ( selector ( "expectCreate(address,uint256,bytes)" ) => 658968394 )
      
    
    rule  ( selector ( "expectCreate2(address,uint256,bytes)" ) => 3854582462 )
      
    
    rule  ( selector ( "expectDelegateCall(address,bytes)" ) => 1030406631 )
      
    
    rule  ( selector ( "expectNoCall()" ) => 3861374088 )
      
    
    rule  ( selector ( "expectRegularCall(address,bytes)" ) => 3178868520 )
      
    
    rule  ( selector ( "expectRegularCall(address,uint256,bytes)" ) => 1973496647 )
      
    
    rule  ( selector ( "expectStaticCall(address,bytes)" ) => 2232945516 )
      
    
    rule  ( selector ( "infiniteGas()" ) => 3986649939 )
      
    
    rule  ( selector ( "symbolicStorage(address)" ) => 769677742 )
      

endmodule

module LabelTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KLabelTestContract
    
    syntax S2KLabelTestContract ::= "S2KLabelTest" [symbol(), klabel(contract_LabelTest)]
    
      
    
    syntax Field ::= LabelTestField
    
    syntax LabelTestField ::= "IS_TEST" [symbol(), klabel(field_LabelTest_IS_TEST)]
    
    syntax LabelTestField ::= "_failed" [symbol(), klabel(field_LabelTest__failed)]
    
    syntax LabelTestField ::= "IS_SCRIPT" [symbol(), klabel(field_LabelTest_IS_SCRIPT)]
    
    syntax LabelTestField ::= "stdstore" [symbol(), klabel(field_LabelTest_stdstore)]
    
    rule  ( #loc ( S2KLabelTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KLabelTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KLabelTestContract "." S2KLabelTestMethod [function(), symbol(), klabel(method_LabelTest)]
    
    syntax S2S2KelTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_LabelTest_method-IS_SCRIPT_)]
    
    syntax S2KLabelTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_LabelTest_method-IS_TEST_)]
    
    syntax S2KLabelTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_LabelTest_method-failed_)]
    
    syntax S2KLabelTestMethod ::= "method-testLabel" "(" ")" [symbol(), klabel(method_LabelTest_method-testLabel_)]
    
    syntax S2KLabelTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_LabelTest_method-vm_)]
    
    rule  ( S2KLabelTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KLabelTest . method-testLabel ( ) => #abiCallData ( "testLabel" , .TypedArgs ) )
      
    
    rule  ( S2S2KelTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testLabel()" ) => 799101117 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module LoopsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KLoopsTestContract
    
    syntax S2KLoopsTestContract ::= "S2KLoopsTest" [symbol(), klabel(contract_LoopsTest)]
    
      
    
    syntax Field ::= LoopsTestField
    
    syntax LoopsTestField ::= "IS_TEST" [symbol(), klabel(field_LoopsTest_IS_TEST)]
    
    syntax LoopsTestField ::= "_failed" [symbol(), klabel(field_LoopsTest__failed)]
    
    syntax LoopsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_LoopsTest_IS_SCRIPT)]
    
    syntax LoopsTestField ::= "stdstore" [symbol(), klabel(field_LoopsTest_stdstore)]
    
    rule  ( #loc ( S2KLoopsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KLoopsTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KLoopsTestContract "." S2S2KpsTestMethod [function(), symbol(), klabel(method_LoopsTest)]
    
    syntax S2KLoopsTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_LoopsTest_method-IS_SCRIPT_)]
    
    syntax S2KLoopsTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_LoopsTest_method-IS_TEST_)]
    
    syntax S2KLoopsTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_LoopsTest_method-failed_)]
    
    syntax S2KLoopsTestMethod ::= "method-sum_N" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_method-sum_N_uint256)]
    
    syntax S2KLoopsTestMethod ::= "method-testIsNotPrime" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_method-testIsNotPrime_uint256)]
    
    syntax S2KLoopsTestMethod ::= "method-testIsPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_method-testIsPrime_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "method-testIsPrimeBroken" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_method-testIsPrimeBroken_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "method-testIsPrimeOpt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_method-testIsPrimeOpt_uint256)]
    
    syntax S2S2KpsTestMethod ::= "method-testMax" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_method-testMax_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "method-testMaxBroken" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_method-testMaxBroken_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "method-testNthPrime" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_method-testNthPrime_uint256_uint256)]
    
    syntax S2KLoopsTestMethod ::= "method-testSort" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_method-testSort_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "method-testSortBroken" "(" K ":" "uint256[]" ")" [symbol(), klabel(method_LoopsTest_method-testSortBroken_uint256[])]
    
    syntax S2KLoopsTestMethod ::= "method-testSqrt" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_method-testSqrt_uint256)]
    
    syntax S2KLoopsTestMethod ::= "method-testSumToN" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_method-testSumToN_uint256)]
    
    syntax S2KLoopsTestMethod ::= "method-testSumToNBroken" "(" Int ":" "uint256" ")" [symbol(), klabel(method_LoopsTest_method-testSumToNBroken_uint256)]
    
    syntax S2KLoopsTestMethod ::= "method-test_sum_10" "(" ")" [symbol(), klabel(method_LoopsTest_method-test_sum_10_)]
    
    syntax S2S2KpsTestMethod ::= "method-test_sum_100" "(" ")" [symbol(), klabel(method_LoopsTest_method-test_sum_100_)]
    
    syntax S2KLoopsTestMethod ::= "method-test_sum_1000" "(" ")" [symbol(), klabel(method_LoopsTest_method-test_sum_1000_)]
    
    syntax S2KLoopsTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_LoopsTest_method-vm_)]
    
    rule  ( S2KLoopsTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . method-sum_N ( V0_n : uint256 ) => #abiCallData ( "sum_N" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . method-testIsNotPrime ( V0_n : uint256 ) => #abiCallData ( "testIsNotPrime" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . method-testIsPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2S2KpsTest . method-testIsPrimeBroken ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testIsPrimeBroken" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . method-testIsPrimeOpt ( V0_n : uint256 ) => #abiCallData ( "testIsPrimeOpt" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . method-testNthPrime ( V0_n : uint256 , V1_i : uint256 ) => #abiCallData ( "testNthPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( S2KLoopsTest . method-testSqrt ( V0_x : uint256 ) => #abiCallData ( "testSqrt" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KLoopsTest . method-testSumToN ( V0_n : uint256 ) => #abiCallData ( "testSumToN" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . method-testSumToNBroken ( V0_n : uint256 ) => #abiCallData ( "testSumToNBroken" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( S2KLoopsTest . method-test_sum_10 ( ) => #abiCallData ( "test_sum_10" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . method-test_sum_100 ( ) => #abiCallData ( "test_sum_100" , .TypedArgs ) )
      
    
    rule  ( S2KLoopsTest . method-test_sum_1000 ( ) => #abiCallData ( "test_sum_1000" , .TypedArgs ) )
      
    
    rule  ( S2S2KpsTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "sum_N(uint256)" ) => 2123244496 )
      
    
    rule  ( selector ( "testIsNotPrime(uint256)" ) => 809987623 )
      
    
    rule  ( selector ( "testIsPrime(uint256,uint256)" ) => 111940912 )
      
    
    rule  ( selector ( "testIsPrimeBroken(uint256,uint256)" ) => 1834826207 )
      
    
    rule  ( selector ( "testIsPrimeOpt(uint256)" ) => 404719852 )
      
    
    rule  ( selector ( "testMax(uint256[])" ) => 1575104263 )
      
    
    rule  ( selector ( "testMaxBroken(uint256[])" ) => 1372438930 )
      
    
    rule  ( selector ( "testNthPrime(uint256,uint256)" ) => 2702762242 )
      
    
    rule  ( selector ( "testSort(uint256[])" ) => 2414037741 )
      
    
    rule  ( selector ( "testSortBroken(uint256[])" ) => 3541275661 )
      
    
    rule  ( selector ( "testSqrt(uint256)" ) => 233106198 )
      
    
    rule  ( selector ( "testSumToN(uint256)" ) => 2289979355 )
      
    
    rule  ( selector ( "testSumToNBroken(uint256)" ) => 1318374999 )
      
    
    rule  ( selector ( "test_sum_10()" ) => 1087009050 )
      
    
    rule  ( selector ( "test_sum_100()" ) => 1519953344 )
      
    
    rule  ( selector ( "test_sum_1000()" ) => 222767225 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module MethodDisambiguateTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMethodDisambiguateTestContract
    
    syntax S2KMethodDisambiguateTestContract ::= "S2KMethodDisambiguateTest" [symbol(), klabel(contract_MethodDisambiguateTest)]
    
      
    
    syntax Field ::= MethodDisambiguateTestField
    
    syntax MethodDisambiguateTestField ::= "IS_TEST" [symbol(), klabel(field_MethodDisambiguateTest_IS_TEST)]
    
    syntax MethodDisambiguateTestField ::= "_failed" [symbol(), klabel(field_MethodDisambiguateTest__failed)]
    
    syntax MethodDisambiguateTestField ::= "IS_SCRIPT" [symbol(), klabel(field_MethodDisambiguateTest_IS_SCRIPT)]
    
    syntax MethodDisambiguateTestField ::= "stdstore" [symbol(), klabel(field_MethodDisambiguateTest_stdstore)]
    
    rule  ( #loc ( S2KMethodDisambiguateTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KMethodDisambiguateTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KMethodDisambiguateTestContract "." S2S2KhodDisambiguateTestMethod [function(), symbol(), klabel(method_MethodDisambiguateTest)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_method-IS_SCRIPT_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_method-IS_TEST_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_method-failed_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "method-getNumber" "(" Int ":" "uint256" ")" [symbol(), klabel(method_MethodDisambiguateTest_method-getNumber_uint256)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "method-getNumber" "(" Int ":" "uint32" ")" [symbol(), klabel(method_MethodDisambiguateTest_method-getNumber_uint32)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "method-test_method_call" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_method-test_method_call_)]
    
    syntax S2KMethodDisambiguateTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_MethodDisambiguateTest_method-vm_)]
    
    rule  ( S2KMethodDisambiguateTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2S2KhodDisambiguateTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . method-getNumber ( V0_x : uint256 ) => #abiCallData ( "getNumber" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KMethodDisambiguateTest . method-getNumber ( V0_x : uint32 ) => #abiCallData ( "getNumber" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KMethodDisambiguateTest . method-test_method_call ( ) => #abiCallData ( "test_method_call" , .TypedArgs ) )
      
    
    rule  ( S2KMethodDisambiguateTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "getNumber(uint256)" ) => 4233508440 )
      
    
    rule  ( selector ( "getNumber(uint32)" ) => 144150998 )
      
    
    rule  ( selector ( "test_method_call()" ) => 1803637680 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module MockCallTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMockCallTestContract
    
    syntax S2KMockCallTestContract ::= "S2KMockCallTest" [symbol(), klabel(contract_MockCallTest)]
    
      
    
    syntax Field ::= MockCallTestField
    
    syntax MockCallTestField ::= "IS_TEST" [symbol(), klabel(field_MockCallTest_IS_TEST)]
    
    syntax MockCallTestField ::= "_failed" [symbol(), klabel(field_MockCallTest__failed)]
    
    syntax MockCallTestField ::= "IS_SCRIPT" [symbol(), klabel(field_MockCallTest_IS_SCRIPT)]
    
    syntax MockCallTestField ::= "stdstore" [symbol(), klabel(field_MockCallTest_stdstore)]
    
    rule  ( #loc ( S2S2KkCallTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KMockCallTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KMockCallTestContract "." S2KMockCallTestMethod [function(), symbol(), klabel(method_MockCallTest)]
    
    syntax S2KMockCallTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_MockCallTest_method-IS_SCRIPT_)]
    
    syntax S2KMockCallTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_MockCallTest_method-IS_TEST_)]
    
    syntax S2KMockCallTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_MockCallTest_method-failed_)]
    
    syntax S2S2KkCallTestMethod ::= "method-testMockCall" "(" ")" [symbol(), klabel(method_MockCallTest_method-testMockCall_)]
    
    syntax S2KMockCallTestMethod ::= "method-testMockCallValue" "(" ")" [symbol(), klabel(method_MockCallTest_method-testMockCallValue_)]
    
    syntax S2KMockCallTestMethod ::= "method-testMockCalls" "(" ")" [symbol(), klabel(method_MockCallTest_method-testMockCalls_)]
    
    syntax S2KMockCallTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_MockCallTest_method-vm_)]
    
    rule  ( S2KMockCallTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . method-testMockCall ( ) => #abiCallData ( "testMockCall" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . method-testMockCallValue ( ) => #abiCallData ( "testMockCallValue" , .TypedArgs ) )
      
    
    rule  ( S2S2KkCallTest . method-testMockCalls ( ) => #abiCallData ( "testMockCalls" , .TypedArgs ) )
      
    
    rule  ( S2KMockCallTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testMockCall()" ) => 3143830108 )
      
    
    rule  ( selector ( "testMockCallValue()" ) => 1208641942 )
      
    
    rule  ( selector ( "testMockCalls()" ) => 957910350 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module MyIERC20-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMyIERC20Contract
    
    syntax S2KMyIERC20Contract ::= "S2KMyIERC20" [symbol(), klabel(contract_MyIERC20)]
    
      
    
    syntax Bytes ::= S2KMyIERC20Contract "." S2KMyIERC20Method [function(), symbol(), klabel(method_MyIERC20)]
    
    syntax S2KMyIERC20Method ::= "method-approve" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_method-approve_address_uint256)]
    
    syntax S2KMyIERC20Method ::= "method-balanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MyIERC20_method-balanceOf_address)]
    
    syntax S2S2KERC20Method ::= "method-decimals" "(" ")" [symbol(), klabel(method_MyIERC20_method-decimals_)]
    
    syntax S2KMyIERC20Method ::= "method-symbol" "(" ")" [symbol(), klabel(method_MyIERC20_method-symbol_)]
    
    syntax S2KMyIERC20Method ::= "method-totalSupply" "(" ")" [symbol(), klabel(method_MyIERC20_method-totalSupply_)]
    
    syntax S2KMyIERC20Method ::= "method-transfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_method-transfer_address_uint256)]
    
    syntax S2KMyIERC20Method ::= "method-transferFrom" "(" Int ":" "address" "," Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_MyIERC20_method-transferFrom_address_address_uint256)]
    
    rule  ( S2KMyIERC20 . method-approve ( V0_spender : address , V1_value : uint256 ) => #abiCallData ( "approve" , #address ( V0_spender ) , #uint256 ( V1_value ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_spender )
       andBool ( #rangeUInt ( 256 , V1_value )
               ))
      
    
    rule  ( S2KMyIERC20 . method-balanceOf ( V0_ : address ) => #abiCallData ( "balanceOf" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KMyIERC20 . method-decimals ( ) => #abiCallData ( "decimals" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . method-symbol ( ) => #abiCallData ( "symbol" , .TypedArgs ) )
      
    
    rule  ( S2S2KERC20 . method-totalSupply ( ) => #abiCallData ( "totalSupply" , .TypedArgs ) )
      
    
    rule  ( S2KMyIERC20 . method-transfer ( V0_recipient : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_recipient ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_recipient )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( S2KMyIERC20 . method-transferFrom ( V0_sender : address , V1_recipient : address , V2_amount : uint256 ) => #abiCallData ( "transferFrom" , #address ( V0_sender ) , #address ( V1_recipient ) , #uint256 ( V2_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_sender )
       andBool ( #rangeAddress ( V1_recipient )
       andBool ( #rangeUInt ( 256 , V2_amount )
               )))
      
    
    rule  ( selector ( "approve(address,uint256)" ) => 157198259 )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "decimals()" ) => 826074471 )
      
    
    rule  ( selector ( "symbol()" ) => 2514000705 )
      
    
    rule  ( selector ( "totalSupply()" ) => 404098525 )
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      
    
    rule  ( selector ( "transferFrom(address,address,uint256)" ) => 599290589 )
      

endmodule

module MyToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KMyTokenContract
    
    syntax S2KMyTokenContract ::= "S2KMyToken" [symbol(), klabel(contract_MyToken)]
    
      
    
    syntax Field ::= MyTokenField
    
    syntax MyTokenField ::= "token" [symbol(), klabel(field_MyToken_token)]
    
    syntax MyTokenField ::= "balances" [symbol(), klabel(field_MyToken_balances)]
    
    rule  ( #loc ( S2KMyToken . token ) => 0 )
      
    
    rule  ( #loc ( S2KMyToken . balances ) => 1 )
      
    
    syntax Bytes ::= S2KMyTokenContract "." S2S2KokenMethod [function(), symbol(), klabel(method_MyToken)]
    
    syntax S2KMyTokenMethod ::= "method-balanceOf" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_method-balanceOf_address)]
    
    syntax S2KMyTokenMethod ::= "method-balances" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_method-balances_address)]
    
    syntax S2KMyTokenMethod ::= "method-pay" "(" Int ":" "address" ")" [symbol(), klabel(method_MyToken_method-pay_address)]
    
    syntax S2KMyTokenMethod ::= "method-token" "(" ")" [symbol(), klabel(method_MyToken_method-token_)]
    
    rule  ( S2KMyToken . method-balanceOf ( V0_user : address ) => #abiCallData ( "balanceOf" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KMyToken . method-balances ( V0_ : address ) => #abiCallData ( "balances" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KMyToken . method-pay ( V0_user : address ) => #abiCallData ( "pay" , #address ( V0_user ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_user )
      
    
    rule  ( S2KMyToken . method-token ( ) => #abiCallData ( "token" , .TypedArgs ) )
      
    
    rule  ( selector ( "balanceOf(address)" ) => 1889567281 )
      
    
    rule  ( selector ( "balances(address)" ) => 669136355 )
      
    
    rule  ( selector ( "pay(address)" ) => 202497757 )
      
    
    rule  ( selector ( "token()" ) => 4228666474 )
      

endmodule

module NoImport-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2S2KmportContract
    
    syntax S2KNoImportContract ::= "S2KNoImport" [symbol(), klabel(contract_NoImport)]
    
      
    
    syntax Bytes ::= S2KNoImportContract "." S2KNoImportMethod [function(), symbol(), klabel(method_NoImport)]
    
    syntax S2KNoImportMethod ::= "method-test_source_map" "(" ")" [symbol(), klabel(method_NoImport_method-test_source_map_)]
    
    rule  ( S2KNoImport . method-test_source_map ( ) => #abiCallData ( "test_source_map" , .TypedArgs ) )
      
    
    rule  ( selector ( "test_source_map()" ) => 3563497491 )
      

endmodule

module OwnerUpOnly-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KOwnerUpOnlyContract
    
    syntax S2KOwnerUpOnlyContract ::= "S2S2KerUpOnly" [symbol(), klabel(contract_OwnerUpOnly)]
    
      
    
    syntax Field ::= OwnerUpOnlyField
    
    syntax OwnerUpOnlyField ::= "count" [symbol(), klabel(field_OwnerUpOnly_count)]
    
    rule  ( #loc ( S2KOwnerUpOnly . count ) => 0 )
      
    
    syntax Bytes ::= S2KOwnerUpOnlyContract "." S2KOwnerUpOnlyMethod [function(), symbol(), klabel(method_OwnerUpOnly)]
    
    syntax S2KOwnerUpOnlyMethod ::= "method-count" "(" ")" [symbol(), klabel(method_OwnerUpOnly_method-count_)]
    
    syntax S2KOwnerUpOnlyMethod ::= "method-increment" "(" ")" [symbol(), klabel(method_OwnerUpOnly_method-increment_)]
    
    syntax S2KOwnerUpOnlyMethod ::= "method-owner" "(" ")" [symbol(), klabel(method_OwnerUpOnly_method-owner_)]
    
    rule  ( S2KOwnerUpOnly . method-count ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnly . method-increment ( ) => #abiCallData ( "increment" , .TypedArgs ) )
      
    
    rule  ( S2S2KerUpOnly . method-owner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "increment()" ) => 3500007562 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      

endmodule

module OwnerUpOnlyTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KOwnerUpOnlyTestContract
    
    syntax S2KOwnerUpOnlyTestContract ::= "S2KOwnerUpOnlyTest" [symbol(), klabel(contract_OwnerUpOnlyTest)]
    
      
    
    syntax Field ::= OwnerUpOnlyTestField
    
    syntax OwnerUpOnlyTestField ::= "IS_TEST" [symbol(), klabel(field_OwnerUpOnlyTest_IS_TEST)]
    
    syntax OwnerUpOnlyTestField ::= "_failed" [symbol(), klabel(field_OwnerUpOnlyTest__failed)]
    
    syntax OwnerUpOnlyTestField ::= "IS_SCRIPT" [symbol(), klabel(field_OwnerUpOnlyTest_IS_SCRIPT)]
    
    syntax OwnerUpOnlyTestField ::= "stdstore" [symbol(), klabel(field_OwnerUpOnlyTest_stdstore)]
    
    syntax OwnerUpOnlyTestField ::= "upOnly" [symbol(), klabel(field_OwnerUpOnlyTest_upOnly)]
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KOwnerUpOnlyTest . upOnly ) => 8 )
      
    
    syntax Bytes ::= S2S2KerUpOnlyTestContract "." S2KOwnerUpOnlyTestMethod [function(), symbol(), klabel(method_OwnerUpOnlyTest)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_method-IS_SCRIPT_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_method-IS_TEST_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_method-failed_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_method-setUp_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "method-testFailIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_method-testFailIncrementAsNotOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "method-testIncrementAsNotOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_method-testIncrementAsNotOwner_)]
    
    syntax S2KOwnerUpOnlyTestMethod ::= "method-testIncrementAsOwner" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_method-testIncrementAsOwner_)]
    
    syntax S2S2KerUpOnlyTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_OwnerUpOnlyTest_method-vm_)]
    
    rule  ( S2KOwnerUpOnlyTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . method-testFailIncrementAsNotOwner ( ) => #abiCallData ( "testFailIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . method-testIncrementAsNotOwner ( ) => #abiCallData ( "testIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . method-testIncrementAsOwner ( ) => #abiCallData ( "testIncrementAsOwner" , .TypedArgs ) )
      
    
    rule  ( S2KOwnerUpOnlyTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFailIncrementAsNotOwner()" ) => 4249919617 )
      
    
    rule  ( selector ( "testIncrementAsNotOwner()" ) => 1302326069 )
      
    
    rule  ( selector ( "testIncrementAsOwner()" ) => 1980498343 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AdditionalToken-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2S2KitionalTokenContract
    
    syntax S2KAdditionalTokenContract ::= "S2KAdditionalToken" [symbol(), klabel(contract_AdditionalToken)]
    
      
    
    syntax Field ::= AdditionalTokenField
    
    syntax AdditionalTokenField ::= "count" [symbol(), klabel(field_AdditionalToken_count)]
    
    rule  ( #loc ( S2KAdditionalToken . count ) => 0 )
      
    
    syntax Bytes ::= S2KAdditionalTokenContract "." S2KAdditionalTokenMethod [function(), symbol(), klabel(method_AdditionalToken)]
    
    syntax S2KAdditionalTokenMethod ::= "method-count" "(" ")" [symbol(), klabel(method_AdditionalToken_method-count_)]
    
    syntax S2KAdditionalTokenMethod ::= "method-incrementCount" "(" ")" [symbol(), klabel(method_AdditionalToken_method-incrementCount_)]
    
    syntax S2KAdditionalTokenMethod ::= "method-owner" "(" ")" [symbol(), klabel(method_AdditionalToken_method-owner_)]
    
    rule  ( S2S2KitionalToken . method-count ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KAdditionalToken . method-incrementCount ( ) => #abiCallData ( "incrementCount" , .TypedArgs ) )
      
    
    rule  ( S2KAdditionalToken . method-owner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "incrementCount()" ) => 3842448270 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      

endmodule

module PlainPrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPlainPrankTestContract
    
    syntax S2KPlainPrankTestContract ::= "S2KPlainPrankTest" [symbol(), klabel(contract_PlainPrankTest)]
    
      
    
    syntax Field ::= PlainPrankTestField
    
    syntax PlainPrankTestField ::= "IS_TEST" [symbol(), klabel(field_PlainPrankTest_IS_TEST)]
    
    syntax PlainPrankTestField ::= "_failed" [symbol(), klabel(field_PlainPrankTest__failed)]
    
    syntax PlainPrankTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PlainPrankTest_IS_SCRIPT)]
    
    syntax PlainPrankTestField ::= "stdstore" [symbol(), klabel(field_PlainPrankTest_stdstore)]
    
    rule  ( #loc ( S2KPlainPrankTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KPlainPrankTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2S2KinPrankTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KPlainPrankTestContract "." S2KPlainPrankTestMethod [function(), symbol(), klabel(method_PlainPrankTest)]
    
    syntax S2KPlainPrankTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-IS_SCRIPT_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-IS_TEST_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-failed_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-internalCounter" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-internalCounter_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-testFail_startPrank_existingAlready" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-testFail_startPrank_existingAlready_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-testFail_startPrank_internalCall" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-testFail_startPrank_internalCall_)]
    
    syntax S2S2KinPrankTestMethod ::= "method-test_prank_zeroAddress_true" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-test_prank_zeroAddress_true_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-test_startPrankWithOrigin_true" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-test_startPrankWithOrigin_true_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-test_startPrank_true" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-test_startPrank_true_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-test_startPrank_zeroAddress_true" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-test_startPrank_zeroAddress_true_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-test_stopPrank_notExistent" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-test_stopPrank_notExistent_)]
    
    syntax S2KPlainPrankTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_PlainPrankTest_method-vm_)]
    
    rule  ( S2KPlainPrankTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2S2KinPrankTest . method-internalCounter ( ) => #abiCallData ( "internalCounter" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-testFail_startPrank_existingAlready ( ) => #abiCallData ( "testFail_startPrank_existingAlready" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-testFail_startPrank_internalCall ( ) => #abiCallData ( "testFail_startPrank_internalCall" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-test_prank_zeroAddress_true ( ) => #abiCallData ( "test_prank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-test_startPrankWithOrigin_true ( ) => #abiCallData ( "test_startPrankWithOrigin_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-test_startPrank_true ( ) => #abiCallData ( "test_startPrank_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-test_startPrank_zeroAddress_true ( ) => #abiCallData ( "test_startPrank_zeroAddress_true" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-test_stopPrank_notExistent ( ) => #abiCallData ( "test_stopPrank_notExistent" , .TypedArgs ) )
      
    
    rule  ( S2KPlainPrankTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "internalCounter()" ) => 2687914858 )
      
    
    rule  ( selector ( "testFail_startPrank_existingAlready()" ) => 2262269573 )
      
    
    rule  ( selector ( "testFail_startPrank_internalCall()" ) => 3075676477 )
      
    
    rule  ( selector ( "test_prank_zeroAddress_true()" ) => 3793950116 )
      
    
    rule  ( selector ( "test_startPrankWithOrigin_true()" ) => 1559633499 )
      
    
    rule  ( selector ( "test_startPrank_true()" ) => 243527947 )
      
    
    rule  ( selector ( "test_startPrank_zeroAddress_true()" ) => 858618957 )
      
    
    rule  ( selector ( "test_stopPrank_notExistent()" ) => 279002555 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Prank-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2S2KnkContract
    
    syntax S2KPrankContract ::= "S2KPrank" [symbol(), klabel(contract_Prank)]
    
      
    
    syntax Field ::= PrankField
    
    syntax PrankField ::= "count" [symbol(), klabel(field_Prank_count)]
    
    rule  ( #loc ( S2KPrank . count ) => 0 )
      
    
    syntax Bytes ::= S2KPrankContract "." S2KPrankMethod [function(), symbol(), klabel(method_Prank)]
    
    syntax S2KPrankMethod ::= "method-add" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Prank_method-add_uint256)]
    
    syntax S2KPrankMethod ::= "method-count" "(" ")" [symbol(), klabel(method_Prank_method-count_)]
    
    syntax S2KPrankMethod ::= "method-owner" "(" ")" [symbol(), klabel(method_Prank_method-owner_)]
    
    syntax S2S2KnkMethod ::= "method-subtract" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Prank_method-subtract_uint256)]
    
    rule  ( S2KPrank . method-add ( V0_value : uint256 ) => #abiCallData ( "add" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( S2KPrank . method-count ( ) => #abiCallData ( "count" , .TypedArgs ) )
      
    
    rule  ( S2KPrank . method-owner ( ) => #abiCallData ( "owner" , .TypedArgs ) )
      
    
    rule  ( S2KPrank . method-subtract ( V0_value : uint256 ) => #abiCallData ( "subtract" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( selector ( "add(uint256)" ) => 268690130 )
      
    
    rule  ( selector ( "count()" ) => 107354813 )
      
    
    rule  ( selector ( "owner()" ) => 2376452955 )
      
    
    rule  ( selector ( "subtract(uint256)" ) => 499146519 )
      

endmodule

module PrankTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPrankTestContract
    
    syntax S2KPrankTestContract ::= "S2KPrankTest" [symbol(), klabel(contract_PrankTest)]
    
      
    
    syntax Field ::= PrankTestField
    
    syntax PrankTestField ::= "IS_TEST" [symbol(), klabel(field_PrankTest_IS_TEST)]
    
    syntax PrankTestField ::= "_failed" [symbol(), klabel(field_PrankTest__failed)]
    
    syntax PrankTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PrankTest_IS_SCRIPT)]
    
    syntax PrankTestField ::= "stdstore" [symbol(), klabel(field_PrankTest_stdstore)]
    
    syntax PrankTestField ::= "prankContract" [symbol(), klabel(field_PrankTest_prankContract)]
    
    rule  ( #loc ( S2KPrankTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2S2KnkTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KPrankTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KPrankTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KPrankTest . prankContract ) => 8 )
      
    
    syntax Bytes ::= S2KPrankTestContract "." S2KPrankTestMethod [function(), symbol(), klabel(method_PrankTest)]
    
    syntax S2KPrankTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_PrankTest_method-IS_SCRIPT_)]
    
    syntax S2KPrankTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_PrankTest_method-IS_TEST_)]
    
    syntax S2KPrankTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_PrankTest_method-failed_)]
    
    syntax S2S2KnkTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_PrankTest_method-setUp_)]
    
    syntax S2KPrankTestMethod ::= "method-testAddAsOwner" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_method-testAddAsOwner_uint256)]
    
    syntax S2KPrankTestMethod ::= "method-testAddStartPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_method-testAddStartPrank_uint256)]
    
    syntax S2KPrankTestMethod ::= "method-testFailAddPrank" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_method-testFailAddPrank_uint256)]
    
    syntax S2KPrankTestMethod ::= "method-testSubtractAsTxOrigin" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_method-testSubtractAsTxOrigin_uint256_uint256)]
    
    syntax S2KPrankTestMethod ::= "method-testSubtractFail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_method-testSubtractFail_uint256)]
    
    syntax S2KPrankTestMethod ::= "method-testSubtractStartPrank" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_PrankTest_method-testSubtractStartPrank_uint256_uint256)]
    
    syntax S2KPrankTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_PrankTest_method-vm_)]
    
    rule  ( S2KPrankTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2S2KnkTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KPrankTest . method-testAddAsOwner ( V0_x : uint256 ) => #abiCallData ( "testAddAsOwner" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . method-testAddStartPrank ( V0_x : uint256 ) => #abiCallData ( "testAddStartPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . method-testFailAddPrank ( V0_x : uint256 ) => #abiCallData ( "testFailAddPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . method-testSubtractAsTxOrigin ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractAsTxOrigin" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( S2KPrankTest . method-testSubtractFail ( V0_x : uint256 ) => #abiCallData ( "testSubtractFail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KPrankTest . method-testSubtractStartPrank ( V0_addValue : uint256 , V1_subValue : uint256 ) => #abiCallData ( "testSubtractStartPrank" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( S2S2KnkTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testAddAsOwner(uint256)" ) => 1600382513 )
      
    
    rule  ( selector ( "testAddStartPrank(uint256)" ) => 1333759955 )
      
    
    rule  ( selector ( "testFailAddPrank(uint256)" ) => 948023622 )
      
    
    rule  ( selector ( "testSubtractAsTxOrigin(uint256,uint256)" ) => 3798952319 )
      
    
    rule  ( selector ( "testSubtractFail(uint256)" ) => 1433390937 )
      
    
    rule  ( selector ( "testSubtractStartPrank(uint256,uint256)" ) => 262874110 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module PreconditionsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KPreconditionsTestContract
    
    syntax S2KPreconditionsTestContract ::= "S2KPreconditionsTest" [symbol(), klabel(contract_PreconditionsTest)]
    
      
    
    syntax Field ::= PreconditionsTestField
    
    syntax PreconditionsTestField ::= "IS_TEST" [symbol(), klabel(field_PreconditionsTest_IS_TEST)]
    
    syntax PreconditionsTestField ::= "_failed" [symbol(), klabel(field_PreconditionsTest__failed)]
    
    syntax PreconditionsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PreconditionsTest_IS_SCRIPT)]
    
    syntax PreconditionsTestField ::= "stdstore" [symbol(), klabel(field_PreconditionsTest_stdstore)]
    
    syntax PreconditionsTestField ::= "n" [symbol(), klabel(field_PreconditionsTest_n)]
    
    rule  ( #loc ( S2KPreconditionsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KPreconditionsTest . n ) => 8 )
      
    
    syntax Bytes ::= S2S2KconditionsTestContract "." S2KPreconditionsTestMethod [function(), symbol(), klabel(method_PreconditionsTest)]
    
    syntax S2KPreconditionsTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_PreconditionsTest_method-IS_SCRIPT_)]
    
    syntax S2KPreconditionsTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_PreconditionsTest_method-IS_TEST_)]
    
    syntax S2KPreconditionsTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_PreconditionsTest_method-failed_)]
    
    syntax S2KPreconditionsTestMethod ::= "method-kevm" "(" ")" [symbol(), klabel(method_PreconditionsTest_method-kevm_)]
    
    syntax S2KPreconditionsTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_PreconditionsTest_method-setUp_)]
    
    syntax S2KPreconditionsTestMethod ::= "method-testAssume" "(" ")" [symbol(), klabel(method_PreconditionsTest_method-testAssume_)]
    
    syntax S2KPreconditionsTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_PreconditionsTest_method-vm_)]
    
    rule  ( S2S2KconditionsTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . method-kevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . method-testAssume ( ) => #abiCallData ( "testAssume" , .TypedArgs ) )
      
    
    rule  ( S2KPreconditionsTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testAssume()" ) => 3928496829 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module RecordLogsTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KRecordLogsTestContract
    
    syntax S2KRecordLogsTestContract ::= "S2S2KordLogsTest" [symbol(), klabel(contract_RecordLogsTest)]
    
      
    
    syntax Field ::= RecordLogsTestField
    
    syntax RecordLogsTestField ::= "IS_TEST" [symbol(), klabel(field_RecordLogsTest_IS_TEST)]
    
    syntax RecordLogsTestField ::= "_failed" [symbol(), klabel(field_RecordLogsTest__failed)]
    
    syntax RecordLogsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_RecordLogsTest_IS_SCRIPT)]
    
    syntax RecordLogsTestField ::= "stdstore" [symbol(), klabel(field_RecordLogsTest_stdstore)]
    
    syntax RecordLogsTestField ::= "emitter" [symbol(), klabel(field_RecordLogsTest_emitter)]
    
    rule  ( #loc ( S2KRecordLogsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KRecordLogsTest . emitter ) => 8 )
      
    
    syntax Bytes ::= S2KRecordLogsTestContract "." S2KRecordLogsTestMethod [function(), symbol(), klabel(method_RecordLogsTest)]
    
    syntax S2KRecordLogsTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_RecordLogsTest_method-IS_SCRIPT_)]
    
    syntax S2S2KordLogsTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_RecordLogsTest_method-IS_TEST_)]
    
    syntax S2KRecordLogsTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_RecordLogsTest_method-failed_)]
    
    syntax S2KRecordLogsTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_RecordLogsTest_method-setUp_)]
    
    syntax S2KRecordLogsTestMethod ::= "method-testRecordLogs" "(" ")" [symbol(), klabel(method_RecordLogsTest_method-testRecordLogs_)]
    
    syntax S2KRecordLogsTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_RecordLogsTest_method-vm_)]
    
    rule  ( S2KRecordLogsTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2S2KordLogsTest . method-testRecordLogs ( ) => #abiCallData ( "testRecordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KRecordLogsTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testRecordLogs()" ) => 3623393624 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Safe-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSafeContract
    
    syntax S2KSafeContract ::= "S2KSafe" [symbol(), klabel(contract_Safe)]
    
      
    
    syntax Bytes ::= S2KSafeContract "." S2KSafeMethod [function(), symbol(), klabel(method_Safe)]
    
    syntax S2KSafeMethod ::= "method-withdraw" "(" ")" [symbol(), klabel(method_Safe_method-withdraw_)]
    
    rule  ( S2KSafe . method-withdraw ( ) => #abiCallData ( "withdraw" , .TypedArgs ) )
      
    
    rule  ( selector ( "withdraw()" ) => 1020253707 )
      

endmodule

module SafeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2S2KeTestContract
    
    syntax S2KSafeTestContract ::= "S2KSafeTest" [symbol(), klabel(contract_SafeTest)]
    
      
    
    syntax Field ::= SafeTestField
    
    syntax SafeTestField ::= "IS_TEST" [symbol(), klabel(field_SafeTest_IS_TEST)]
    
    syntax SafeTestField ::= "_failed" [symbol(), klabel(field_SafeTest__failed)]
    
    syntax SafeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SafeTest_IS_SCRIPT)]
    
    syntax SafeTestField ::= "stdstore" [symbol(), klabel(field_SafeTest_stdstore)]
    
    syntax SafeTestField ::= "safe" [symbol(), klabel(field_SafeTest_safe)]
    
    rule  ( #loc ( S2KSafeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSafeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSafeTest . safe ) => 8 )
      
    
    syntax Bytes ::= S2KSafeTestContract "." S2S2KeTestMethod [function(), symbol(), klabel(method_SafeTest)]
    
    syntax S2KSafeTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_SafeTest_method-IS_SCRIPT_)]
    
    syntax S2KSafeTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_SafeTest_method-IS_TEST_)]
    
    syntax S2KSafeTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_SafeTest_method-failed_)]
    
    syntax S2KSafeTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_SafeTest_method-setUp_)]
    
    syntax S2KSafeTestMethod ::= "method-testWithdraw" "(" ")" [symbol(), klabel(method_SafeTest_method-testWithdraw_)]
    
    syntax S2KSafeTestMethod ::= "method-testWithdrawFuzz" "(" Int ":" "uint96" ")" [symbol(), klabel(method_SafeTest_method-testWithdrawFuzz_uint96)]
    
    syntax S2KSafeTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_SafeTest_method-vm_)]
    
    rule  ( S2KSafeTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2S2KeTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . method-testWithdraw ( ) => #abiCallData ( "testWithdraw" , .TypedArgs ) )
      
    
    rule  ( S2KSafeTest . method-testWithdrawFuzz ( V0_amount : uint96 ) => #abiCallData ( "testWithdrawFuzz" , #uint96 ( V0_amount ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_amount )
      
    
    rule  ( S2KSafeTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testWithdraw()" ) => 3574182252 )
      
    
    rule  ( selector ( "testWithdrawFuzz(uint96)" ) => 3503970826 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Script-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KScriptContract
    
    syntax S2KScriptContract ::= "S2KScript" [symbol(), klabel(contract_Script)]
    
      
    
    syntax Field ::= ScriptField
    
    syntax ScriptField ::= "IS_SCRIPT" [symbol(), klabel(field_Script_IS_SCRIPT)]
    
    rule  ( #loc ( S2S2Kipt . IS_SCRIPT ) => 0 )
      
    
    syntax Bytes ::= S2KScriptContract "." S2KScriptMethod [function(), symbol(), klabel(method_Script)]
    
    syntax S2KScriptMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_Script_method-IS_SCRIPT_)]
    
    syntax S2KScriptMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_Script_method-vm_)]
    
    rule  ( S2KScript . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KScript . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Setup2Test-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetup2TestContract
    
    syntax S2KSetup2TestContract ::= "S2S2Kup2Test" [symbol(), klabel(contract_Setup2Test)]
    
      
    
    syntax Field ::= Setup2TestField
    
    syntax Setup2TestField ::= "IS_TEST" [symbol(), klabel(field_Setup2Test_IS_TEST)]
    
    syntax Setup2TestField ::= "_failed" [symbol(), klabel(field_Setup2Test__failed)]
    
    syntax Setup2TestField ::= "IS_SCRIPT" [symbol(), klabel(field_Setup2Test_IS_SCRIPT)]
    
    syntax Setup2TestField ::= "stdstore" [symbol(), klabel(field_Setup2Test_stdstore)]
    
    syntax Setup2TestField ::= "a" [symbol(), klabel(field_Setup2Test_a)]
    
    syntax Setup2TestField ::= "b" [symbol(), klabel(field_Setup2Test_b)]
    
    syntax Setup2TestField ::= "c" [symbol(), klabel(field_Setup2Test_c)]
    
    rule  ( #loc ( S2KSetup2Test . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSetup2Test . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSetup2Test . a ) => 8 )
      
    
    rule  ( #loc ( S2KSetup2Test . b ) => 9 )
      
    
    rule  ( #loc ( S2KSetup2Test . c ) => 10 )
      
    
    syntax Bytes ::= S2KSetup2TestContract "." S2S2Kup2TestMethod [function(), symbol(), klabel(method_Setup2Test)]
    
    syntax S2KSetup2TestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_Setup2Test_method-IS_SCRIPT_)]
    
    syntax S2KSetup2TestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_Setup2Test_method-IS_TEST_)]
    
    syntax S2KSetup2TestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_Setup2Test_method-failed_)]
    
    syntax S2KSetup2TestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_Setup2Test_method-setUp_)]
    
    syntax S2KSetup2TestMethod ::= "method-testFail_setup" "(" ")" [symbol(), klabel(method_Setup2Test_method-testFail_setup_)]
    
    syntax S2KSetup2TestMethod ::= "method-test_setup" "(" ")" [symbol(), klabel(method_Setup2Test_method-test_setup_)]
    
    syntax S2KSetup2TestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_Setup2Test_method-vm_)]
    
    rule  ( S2KSetup2Test . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2S2Kup2Test . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . method-testFail_setup ( ) => #abiCallData ( "testFail_setup" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . method-test_setup ( ) => #abiCallData ( "test_setup" , .TypedArgs ) )
      
    
    rule  ( S2KSetup2Test . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFail_setup()" ) => 3501410022 )
      
    
    rule  ( selector ( "test_setup()" ) => 2001288179 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SetUpDeployTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetUpDeployTestContract
    
    syntax S2KSetUpDeployTestContract ::= "S2KSetUpDeployTest" [symbol(), klabel(contract_SetUpDeployTest)]
    
      
    
    syntax Field ::= SetUpDeployTestField
    
    syntax SetUpDeployTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpDeployTest_IS_TEST)]
    
    syntax SetUpDeployTestField ::= "_failed" [symbol(), klabel(field_SetUpDeployTest__failed)]
    
    syntax SetUpDeployTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SetUpDeployTest_IS_SCRIPT)]
    
    syntax SetUpDeployTestField ::= "stdstore" [symbol(), klabel(field_SetUpDeployTest_stdstore)]
    
    syntax SetUpDeployTestField ::= "token" [symbol(), klabel(field_SetUpDeployTest_token)]
    
    rule  ( #loc ( S2S2KUpDeployTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSetUpDeployTest . token ) => 8 )
      
    
    syntax Bytes ::= S2KSetUpDeployTestContract "." S2KSetUpDeployTestMethod [function(), symbol(), klabel(method_SetUpDeployTest)]
    
    syntax S2KSetUpDeployTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_SetUpDeployTest_method-IS_SCRIPT_)]
    
    syntax S2KSetUpDeployTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_SetUpDeployTest_method-IS_TEST_)]
    
    syntax S2S2KUpDeployTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_SetUpDeployTest_method-failed_)]
    
    syntax S2KSetUpDeployTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_SetUpDeployTest_method-setUp_)]
    
    syntax S2KSetUpDeployTestMethod ::= "method-test_extcodesize" "(" ")" [symbol(), klabel(method_SetUpDeployTest_method-test_extcodesize_)]
    
    syntax S2KSetUpDeployTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_SetUpDeployTest_method-vm_)]
    
    rule  ( S2KSetUpDeployTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpDeployTest . method-test_extcodesize ( ) => #abiCallData ( "test_extcodesize" , .TypedArgs ) )
      
    
    rule  ( S2S2KUpDeployTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "test_extcodesize()" ) => 1657400005 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SetUpTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSetUpTestContract
    
    syntax S2KSetUpTestContract ::= "S2KSetUpTest" [symbol(), klabel(contract_SetUpTest)]
    
      
    
    syntax Field ::= SetUpTestField
    
    syntax SetUpTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpTest_IS_TEST)]
    
    syntax SetUpTestField ::= "_failed" [symbol(), klabel(field_SetUpTest__failed)]
    
    syntax SetUpTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SetUpTest_IS_SCRIPT)]
    
    syntax SetUpTestField ::= "stdstore" [symbol(), klabel(field_SetUpTest_stdstore)]
    
    syntax SetUpTestField ::= "counter" [symbol(), klabel(field_SetUpTest_counter)]
    
    rule  ( #loc ( S2KSetUpTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSetUpTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSetUpTest . counter ) => 8 )
      
    
    syntax Bytes ::= S2S2KUpTestContract "." S2KSetUpTestMethod [function(), symbol(), klabel(method_SetUpTest)]
    
    syntax S2KSetUpTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_SetUpTest_method-IS_SCRIPT_)]
    
    syntax S2KSetUpTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_SetUpTest_method-IS_TEST_)]
    
    syntax S2KSetUpTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_SetUpTest_method-failed_)]
    
    syntax S2KSetUpTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_SetUpTest_method-setUp_)]
    
    syntax S2KSetUpTestMethod ::= "method-testSetUpCalled" "(" ")" [symbol(), klabel(method_SetUpTest_method-testSetUpCalled_)]
    
    syntax S2KSetUpTestMethod ::= "method-testSetUpCalledSymbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SetUpTest_method-testSetUpCalledSymbolic_uint256)]
    
    syntax S2KSetUpTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_SetUpTest_method-vm_)]
    
    rule  ( S2S2KUpTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . method-testSetUpCalled ( ) => #abiCallData ( "testSetUpCalled" , .TypedArgs ) )
      
    
    rule  ( S2KSetUpTest . method-testSetUpCalledSymbolic ( V0_x : uint256 ) => #abiCallData ( "testSetUpCalledSymbolic" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KSetUpTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testSetUpCalled()" ) => 3967804529 )
      
    
    rule  ( selector ( "testSetUpCalledSymbolic(uint256)" ) => 3332480466 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SignTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSignTestContract
    
    syntax S2KSignTestContract ::= "S2S2KnTest" [symbol(), klabel(contract_SignTest)]
    
      
    
    syntax Field ::= SignTestField
    
    syntax SignTestField ::= "IS_TEST" [symbol(), klabel(field_SignTest_IS_TEST)]
    
    syntax SignTestField ::= "_failed" [symbol(), klabel(field_SignTest__failed)]
    
    syntax SignTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SignTest_IS_SCRIPT)]
    
    syntax SignTestField ::= "stdstore" [symbol(), klabel(field_SignTest_stdstore)]
    
    rule  ( #loc ( S2KSignTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSignTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KSignTestContract "." S2KSignTestMethod [function(), symbol(), klabel(method_SignTest)]
    
    syntax S2KSignTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_SignTest_method-IS_SCRIPT_)]
    
    syntax S2KSignTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_SignTest_method-IS_TEST_)]
    
    syntax S2S2KnTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_SignTest_method-failed_)]
    
    syntax S2KSignTestMethod ::= "method-testSign" "(" ")" [symbol(), klabel(method_SignTest_method-testSign_)]
    
    syntax S2KSignTestMethod ::= "method-testSign_symbolic" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SignTest_method-testSign_symbolic_uint256)]
    
    syntax S2KSignTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_SignTest_method-vm_)]
    
    rule  ( S2KSignTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . method-testSign ( ) => #abiCallData ( "testSign" , .TypedArgs ) )
      
    
    rule  ( S2KSignTest . method-testSign_symbolic ( V0_pk : uint256 ) => #abiCallData ( "testSign_symbolic" , #uint256 ( V0_pk ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_pk )
      
    
    rule  ( S2S2KnTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testSign()" ) => 3985576159 )
      
    
    rule  ( selector ( "testSign_symbolic(uint256)" ) => 2942025997 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module AssertTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KAssertTestContract
    
    syntax S2KAssertTestContract ::= "S2KAssertTest" [symbol(), klabel(contract_AssertTest)]
    
      
    
    syntax Field ::= AssertTestField
    
    syntax AssertTestField ::= "IS_TEST" [symbol(), klabel(field_AssertTest_IS_TEST)]
    
    syntax AssertTestField ::= "_failed" [symbol(), klabel(field_AssertTest__failed)]
    
    syntax AssertTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AssertTest_IS_SCRIPT)]
    
    syntax AssertTestField ::= "stdstore" [symbol(), klabel(field_AssertTest_stdstore)]
    
    syntax AssertTestField ::= "y" [symbol(), klabel(field_AssertTest_y)]
    
    rule  ( #loc ( S2KAssertTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KAssertTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KAssertTest . y ) => 8 )
      
    
    syntax Bytes ::= S2S2KertTestContract "." S2KAssertTestMethod [function(), symbol(), klabel(method_AssertTest)]
    
    syntax S2KAssertTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_AssertTest_method-IS_SCRIPT_)]
    
    syntax S2KAssertTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_AssertTest_method-IS_TEST_)]
    
    syntax S2KAssertTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_AssertTest_method-failed_)]
    
    syntax S2KAssertTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_AssertTest_method-setUp_)]
    
    syntax S2KAssertTestMethod ::= "method-testFail_assert_false" "(" ")" [symbol(), klabel(method_AssertTest_method-testFail_assert_false_)]
    
    syntax S2KAssertTestMethod ::= "method-testFail_assert_true" "(" ")" [symbol(), klabel(method_AssertTest_method-testFail_assert_true_)]
    
    syntax S2KAssertTestMethod ::= "method-testFail_expect_revert" "(" ")" [symbol(), klabel(method_AssertTest_method-testFail_expect_revert_)]
    
    syntax S2S2KertTestMethod ::= "method-test_assert_false" "(" ")" [symbol(), klabel(method_AssertTest_method-test_assert_false_)]
    
    syntax S2KAssertTestMethod ::= "method-test_assert_true" "(" ")" [symbol(), klabel(method_AssertTest_method-test_assert_true_)]
    
    syntax S2KAssertTestMethod ::= "method-test_assert_true_branch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_method-test_assert_true_branch_uint256)]
    
    syntax S2KAssertTestMethod ::= "method-test_failing_branch" "(" Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_method-test_failing_branch_uint256)]
    
    syntax S2KAssertTestMethod ::= "method-test_revert_branch" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_AssertTest_method-test_revert_branch_uint256_uint256)]
    
    syntax S2KAssertTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_AssertTest_method-vm_)]
    
    rule  ( S2KAssertTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2S2KertTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . method-testFail_assert_false ( ) => #abiCallData ( "testFail_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . method-testFail_assert_true ( ) => #abiCallData ( "testFail_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . method-testFail_expect_revert ( ) => #abiCallData ( "testFail_expect_revert" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . method-test_assert_false ( ) => #abiCallData ( "test_assert_false" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . method-test_assert_true ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )
      
    
    rule  ( S2KAssertTest . method-test_assert_true_branch ( V0_x : uint256 ) => #abiCallData ( "test_assert_true_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . method-test_failing_branch ( V0_x : uint256 ) => #abiCallData ( "test_failing_branch" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KAssertTest . method-test_revert_branch ( V0_x : uint256 , V1_y : uint256 ) => #abiCallData ( "test_revert_branch" , #uint256 ( V0_x ) , #uint256 ( V1_y ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_x )
       andBool ( #rangeUInt ( 256 , V1_y )
               ))
      
    
    rule  ( S2S2KertTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testFail_assert_false()" ) => 2057948334 )
      
    
    rule  ( selector ( "testFail_assert_true()" ) => 409427266 )
      
    
    rule  ( selector ( "testFail_expect_revert()" ) => 709747105 )
      
    
    rule  ( selector ( "test_assert_false()" ) => 1574882301 )
      
    
    rule  ( selector ( "test_assert_true()" ) => 906863826 )
      
    
    rule  ( selector ( "test_assert_true_branch(uint256)" ) => 3267411143 )
      
    
    rule  ( selector ( "test_failing_branch(uint256)" ) => 1176678741 )
      
    
    rule  ( selector ( "test_revert_branch(uint256,uint256)" ) => 2349784459 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SnapshotTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSnapshotTestContract
    
    syntax S2KSnapshotTestContract ::= "S2KSnapshotTest" [symbol(), klabel(contract_SnapshotTest)]
    
      
    
    syntax Field ::= SnapshotTestField
    
    syntax SnapshotTestField ::= "IS_TEST" [symbol(), klabel(field_SnapshotTest_IS_TEST)]
    
    syntax SnapshotTestField ::= "_failed" [symbol(), klabel(field_SnapshotTest__failed)]
    
    syntax SnapshotTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SnapshotTest_IS_SCRIPT)]
    
    syntax SnapshotTestField ::= "stdstore" [symbol(), klabel(field_SnapshotTest_stdstore)]
    
    syntax SnapshotTestField ::= "store" [symbol(), klabel(field_SnapshotTest_store)]
    
    rule  ( #loc ( S2KSnapshotTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSnapshotTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( S2KSnapshotTest . store ) => 8 )
      
    
    syntax Bytes ::= S2S2KpshotTestContract "." S2KSnapshotTestMethod [function(), symbol(), klabel(method_SnapshotTest)]
    
    syntax S2KSnapshotTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_SnapshotTest_method-IS_SCRIPT_)]
    
    syntax S2KSnapshotTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_SnapshotTest_method-IS_TEST_)]
    
    syntax S2KSnapshotTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_SnapshotTest_method-failed_)]
    
    syntax S2KSnapshotTestMethod ::= "method-setUp" "(" ")" [symbol(), klabel(method_SnapshotTest_method-setUp_)]
    
    syntax S2KSnapshotTestMethod ::= "method-testSnapshot" "(" ")" [symbol(), klabel(method_SnapshotTest_method-testSnapshot_)]
    
    syntax S2KSnapshotTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_SnapshotTest_method-vm_)]
    
    rule  ( S2KSnapshotTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2S2KpshotTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . method-setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . method-testSnapshot ( ) => #abiCallData ( "testSnapshot" , .TypedArgs ) )
      
    
    rule  ( S2KSnapshotTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp()" ) => 177362148 )
      
    
    rule  ( selector ( "testSnapshot()" ) => 3204135818 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Store-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KStoreContract
    
    syntax S2KStoreContract ::= "S2KStore" [symbol(), klabel(contract_Store)]
    
      
    
    syntax Field ::= StoreField
    
    syntax StoreField ::= "testNumber" [symbol(), klabel(field_Store_testNumber)]
    
    rule  ( #loc ( S2KStore . testNumber ) => 0 )
      

endmodule

module StoreTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2S2KreTestContract
    
    syntax S2KStoreTestContract ::= "S2KStoreTest" [symbol(), klabel(contract_StoreTest)]
    
      
    
    syntax Field ::= StoreTestField
    
    syntax StoreTestField ::= "IS_TEST" [symbol(), klabel(field_StoreTest_IS_TEST)]
    
    syntax StoreTestField ::= "_failed" [symbol(), klabel(field_StoreTest__failed)]
    
    syntax StoreTestField ::= "IS_SCRIPT" [symbol(), klabel(field_StoreTest_IS_SCRIPT)]
    
    syntax StoreTestField ::= "stdstore" [symbol(), klabel(field_StoreTest_stdstore)]
    
    rule  ( #loc ( S2KStoreTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KStoreTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KStoreTestContract "." S2KStoreTestMethod [function(), symbol(), klabel(method_StoreTest)]
    
    syntax S2S2KreTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_StoreTest_method-IS_SCRIPT_)]
    
    syntax S2KStoreTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_StoreTest_method-IS_TEST_)]
    
    syntax S2KStoreTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_StoreTest_method-failed_)]
    
    syntax S2KStoreTestMethod ::= "method-testAccesses" "(" ")" [symbol(), klabel(method_StoreTest_method-testAccesses_)]
    
    syntax S2KStoreTestMethod ::= "method-testGasLoadColdVM" "(" ")" [symbol(), klabel(method_StoreTest_method-testGasLoadColdVM_)]
    
    syntax S2KStoreTestMethod ::= "method-testGasLoadWarmUp" "(" ")" [symbol(), klabel(method_StoreTest_method-testGasLoadWarmUp_)]
    
    syntax S2KStoreTestMethod ::= "method-testGasLoadWarmVM" "(" ")" [symbol(), klabel(method_StoreTest_method-testGasLoadWarmVM_)]
    
    syntax S2KStoreTestMethod ::= "method-testGasStoreColdVM" "(" ")" [symbol(), klabel(method_StoreTest_method-testGasStoreColdVM_)]
    
    syntax S2KStoreTestMethod ::= "method-testGasStoreWarmUp" "(" ")" [symbol(), klabel(method_StoreTest_method-testGasStoreWarmUp_)]
    
    syntax S2S2KreTestMethod ::= "method-testGasStoreWarmVM" "(" ")" [symbol(), klabel(method_StoreTest_method-testGasStoreWarmVM_)]
    
    syntax S2KStoreTestMethod ::= "method-testLoadNonExistent" "(" ")" [symbol(), klabel(method_StoreTest_method-testLoadNonExistent_)]
    
    syntax S2KStoreTestMethod ::= "method-testStoreLoad" "(" ")" [symbol(), klabel(method_StoreTest_method-testStoreLoad_)]
    
    syntax S2KStoreTestMethod ::= "method-testStoreLoadNonExistent" "(" ")" [symbol(), klabel(method_StoreTest_method-testStoreLoadNonExistent_)]
    
    syntax S2KStoreTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_StoreTest_method-vm_)]
    
    rule  ( S2KStoreTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-testAccesses ( ) => #abiCallData ( "testAccesses" , .TypedArgs ) )
      
    
    rule  ( S2S2KreTest . method-testGasLoadColdVM ( ) => #abiCallData ( "testGasLoadColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-testGasLoadWarmUp ( ) => #abiCallData ( "testGasLoadWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-testGasLoadWarmVM ( ) => #abiCallData ( "testGasLoadWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-testGasStoreColdVM ( ) => #abiCallData ( "testGasStoreColdVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-testGasStoreWarmUp ( ) => #abiCallData ( "testGasStoreWarmUp" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-testGasStoreWarmVM ( ) => #abiCallData ( "testGasStoreWarmVM" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-testLoadNonExistent ( ) => #abiCallData ( "testLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-testStoreLoad ( ) => #abiCallData ( "testStoreLoad" , .TypedArgs ) )
      
    
    rule  ( S2KStoreTest . method-testStoreLoadNonExistent ( ) => #abiCallData ( "testStoreLoadNonExistent" , .TypedArgs ) )
      
    
    rule  ( S2S2KreTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testAccesses()" ) => 159648693 )
      
    
    rule  ( selector ( "testGasLoadColdVM()" ) => 3801282741 )
      
    
    rule  ( selector ( "testGasLoadWarmUp()" ) => 604011046 )
      
    
    rule  ( selector ( "testGasLoadWarmVM()" ) => 2607902342 )
      
    
    rule  ( selector ( "testGasStoreColdVM()" ) => 2309593716 )
      
    
    rule  ( selector ( "testGasStoreWarmUp()" ) => 1546465326 )
      
    
    rule  ( selector ( "testGasStoreWarmVM()" ) => 100073271 )
      
    
    rule  ( selector ( "testLoadNonExistent()" ) => 2275977243 )
      
    
    rule  ( selector ( "testStoreLoad()" ) => 1208516723 )
      
    
    rule  ( selector ( "testStoreLoadNonExistent()" ) => 3912017339 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SymbolicStorageTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSymbolicStorageTestContract
    
    syntax S2KSymbolicStorageTestContract ::= "S2KSymbolicStorageTest" [symbol(), klabel(contract_SymbolicStorageTest)]
    
      
    
    syntax Field ::= SymbolicStorageTestField
    
    syntax SymbolicStorageTestField ::= "IS_TEST" [symbol(), klabel(field_SymbolicStorageTest_IS_TEST)]
    
    syntax SymbolicStorageTestField ::= "_failed" [symbol(), klabel(field_SymbolicStorageTest__failed)]
    
    syntax SymbolicStorageTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SymbolicStorageTest_IS_SCRIPT)]
    
    syntax SymbolicStorageTestField ::= "stdstore" [symbol(), klabel(field_SymbolicStorageTest_stdstore)]
    
    rule  ( #loc ( S2KSymbolicStorageTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KSymbolicStorageTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KSymbolicStorageTestContract "." S2S2KbolicStorageTestMethod [function(), symbol(), klabel(method_SymbolicStorageTest)]
    
    syntax S2KSymbolicStorageTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_method-IS_SCRIPT_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_method-IS_TEST_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_method-failed_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "method-kevm" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_method-kevm_)]
    
    syntax S2KSymbolicStorageTestMethod ::= "method-testEmptyInitialStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_method-testEmptyInitialStorage_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "method-testFail_SymbolicStorage" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_method-testFail_SymbolicStorage_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "method-testFail_SymbolicStorage1" "(" Int ":" "uint256" ")" [symbol(), klabel(method_SymbolicStorageTest_method-testFail_SymbolicStorage1_uint256)]
    
    syntax S2KSymbolicStorageTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_SymbolicStorageTest_method-vm_)]
    
    rule  ( S2S2KbolicStorageTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . method-kevm ( ) => #abiCallData ( "kevm" , .TypedArgs ) )
      
    
    rule  ( S2KSymbolicStorageTest . method-testEmptyInitialStorage ( V0_slot : uint256 ) => #abiCallData ( "testEmptyInitialStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . method-testFail_SymbolicStorage ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . method-testFail_SymbolicStorage1 ( V0_slot : uint256 ) => #abiCallData ( "testFail_SymbolicStorage1" , #uint256 ( V0_slot ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_slot )
      
    
    rule  ( S2KSymbolicStorageTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "kevm()" ) => 3601001590 )
      
    
    rule  ( selector ( "testEmptyInitialStorage(uint256)" ) => 2517793094 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage(uint256)" ) => 821477045 )
      
    
    rule  ( selector ( "testFail_SymbolicStorage1(uint256)" ) => 2899744320 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module SymbolicStore-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KSymbolicStoreContract
    
    syntax S2S2KbolicStoreContract ::= "S2KSymbolicStore" [symbol(), klabel(contract_SymbolicStore)]
    
      
    
    syntax Field ::= SymbolicStoreField
    
    syntax SymbolicStoreField ::= "testNumber" [symbol(), klabel(field_SymbolicStore_testNumber)]
    
    rule  ( #loc ( S2KSymbolicStore . testNumber ) => 0 )
      

endmodule

module Test-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTestContract
    
    syntax S2KTestContract ::= "S2KTest" [symbol(), klabel(contract_Test)]
    
      
    
    syntax Field ::= TestField
    
    syntax TestField ::= "IS_TEST" [symbol(), klabel(field_Test_IS_TEST)]
    
    syntax TestField ::= "_failed" [symbol(), klabel(field_Test__failed)]
    
    syntax TestField ::= "IS_SCRIPT" [symbol(), klabel(field_Test_IS_SCRIPT)]
    
    syntax TestField ::= "stdstore" [symbol(), klabel(field_Test_stdstore)]
    
    rule  ( #loc ( S2KTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2S2Kt . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KTestContract "." S2KTestMethod [function(), symbol(), klabel(method_Test)]
    
    syntax S2KTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_Test_method-IS_SCRIPT_)]
    
    syntax S2KTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_Test_method-IS_TEST_)]
    
    syntax S2KTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_Test_method-failed_)]
    
    syntax S2KTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_Test_method-vm_)]
    
    rule  ( S2KTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2S2Kt . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module stdError-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdErrorContract
    
    syntax S2KstdErrorContract ::= "S2KstdError" [symbol(), klabel(contract_stdError)]
    
      
    
    syntax Bytes ::= S2KstdErrorContract "." S2KstdErrorMethod [function(), symbol(), klabel(method_stdError)]
    
    syntax S2KstdErrorMethod ::= "method-arithmeticError" "(" ")" [symbol(), klabel(method_stdError_method-arithmeticError_)]
    
    syntax S2KstdErrorMethod ::= "method-assertionError" "(" ")" [symbol(), klabel(method_stdError_method-assertionError_)]
    
    syntax S2S2KErrorMethod ::= "method-divisionError" "(" ")" [symbol(), klabel(method_stdError_method-divisionError_)]
    
    syntax S2KstdErrorMethod ::= "method-encodeStorageError" "(" ")" [symbol(), klabel(method_stdError_method-encodeStorageError_)]
    
    syntax S2KstdErrorMethod ::= "method-enumConversionError" "(" ")" [symbol(), klabel(method_stdError_method-enumConversionError_)]
    
    syntax S2KstdErrorMethod ::= "method-indexOOBError" "(" ")" [symbol(), klabel(method_stdError_method-indexOOBError_)]
    
    syntax S2KstdErrorMethod ::= "method-lowLevelError" "(" ")" [symbol(), klabel(method_stdError_method-lowLevelError_)]
    
    syntax S2KstdErrorMethod ::= "method-memOverflowError" "(" ")" [symbol(), klabel(method_stdError_method-memOverflowError_)]
    
    syntax S2KstdErrorMethod ::= "method-popError" "(" ")" [symbol(), klabel(method_stdError_method-popError_)]
    
    syntax S2KstdErrorMethod ::= "method-zeroVarError" "(" ")" [symbol(), klabel(method_stdError_method-zeroVarError_)]
    
    rule  ( S2KstdError . method-arithmeticError ( ) => #abiCallData ( "arithmeticError" , .TypedArgs ) )
      
    
    rule  ( S2S2KError . method-assertionError ( ) => #abiCallData ( "assertionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . method-divisionError ( ) => #abiCallData ( "divisionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . method-encodeStorageError ( ) => #abiCallData ( "encodeStorageError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . method-enumConversionError ( ) => #abiCallData ( "enumConversionError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . method-indexOOBError ( ) => #abiCallData ( "indexOOBError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . method-lowLevelError ( ) => #abiCallData ( "lowLevelError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . method-memOverflowError ( ) => #abiCallData ( "memOverflowError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . method-popError ( ) => #abiCallData ( "popError" , .TypedArgs ) )
      
    
    rule  ( S2KstdError . method-zeroVarError ( ) => #abiCallData ( "zeroVarError" , .TypedArgs ) )
      
    
    rule  ( selector ( "arithmeticError()" ) => 2308253967 )
      
    
    rule  ( selector ( "assertionError()" ) => 271788407 )
      
    
    rule  ( selector ( "divisionError()" ) => 4202187332 )
      
    
    rule  ( selector ( "encodeStorageError()" ) => 3512788190 )
      
    
    rule  ( selector ( "enumConversionError()" ) => 501503328 )
      
    
    rule  ( selector ( "indexOOBError()" ) => 99517970 )
      
    
    rule  ( selector ( "lowLevelError()" ) => 2889716422 )
      
    
    rule  ( selector ( "memOverflowError()" ) => 2557239144 )
      
    
    rule  ( selector ( "popError()" ) => 2989344077 )
      
    
    rule  ( selector ( "zeroVarError()" ) => 3061221850 )
      

endmodule

module stdMath-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2S2KMathContract
    
    syntax S2KstdMathContract ::= "S2KstdMath" [symbol(), klabel(contract_stdMath)]
    
      

endmodule

module stdStorage-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KstdStorageContract
    
    syntax S2KstdStorageContract ::= "S2KstdStorage" [symbol(), klabel(contract_stdStorage)]
    
      
    
    syntax Bytes ::= S2KstdStorageContract "." S2KstdStorageMethod [function(), symbol(), klabel(method_stdStorage)]
    
    syntax S2KstdStorageMethod ::= "method-bytesToBytes32" "(" Bytes ":" "bytes" "," Int ":" "uint256" ")" [symbol(), klabel(method_stdStorage_method-bytesToBytes32_bytes_uint256)]
    
    rule  ( S2S2KStorage . method-bytesToBytes32 ( V0_b : bytes , V1_offset : uint256 ) => #abiCallData ( "bytesToBytes32" , #bytes ( V0_b ) , #uint256 ( V1_offset ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 128 , lengthBytes ( V0_b ) )
       andBool ( #rangeUInt ( 256 , V1_offset )
               ))
      
    
    rule  ( selector ( "bytesToBytes32(bytes,uint256)" ) => 1398294841 )
      

endmodule

module TestNumber-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTestNumberContract
    
    syntax S2KTestNumberContract ::= "S2KTestNumber" [symbol(), klabel(contract_TestNumber)]
    
      
    
    syntax Field ::= TestNumberField
    
    syntax TestNumberField ::= "IS_TEST" [symbol(), klabel(field_TestNumber_IS_TEST)]
    
    syntax TestNumberField ::= "_failed" [symbol(), klabel(field_TestNumber__failed)]
    
    syntax TestNumberField ::= "testNumber" [symbol(), klabel(field_TestNumber_testNumber)]
    
    rule  ( #loc ( S2KTestNumber . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KTestNumber . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KTestNumber . testNumber ) => 1 )
      
    
    syntax Bytes ::= S2KTestNumberContract "." S2KTestNumberMethod [function(), symbol(), klabel(method_TestNumber)]
    
    syntax S2S2KtNumberMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_TestNumber_method-IS_TEST_)]
    
    syntax S2KTestNumberMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_TestNumber_method-failed_)]
    
    syntax S2KTestNumberMethod ::= "method-t" "(" Int ":" "uint256" ")" [symbol(), klabel(method_TestNumber_method-t_uint256)]
    
    syntax S2KTestNumberMethod ::= "method-testNumber" "(" ")" [symbol(), klabel(method_TestNumber_method-testNumber_)]
    
    rule  ( S2KTestNumber . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KTestNumber . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KTestNumber . method-t ( V0_a : uint256 ) => #abiCallData ( "t" , #uint256 ( V0_a ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_a )
      
    
    rule  ( S2KTestNumber . method-testNumber ( ) => #abiCallData ( "testNumber" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "t(uint256)" ) => 2950864753 )
      
    
    rule  ( selector ( "testNumber()" ) => 219771635 )
      

endmodule

module ToStringTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KToStringTestContract
    
    syntax S2S2KtringTestContract ::= "S2KToStringTest" [symbol(), klabel(contract_ToStringTest)]
    
      
    
    syntax Field ::= ToStringTestField
    
    syntax ToStringTestField ::= "IS_TEST" [symbol(), klabel(field_ToStringTest_IS_TEST)]
    
    syntax ToStringTestField ::= "_failed" [symbol(), klabel(field_ToStringTest__failed)]
    
    syntax ToStringTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ToStringTest_IS_SCRIPT)]
    
    syntax ToStringTestField ::= "stdstore" [symbol(), klabel(field_ToStringTest_stdstore)]
    
    rule  ( #loc ( S2KToStringTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . _failed ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( S2KToStringTest . stdstore ) => 1 )
      
    
    syntax Bytes ::= S2KToStringTestContract "." S2KToStringTestMethod [function(), symbol(), klabel(method_ToStringTest)]
    
    syntax S2KToStringTestMethod ::= "method-IS_SCRIPT" "(" ")" [symbol(), klabel(method_ToStringTest_method-IS_SCRIPT_)]
    
    syntax S2S2KtringTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_ToStringTest_method-IS_TEST_)]
    
    syntax S2KToStringTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_ToStringTest_method-failed_)]
    
    syntax S2KToStringTestMethod ::= "method-testAddressToString" "(" ")" [symbol(), klabel(method_ToStringTest_method-testAddressToString_)]
    
    syntax S2KToStringTestMethod ::= "method-testBoolToString" "(" ")" [symbol(), klabel(method_ToStringTest_method-testBoolToString_)]
    
    syntax S2KToStringTestMethod ::= "method-testBytes32ToString" "(" ")" [symbol(), klabel(method_ToStringTest_method-testBytes32ToString_)]
    
    syntax S2KToStringTestMethod ::= "method-testBytesToString" "(" ")" [symbol(), klabel(method_ToStringTest_method-testBytesToString_)]
    
    syntax S2KToStringTestMethod ::= "method-testIntToString" "(" ")" [symbol(), klabel(method_ToStringTest_method-testIntToString_)]
    
    syntax S2KToStringTestMethod ::= "method-testUint256ToString" "(" ")" [symbol(), klabel(method_ToStringTest_method-testUint256ToString_)]
    
    syntax S2KToStringTestMethod ::= "method-vm" "(" ")" [symbol(), klabel(method_ToStringTest_method-vm_)]
    
    rule  ( S2S2KtringTest . method-IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . method-testAddressToString ( ) => #abiCallData ( "testAddressToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . method-testBoolToString ( ) => #abiCallData ( "testBoolToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . method-testBytes32ToString ( ) => #abiCallData ( "testBytes32ToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . method-testBytesToString ( ) => #abiCallData ( "testBytesToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . method-testIntToString ( ) => #abiCallData ( "testIntToString" , .TypedArgs ) )
      
    
    rule  ( S2KToStringTest . method-testUint256ToString ( ) => #abiCallData ( "testUint256ToString" , .TypedArgs ) )
      
    
    rule  ( S2S2KtringTest . method-vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT()" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      
    
    rule  ( selector ( "testAddressToString()" ) => 808104093 )
      
    
    rule  ( selector ( "testBoolToString()" ) => 1097632899 )
      
    
    rule  ( selector ( "testBytes32ToString()" ) => 204853932 )
      
    
    rule  ( selector ( "testBytesToString()" ) => 1397983993 )
      
    
    rule  ( selector ( "testIntToString()" ) => 4039840763 )
      
    
    rule  ( selector ( "testUint256ToString()" ) => 98980210 )
      
    
    rule  ( selector ( "vm()" ) => 980845667 )
      

endmodule

module Token-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KTokenContract
    
    syntax S2KTokenContract ::= "S2KToken" [symbol(), klabel(contract_Token)]
    
      
    
    syntax Field ::= TokenField
    
    syntax TokenField ::= "x" [symbol(), klabel(field_Token_x)]
    
    syntax TokenField ::= "balances" [symbol(), klabel(field_Token_balances)]
    
    syntax TokenField ::= "allowances" [symbol(), klabel(field_Token_allowances)]
    
    syntax TokenField ::= "name" [symbol(), klabel(field_Token_name)]
    
    syntax TokenField ::= "y" [symbol(), klabel(field_Token_y)]
    
    syntax TokenField ::= "z" [symbol(), klabel(field_Token_z)]
    
    syntax TokenField ::= "a" [symbol(), klabel(field_Token_a)]
    
    syntax TokenField ::= "foos" [symbol(), klabel(field_Token_foos)]
    
    rule  ( #loc ( S2KToken . x ) => 0 )
      
    
    rule  ( #loc ( S2KToken . balances ) => 1 )
      
    
    rule  ( #loc ( S2KToken . allowances ) => 2 )
      
    
    rule  ( #loc ( S2KToken . name ) => 3 )
      
    
    rule  ( #loc ( S2KToken . y ) => 4 )
      
    
    rule  ( #loc ( S2S2Ken . z ) => 4 )
      
    
    rule  ( #loc ( S2KToken . a ) => 4 )
      
    
    rule  ( #loc ( S2KToken . foos ) => 5 )
      
    
    syntax Bytes ::= S2KTokenContract "." S2KTokenMethod [function(), symbol(), klabel(method_Token)]
    
    syntax S2KTokenMethod ::= "method-transfer" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Token_method-transfer_address_uint256)]
    
    rule  ( S2KToken . method-transfer ( V0_dst : address , V1_amount : uint256 ) => #abiCallData ( "transfer" , #address ( V0_dst ) , #uint256 ( V1_amount ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_dst )
       andBool ( #rangeUInt ( 256 , V1_amount )
               ))
      
    
    rule  ( selector ( "transfer(address,uint256)" ) => 2835717307 )
      

endmodule

module BytesTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KBytesTypeTestContract
    
    syntax S2KBytesTypeTestContract ::= "S2S2KesTypeTest" [symbol(), klabel(contract_BytesTypeTest)]
    
      
    
    syntax Bytes ::= S2KBytesTypeTestContract "." S2KBytesTypeTestMethod [function(), symbol(), klabel(method_BytesTypeTest)]
    
    syntax S2KBytesTypeTestMethod ::= "method-testFail_bytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_method-testFail_bytes32_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "method-testFail_bytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_method-testFail_bytes4_bytes4)]
    
    syntax S2KBytesTypeTestMethod ::= "method-test_bytes32" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_method-test_bytes32_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "method-test_bytes32_fail" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_BytesTypeTest_method-test_bytes32_fail_bytes32)]
    
    syntax S2KBytesTypeTestMethod ::= "method-test_bytes4" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_method-test_bytes4_bytes4)]
    
    syntax S2KBytesTypeTestMethod ::= "method-test_bytes4_fail" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_BytesTypeTest_method-test_bytes4_fail_bytes4)]
    
    rule  ( S2S2KesTypeTest . method-testFail_bytes32 ( V0_x : bytes32 ) => #abiCallData ( "testFail_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . method-testFail_bytes4 ( V0_x : bytes4 ) => #abiCallData ( "testFail_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . method-test_bytes32 ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . method-test_bytes32_fail ( V0_x : bytes32 ) => #abiCallData ( "test_bytes32_fail" , #bytes32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . method-test_bytes4 ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( S2KBytesTypeTest . method-test_bytes4_fail ( V0_x : bytes4 ) => #abiCallData ( "test_bytes4_fail" , #bytes4 ( V0_x ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_x )
      
    
    rule  ( selector ( "testFail_bytes32(bytes32)" ) => 4289330289 )
      
    
    rule  ( selector ( "testFail_bytes4(bytes4)" ) => 3602852570 )
      
    
    rule  ( selector ( "test_bytes32(bytes32)" ) => 3436986189 )
      
    
    rule  ( selector ( "test_bytes32_fail(bytes32)" ) => 392713219 )
      
    
    rule  ( selector ( "test_bytes4(bytes4)" ) => 2814412853 )
      
    
    rule  ( selector ( "test_bytes4_fail(bytes4)" ) => 2510894010 )
      

endmodule

module UintTypeTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KUintTypeTestContract
    
    syntax S2KUintTypeTestContract ::= "S2KUintTypeTest" [symbol(), klabel(contract_UintTypeTest)]
    
      
    
    syntax Bytes ::= S2S2KtTypeTestContract "." S2KUintTypeTestMethod [function(), symbol(), klabel(method_UintTypeTest)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint104_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint112_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint120_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint128_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint136_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint144_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint152_uint152)]
    
    syntax S2S2KtTypeTestMethod ::= "method-testFail_uint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint16_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint160_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint168_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint176_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint184_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint192_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint200_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint208_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint216_uint216)]
    
    syntax S2S2KtTypeTestMethod ::= "method-testFail_uint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint224_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint232_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint24_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint240_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint248_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint256_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint32_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint40_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint48_uint48)]
    
    syntax S2S2KtTypeTestMethod ::= "method-testFail_uint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint56_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint64_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint72_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint8_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint80_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint88_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "method-testFail_uint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_method-testFail_uint96_uint96)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint104" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint104_uint104)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint104_fail" "(" Int ":" "uint104" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint104_fail_uint104)]
    
    syntax S2S2KtTypeTestMethod ::= "method-test_uint112" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint112_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint112_fail" "(" Int ":" "uint112" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint112_fail_uint112)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint120" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint120_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint120_fail" "(" Int ":" "uint120" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint120_fail_uint120)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint128" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint128_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint128_fail" "(" Int ":" "uint128" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint128_fail_uint128)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint136" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint136_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint136_fail" "(" Int ":" "uint136" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint136_fail_uint136)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint144" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint144_uint144)]
    
    syntax S2S2KtTypeTestMethod ::= "method-test_uint144_fail" "(" Int ":" "uint144" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint144_fail_uint144)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint152" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint152_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint152_fail" "(" Int ":" "uint152" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint152_fail_uint152)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint16" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint16_uint16)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint160" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint160_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint160_fail" "(" Int ":" "uint160" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint160_fail_uint160)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint168" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint168_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint168_fail" "(" Int ":" "uint168" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint168_fail_uint168)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint16_fail" "(" Int ":" "uint16" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint16_fail_uint16)]
    
    syntax S2S2KtTypeTestMethod ::= "method-test_uint176" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint176_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint176_fail" "(" Int ":" "uint176" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint176_fail_uint176)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint184" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint184_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint184_fail" "(" Int ":" "uint184" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint184_fail_uint184)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint192" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint192_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint192_fail" "(" Int ":" "uint192" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint192_fail_uint192)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint200" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint200_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint200_fail" "(" Int ":" "uint200" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint200_fail_uint200)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint208" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint208_uint208)]
    
    syntax S2S2KtTypeTestMethod ::= "method-test_uint208_fail" "(" Int ":" "uint208" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint208_fail_uint208)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint216" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint216_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint216_fail" "(" Int ":" "uint216" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint216_fail_uint216)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint224" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint224_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint224_fail" "(" Int ":" "uint224" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint224_fail_uint224)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint232" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint232_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint232_fail" "(" Int ":" "uint232" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint232_fail_uint232)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint24" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint24_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint240" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint240_uint240)]
    
    syntax S2S2KtTypeTestMethod ::= "method-test_uint240_fail" "(" Int ":" "uint240" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint240_fail_uint240)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint248" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint248_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint248_fail" "(" Int ":" "uint248" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint248_fail_uint248)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint24_fail" "(" Int ":" "uint24" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint24_fail_uint24)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint256" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint256_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint256_fail" "(" Int ":" "uint256" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint256_fail_uint256)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint32" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint32_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint32_fail" "(" Int ":" "uint32" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint32_fail_uint32)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint40" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint40_uint40)]
    
    syntax S2S2KtTypeTestMethod ::= "method-test_uint40_fail" "(" Int ":" "uint40" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint40_fail_uint40)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint48" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint48_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint48_fail" "(" Int ":" "uint48" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint48_fail_uint48)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint56" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint56_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint56_fail" "(" Int ":" "uint56" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint56_fail_uint56)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint64" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint64_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint64_fail" "(" Int ":" "uint64" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint64_fail_uint64)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint72" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint72_uint72)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint72_fail" "(" Int ":" "uint72" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint72_fail_uint72)]
    
    syntax S2S2KtTypeTestMethod ::= "method-test_uint8" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint8_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint80" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint80_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint80_fail" "(" Int ":" "uint80" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint80_fail_uint80)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint88" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint88_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint88_fail" "(" Int ":" "uint88" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint88_fail_uint88)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint8_fail" "(" Int ":" "uint8" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint8_fail_uint8)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint96" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint96_uint96)]
    
    syntax S2KUintTypeTestMethod ::= "method-test_uint96_fail" "(" Int ":" "uint96" ")" [symbol(), klabel(method_UintTypeTest_method-test_uint96_fail_uint96)]
    
    rule  ( S2KUintTypeTest . method-testFail_uint104 ( V0_x : uint104 ) => #abiCallData ( "testFail_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-testFail_uint112 ( V0_x : uint112 ) => #abiCallData ( "testFail_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint120 ( V0_x : uint120 ) => #abiCallData ( "testFail_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint128 ( V0_x : uint128 ) => #abiCallData ( "testFail_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint136 ( V0_x : uint136 ) => #abiCallData ( "testFail_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint144 ( V0_x : uint144 ) => #abiCallData ( "testFail_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint152 ( V0_x : uint152 ) => #abiCallData ( "testFail_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint16 ( V0_x : uint16 ) => #abiCallData ( "testFail_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint160 ( V0_x : uint160 ) => #abiCallData ( "testFail_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint168 ( V0_x : uint168 ) => #abiCallData ( "testFail_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint176 ( V0_x : uint176 ) => #abiCallData ( "testFail_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       S2Kres #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint184 ( V0_x : uint184 ) => #abiCallData ( "testFail_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint192 ( V0_x : uint192 ) => #abiCallData ( "testFail_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint200 ( V0_x : uint200 ) => #abiCallData ( "testFail_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint208 ( V0_x : uint208 ) => #abiCallData ( "testFail_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint216 ( V0_x : uint216 ) => #abiCallData ( "testFail_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint224 ( V0_x : uint224 ) => #abiCallData ( "testFail_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint232 ( V0_x : uint232 ) => #abiCallData ( "testFail_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint24 ( V0_x : uint24 ) => #abiCallData ( "testFail_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-testFail_uint240 ( V0_x : uint240 ) => #abiCallData ( "testFail_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint248 ( V0_x : uint248 ) => #abiCallData ( "testFail_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint256 ( V0_x : uint256 ) => #abiCallData ( "testFail_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint32 ( V0_x : uint32 ) => #abiCallData ( "testFail_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint40 ( V0_x : uint40 ) => #abiCallData ( "testFail_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint48 ( V0_x : uint48 ) => #abiCallData ( "testFail_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint56 ( V0_x : uint56 ) => #abiCallData ( "testFail_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint64 ( V0_x : uint64 ) => #abiCallData ( "testFail_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint72 ( V0_x : uint72 ) => #abiCallData ( "testFail_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-testFail_uint8 ( V0_x : uint8 ) => #abiCallData ( "testFail_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint80 ( V0_x : uint80 ) => #abiCallData ( "testFail_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint88 ( V0_x : uint88 ) => #abiCallData ( "testFail_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-testFail_uint96 ( V0_x : uint96 ) => #abiCallData ( "testFail_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint104 ( V0_x : uint104 ) => #abiCallData ( "test_uint104" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint104_fail ( V0_x : uint104 ) => #abiCallData ( "test_uint104_fail" , #uint104 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 104 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint112 ( V0_x : uint112 ) => #abiCallData ( "test_uint112" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint112_fail ( V0_x : uint112 ) => #abiCallData ( "test_uint112_fail" , #uint112 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 112 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint120 ( V0_x : uint120 ) => #abiCallData ( "test_uint120" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-test_uint120_fail ( V0_x : uint120 ) => #abiCallData ( "test_uint120_fail" , #uint120 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 120 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint128 ( V0_x : uint128 ) => #abiCallData ( "test_uint128" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint128_fail ( V0_x : uint128 ) => #abiCallData ( "test_uint128_fail" , #uint128 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint136 ( V0_x : uint136 ) => #abiCallData ( "test_uint136" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint136_fail ( V0_x : uint136 ) => #abiCallData ( "test_uint136_fail" , #uint136 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 136 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint144 ( V0_x : uint144 ) => #abiCallData ( "test_uint144" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint144_fail ( V0_x : uint144 ) => #abiCallData ( "test_uint144_fail" , #uint144 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 144 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint152 ( V0_x : uint152 ) => #abiCallData ( "test_uint152" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint152_fail ( V0_x : uint152 ) => #abiCallData ( "test_uint152_fail" , #uint152 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 152 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-test_uint16 ( V0_x : uint16 ) => #abiCallData ( "test_uint16" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint160 ( V0_x : uint160 ) => #abiCallData ( "test_uint160" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint160_fail ( V0_x : uint160 ) => #abiCallData ( "test_uint160_fail" , #uint160 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 160 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint168 ( V0_x : uint168 ) => #abiCallData ( "test_uint168" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint168_fail ( V0_x : uint168 ) => #abiCallData ( "test_uint168_fail" , #uint168 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 168 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint16_fail ( V0_x : uint16 ) => #abiCallData ( "test_uint16_fail" , #uint16 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 16 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint176 ( V0_x : uint176 ) => #abiCallData ( "test_uint176" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint176_fail ( V0_x : uint176 ) => #abiCallData ( "test_uint176_fail" , #uint176 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 176 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint184 ( V0_x : uint184 ) => #abiCallData ( "test_uint184" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-test_uint184_fail ( V0_x : uint184 ) => #abiCallData ( "test_uint184_fail" , #uint184 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 184 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint192 ( V0_x : uint192 ) => #abiCallData ( "test_uint192" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint192_fail ( V0_x : uint192 ) => #abiCallData ( "test_uint192_fail" , #uint192 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 192 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint200 ( V0_x : uint200 ) => #abiCallData ( "test_uint200" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint200_fail ( V0_x : uint200 ) => #abiCallData ( "test_uint200_fail" , #uint200 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 200 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint208 ( V0_x : uint208 ) => #abiCallData ( "test_uint208" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint208_fail ( V0_x : uint208 ) => #abiCallData ( "test_uint208_fail" , #uint208 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 208 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint216 ( V0_x : uint216 ) => #abiCallData ( "test_uint216" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint216_fail ( V0_x : uint216 ) => #abiCallData ( "test_uint216_fail" , #uint216 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 216 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-test_uint224 ( V0_x : uint224 ) => #abiCallData ( "test_uint224" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint224_fail ( V0_x : uint224 ) => #abiCallData ( "test_uint224_fail" , #uint224 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 224 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint232 ( V0_x : uint232 ) => #abiCallData ( "test_uint232" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint232_fail ( V0_x : uint232 ) => #abiCallData ( "test_uint232_fail" , #uint232 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 232 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint24 ( V0_x : uint24 ) => #abiCallData ( "test_uint24" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint240 ( V0_x : uint240 ) => #abiCallData ( "test_uint240" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint240_fail ( V0_x : uint240 ) => #abiCallData ( "test_uint240_fail" , #uint240 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 240 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint248 ( V0_x : uint248 ) => #abiCallData ( "test_uint248" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint248_fail ( V0_x : uint248 ) => #abiCallData ( "test_uint248_fail" , #uint248 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 248 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-test_uint24_fail ( V0_x : uint24 ) => #abiCallData ( "test_uint24_fail" , #uint24 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 24 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint256 ( V0_x : uint256 ) => #abiCallData ( "test_uint256" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint256_fail ( V0_x : uint256 ) => #abiCallData ( "test_uint256_fail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint32 ( V0_x : uint32 ) => #abiCallData ( "test_uint32" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint32_fail ( V0_x : uint32 ) => #abiCallData ( "test_uint32_fail" , #uint32 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint40 ( V0_x : uint40 ) => #abiCallData ( "test_uint40" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint40_fail ( V0_x : uint40 ) => #abiCallData ( "test_uint40_fail" , #uint40 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 40 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint48 ( V0_x : uint48 ) => #abiCallData ( "test_uint48" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint48_fail ( V0_x : uint48 ) => #abiCallData ( "test_uint48_fail" , #uint48 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 48 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-test_uint56 ( V0_x : uint56 ) => #abiCallData ( "test_uint56" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint56_fail ( V0_x : uint56 ) => #abiCallData ( "test_uint56_fail" , #uint56 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 56 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint64 ( V0_x : uint64 ) => #abiCallData ( "test_uint64" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint64_fail ( V0_x : uint64 ) => #abiCallData ( "test_uint64_fail" , #uint64 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint72 ( V0_x : uint72 ) => #abiCallData ( "test_uint72" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint72_fail ( V0_x : uint72 ) => #abiCallData ( "test_uint72_fail" , #uint72 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 72 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint8 ( V0_x : uint8 ) => #abiCallData ( "test_uint8" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint80 ( V0_x : uint80 ) => #abiCallData ( "test_uint80" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint80_fail ( V0_x : uint80 ) => #abiCallData ( "test_uint80_fail" , #uint80 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 80 , V0_x )
      
    
    rule  ( S2S2KtTypeTest . method-test_uint88 ( V0_x : uint88 ) => #abiCallData ( "test_uint88" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint88_fail ( V0_x : uint88 ) => #abiCallData ( "test_uint88_fail" , #uint88 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 88 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint8_fail ( V0_x : uint8 ) => #abiCallData ( "test_uint8_fail" , #uint8 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 8 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint96 ( V0_x : uint96 ) => #abiCallData ( "test_uint96" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( S2KUintTypeTest . method-test_uint96_fail ( V0_x : uint96 ) => #abiCallData ( "test_uint96_fail" , #uint96 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_x )
      
    
    rule  ( selector ( "testFail_uint104(uint104)" ) => 1709154444 )
      
    
    rule  ( selector ( "testFail_uint112(uint112)" ) => 3541489285 )
      
    
    rule  ( selector ( "testFail_uint120(uint120)" ) => 3839169067 )
      
    
    rule  ( selector ( "testFail_uint128(uint128)" ) => 791678561 )
      
    
    rule  ( selector ( "testFail_uint136(uint136)" ) => 3952257705 )
      
    
    rule  ( selector ( "testFail_uint144(uint144)" ) => 2439595565 )
      
    
    rule  ( selector ( "testFail_uint152(uint152)" ) => 1866291148 )
      
    
    rule  ( selector ( "testFail_uint16(uint16)" ) => 4076431644 )
      
    
    rule  ( selector ( "testFail_uint160(uint160)" ) => 3214193107 )
      
    
    rule  ( selector ( "testFail_uint168(uint168)" ) => 2636444862 )
      
    
    rule  ( selector ( "testFail_uint176(uint176)" ) => 1828125968 )
      
    
    rule  ( selector ( "testFail_uint184(uint184)" ) => 4099305155 )
      
    
    rule  ( selector ( "testFail_uint192(uint192)" ) => 2858210891 )
      
    
    rule  ( selector ( "testFail_uint200(uint200)" ) => 1080270217 )
      
    
    rule  ( selector ( "testFail_uint208(uint208)" ) => 1831022189 )
      
    
    rule  ( selector ( "testFail_uint216(uint216)" ) => 2125101602 )
      
    
    rule  ( selector ( "testFail_uint224(uint224)" ) => 420776541 )
      
    
    rule  ( selector ( "testFail_uint232(uint232)" ) => 3163478438 )
      
    
    rule  ( selector ( "testFail_uint24(uint24)" ) => 639153936 )
      
    
    rule  ( selector ( "testFail_uint240(uint240)" ) => 3089966003 )
      
    
    rule  ( selector ( "testFail_uint248(uint248)" ) => 3070004620 )
      
    
    rule  ( selector ( "testFail_uint256(uint256)" ) => 3436494846 )
      
    
    rule  ( selector ( "testFail_uint32(uint32)" ) => 3218360567 )
      
    
    rule  ( selector ( "testFail_uint40(uint40)" ) => 347856329 )
      
    
    rule  ( selector ( "testFail_uint48(uint48)" ) => 4178735009 )
      
    
    rule  ( selector ( "testFail_uint56(uint56)" ) => 979020984 )
      
    
    rule  ( selector ( "testFail_uint64(uint64)" ) => 819975489 )
      
    
    rule  ( selector ( "testFail_uint72(uint72)" ) => 2059244458 )
      
    
    rule  ( selector ( "testFail_uint8(uint8)" ) => 3679593874 )
      
    
    rule  ( selector ( "testFail_uint80(uint80)" ) => 4180733980 )
      
    
    rule  ( selector ( "testFail_uint88(uint88)" ) => 42555031 )
      
    
    rule  ( selector ( "testFail_uint96(uint96)" ) => 2962957343 )
      
    
    rule  ( selector ( "test_uint104(uint104)" ) => 2030507202 )
      
    
    rule  ( selector ( "test_uint104_fail(uint104)" ) => 3289769429 )
      
    
    rule  ( selector ( "test_uint112(uint112)" ) => 1247465894 )
      
    
    rule  ( selector ( "test_uint112_fail(uint112)" ) => 198559186 )
      
    
    rule  ( selector ( "test_uint120(uint120)" ) => 4013273041 )
      
    
    rule  ( selector ( "test_uint120_fail(uint120)" ) => 4156608892 )
      
    
    rule  ( selector ( "test_uint128(uint128)" ) => 784802761 )
      
    
    rule  ( selector ( "test_uint128_fail(uint128)" ) => 3283002391 )
      
    
    rule  ( selector ( "test_uint136(uint136)" ) => 3590751506 )
      
    
    rule  ( selector ( "test_uint136_fail(uint136)" ) => 1740049059 )
      
    
    rule  ( selector ( "test_uint144(uint144)" ) => 1224379367 )
      
    
    rule  ( selector ( "test_uint144_fail(uint144)" ) => 3911233113 )
      
    
    rule  ( selector ( "test_uint152(uint152)" ) => 3210764837 )
      
    
    rule  ( selector ( "test_uint152_fail(uint152)" ) => 2472528383 )
      
    
    rule  ( selector ( "test_uint16(uint16)" ) => 1262288561 )
      
    
    rule  ( selector ( "test_uint160(uint160)" ) => 2446641645 )
      
    
    rule  ( selector ( "test_uint160_fail(uint160)" ) => 1289572651 )
      
    
    rule  ( selector ( "test_uint168(uint168)" ) => 2789196255 )
      
    
    rule  ( selector ( "test_uint168_fail(uint168)" ) => 413418206 )
      
    
    rule  ( selector ( "test_uint16_fail(uint16)" ) => 2736127289 )
      
    
    rule  ( selector ( "test_uint176(uint176)" ) => 3119759714 )
      
    
    rule  ( selector ( "test_uint176_fail(uint176)" ) => 2926152828 )
      
    
    rule  ( selector ( "test_uint184(uint184)" ) => 2419331356 )
      
    
    rule  ( selector ( "test_uint184_fail(uint184)" ) => 809918532 )
      
    
    rule  ( selector ( "test_uint192(uint192)" ) => 126849335 )
      
    
    rule  ( selector ( "test_uint192_fail(uint192)" ) => 965859284 )
      
    
    rule  ( selector ( "test_uint200(uint200)" ) => 342308100 )
      
    
    rule  ( selector ( "test_uint200_fail(uint200)" ) => 3554205475 )
      
    
    rule  ( selector ( "test_uint208(uint208)" ) => 664969356 )
      
    
    rule  ( selector ( "test_uint208_fail(uint208)" ) => 515244431 )
      
    
    rule  ( selector ( "test_uint216(uint216)" ) => 2735221135 )
      
    
    rule  ( selector ( "test_uint216_fail(uint216)" ) => 1244132421 )
      
    
    rule  ( selector ( "test_uint224(uint224)" ) => 2791725032 )
      
    
    rule  ( selector ( "test_uint224_fail(uint224)" ) => 3535210075 )
      
    
    rule  ( selector ( "test_uint232(uint232)" ) => 2781872781 )
      
    
    rule  ( selector ( "test_uint232_fail(uint232)" ) => 3352181217 )
      
    
    rule  ( selector ( "test_uint24(uint24)" ) => 2865563805 )
      
    
    rule  ( selector ( "test_uint240(uint240)" ) => 3274361055 )
      
    
    rule  ( selector ( "test_uint240_fail(uint240)" ) => 4046179916 )
      
    
    rule  ( selector ( "test_uint248(uint248)" ) => 578604507 )
      
    
    rule  ( selector ( "test_uint248_fail(uint248)" ) => 3580188072 )
      
    
    rule  ( selector ( "test_uint24_fail(uint24)" ) => 2328572638 )
      
    
    rule  ( selector ( "test_uint256(uint256)" ) => 851358597 )
      
    
    rule  ( selector ( "test_uint256_fail(uint256)" ) => 1895666222 )
      
    
    rule  ( selector ( "test_uint32(uint32)" ) => 982223766 )
      
    
    rule  ( selector ( "test_uint32_fail(uint32)" ) => 768917897 )
      
    
    rule  ( selector ( "test_uint40(uint40)" ) => 1298765870 )
      
    
    rule  ( selector ( "test_uint40_fail(uint40)" ) => 1685882915 )
      
    
    rule  ( selector ( "test_uint48(uint48)" ) => 454435065 )
      
    
    rule  ( selector ( "test_uint48_fail(uint48)" ) => 491533732 )
      
    
    rule  ( selector ( "test_uint56(uint56)" ) => 58659965 )
      
    
    rule  ( selector ( "test_uint56_fail(uint56)" ) => 3185974238 )
      
    
    rule  ( selector ( "test_uint64(uint64)" ) => 2511119799 )
      
    
    rule  ( selector ( "test_uint64_fail(uint64)" ) => 2000886247 )
      
    
    rule  ( selector ( "test_uint72(uint72)" ) => 3694811120 )
      
    
    rule  ( selector ( "test_uint72_fail(uint72)" ) => 875540037 )
      
    
    rule  ( selector ( "test_uint8(uint8)" ) => 1704021016 )
      
    
    rule  ( selector ( "test_uint80(uint80)" ) => 3841083967 )
      
    
    rule  ( selector ( "test_uint80_fail(uint80)" ) => 3626141300 )
      
    
    rule  ( selector ( "test_uint88(uint88)" ) => 100068129 )
      
    
    rule  ( selector ( "test_uint88_fail(uint88)" ) => 318744457 )
      
    
    rule  ( selector ( "test_uint8_fail(uint8)" ) => 2865005996 )
      
    
    rule  ( selector ( "test_uint96(uint96)" ) => 1315861753 )
      
    
    rule  ( selector ( "test_uint96_fail(uint96)" ) => 1635628195 )
      

endmodule

module Vm-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KVmContract
    
    syntax S2KVmContract ::= "S2KVm" [symbol(), klabel(contract_Vm)]
    
      
    
    syntax Bytes ::= S2KVmContract "." S2S2Kethod [function(), symbol(), klabel(method_Vm)]
    
    syntax S2KVmMethod ::= "method-accesses" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_method-accesses_address)]
    
    syntax S2KVmMethod ::= "method-activeFork" "(" ")" [symbol(), klabel(method_Vm_method-activeFork_)]
    
    syntax S2KVmMethod ::= "method-addr" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-addr_uint256)]
    
    syntax S2KVmMethod ::= "method-assume" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_method-assume_bool)]
    
    syntax S2KVmMethod ::= "method-broadcast" "(" ")" [symbol(), klabel(method_Vm_method-broadcast_)]
    
    syntax S2KVmMethod ::= "method-broadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_method-broadcast_address)]
    
    syntax S2KVmMethod ::= "method-chainId" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-chainId_uint256)]
    
    syntax S2KVmMethod ::= "method-clearMockedCalls" "(" ")" [symbol(), klabel(method_Vm_method-clearMockedCalls_)]
    
    syntax S2S2Kethod ::= "method-closeFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-closeFile_string)]
    
    syntax S2KVmMethod ::= "method-coinbase" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_method-coinbase_address)]
    
    syntax S2KVmMethod ::= "method-createFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-createFork_string)]
    
    syntax S2KVmMethod ::= "method-createFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-createFork_string_uint256)]
    
    syntax S2KVmMethod ::= "method-createSelectFork" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-createSelectFork_string)]
    
    syntax S2KVmMethod ::= "method-createSelectFork" "(" String ":" "string" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-createSelectFork_string_uint256)]
    
    syntax S2KVmMethod ::= "method-deal" "(" Int ":" "address" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-deal_address_uint256)]
    
    syntax S2KVmMethod ::= "method-deriveKey" "(" String ":" "string" "," String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_method-deriveKey_string_string_uint32)]
    
    syntax S2KVmMethod ::= "method-deriveKey" "(" String ":" "string" "," Int ":" "uint32" ")" [symbol(), klabel(method_Vm_method-deriveKey_string_uint32)]
    
    syntax S2S2Kethod ::= "method-envAddress" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-envAddress_string)]
    
    syntax S2KVmMethod ::= "method-envAddress" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-envAddress_string_string)]
    
    syntax S2KVmMethod ::= "method-envBool" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-envBool_string)]
    
    syntax S2KVmMethod ::= "method-envBool" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-envBool_string_string)]
    
    syntax S2KVmMethod ::= "method-envBytes" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-envBytes_string)]
    
    syntax S2KVmMethod ::= "method-envBytes" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-envBytes_string_string)]
    
    syntax S2KVmMethod ::= "method-envBytes32" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-envBytes32_string)]
    
    syntax S2KVmMethod ::= "method-envBytes32" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-envBytes32_string_string)]
    
    syntax S2KVmMethod ::= "method-envInt" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-envInt_string)]
    
    syntax S2S2Kethod ::= "method-envInt" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-envInt_string_string)]
    
    syntax S2KVmMethod ::= "method-envString" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-envString_string)]
    
    syntax S2KVmMethod ::= "method-envString" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-envString_string_string)]
    
    syntax S2KVmMethod ::= "method-envUint" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-envUint_string)]
    
    syntax S2KVmMethod ::= "method-envUint" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-envUint_string_string)]
    
    syntax S2KVmMethod ::= "method-etch" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_method-etch_address_bytes)]
    
    syntax S2KVmMethod ::= "method-expectCall" "(" Int ":" "address" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_method-expectCall_address_bytes)]
    
    syntax S2KVmMethod ::= "method-expectCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_method-expectCall_address_uint256_bytes)]
    
    syntax S2KVmMethod ::= "method-expectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" ")" [symbol(), klabel(method_Vm_method-expectEmit_bool_bool_bool_bool)]
    
    syntax S2S2Kethod ::= "method-expectEmit" "(" Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "bool" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_method-expectEmit_bool_bool_bool_bool_address)]
    
    syntax S2KVmMethod ::= "method-expectRevert" "(" ")" [symbol(), klabel(method_Vm_method-expectRevert_)]
    
    syntax S2KVmMethod ::= "method-expectRevert" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_method-expectRevert_bytes)]
    
    syntax S2KVmMethod ::= "method-expectRevert" "(" Int ":" "bytes4" ")" [symbol(), klabel(method_Vm_method-expectRevert_bytes4)]
    
    syntax S2KVmMethod ::= "method-fee" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-fee_uint256)]
    
    syntax S2KVmMethod ::= "method-ffi" "(" K ":" "string[]" ")" [symbol(), klabel(method_Vm_method-ffi_string[])]
    
    syntax S2KVmMethod ::= "method-getCode" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-getCode_string)]
    
    syntax S2KVmMethod ::= "method-getNonce" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_method-getNonce_address)]
    
    syntax S2KVmMethod ::= "method-getRecordedLogs" "(" ")" [symbol(), klabel(method_Vm_method-getRecordedLogs_)]
    
    syntax S2S2Kethod ::= "method-label" "(" Int ":" "address" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-label_address_string)]
    
    syntax S2KVmMethod ::= "method-load" "(" Int ":" "address" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_method-load_address_bytes32)]
    
    syntax S2KVmMethod ::= "method-mockCall" "(" Int ":" "address" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_method-mockCall_address_bytes_bytes)]
    
    syntax S2KVmMethod ::= "method-mockCall" "(" Int ":" "address" "," Int ":" "uint256" "," Bytes ":" "bytes" "," Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_method-mockCall_address_uint256_bytes_bytes)]
    
    syntax S2KVmMethod ::= "method-prank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_method-prank_address)]
    
    syntax S2KVmMethod ::= "method-prank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_method-prank_address_address)]
    
    syntax S2KVmMethod ::= "method-readFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-readFile_string)]
    
    syntax S2KVmMethod ::= "method-readLine" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-readLine_string)]
    
    syntax S2KVmMethod ::= "method-record" "(" ")" [symbol(), klabel(method_Vm_method-record_)]
    
    syntax S2S2Kethod ::= "method-recordLogs" "(" ")" [symbol(), klabel(method_Vm_method-recordLogs_)]
    
    syntax S2KVmMethod ::= "method-removeFile" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-removeFile_string)]
    
    syntax S2KVmMethod ::= "method-revertTo" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-revertTo_uint256)]
    
    syntax S2KVmMethod ::= "method-roll" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-roll_uint256)]
    
    syntax S2KVmMethod ::= "method-rollFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-rollFork_uint256)]
    
    syntax S2KVmMethod ::= "method-rollFork" "(" Int ":" "uint256" "," Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-rollFork_uint256_uint256)]
    
    syntax S2KVmMethod ::= "method-rpcUrl" "(" String ":" "string" ")" [symbol(), klabel(method_Vm_method-rpcUrl_string)]
    
    syntax S2KVmMethod ::= "method-rpcUrls" "(" ")" [symbol(), klabel(method_Vm_method-rpcUrls_)]
    
    syntax S2KVmMethod ::= "method-selectFork" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-selectFork_uint256)]
    
    syntax S2S2Kethod ::= "method-setEnv" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-setEnv_string_string)]
    
    syntax S2KVmMethod ::= "method-setNonce" "(" Int ":" "address" "," Int ":" "uint64" ")" [symbol(), klabel(method_Vm_method-setNonce_address_uint64)]
    
    syntax S2KVmMethod ::= "method-sign" "(" Int ":" "uint256" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_method-sign_uint256_bytes32)]
    
    syntax S2KVmMethod ::= "method-snapshot" "(" ")" [symbol(), klabel(method_Vm_method-snapshot_)]
    
    syntax S2KVmMethod ::= "method-startBroadcast" "(" ")" [symbol(), klabel(method_Vm_method-startBroadcast_)]
    
    syntax S2KVmMethod ::= "method-startBroadcast" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_method-startBroadcast_address)]
    
    syntax S2KVmMethod ::= "method-startPrank" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_method-startPrank_address)]
    
    syntax S2KVmMethod ::= "method-startPrank" "(" Int ":" "address" "," Int ":" "address" ")" [symbol(), klabel(method_Vm_method-startPrank_address_address)]
    
    syntax S2KVmMethod ::= "method-stopBroadcast" "(" ")" [symbol(), klabel(method_Vm_method-stopBroadcast_)]
    
    syntax S2S2Kethod ::= "method-stopPrank" "(" ")" [symbol(), klabel(method_Vm_method-stopPrank_)]
    
    syntax S2KVmMethod ::= "method-store" "(" Int ":" "address" "," Int ":" "bytes32" "," Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_method-store_address_bytes32_bytes32)]
    
    syntax S2KVmMethod ::= "method-toString" "(" Int ":" "address" ")" [symbol(), klabel(method_Vm_method-toString_address)]
    
    syntax S2KVmMethod ::= "method-toString" "(" Int ":" "bool" ")" [symbol(), klabel(method_Vm_method-toString_bool)]
    
    syntax S2KVmMethod ::= "method-toString" "(" Bytes ":" "bytes" ")" [symbol(), klabel(method_Vm_method-toString_bytes)]
    
    syntax S2KVmMethod ::= "method-toString" "(" Int ":" "bytes32" ")" [symbol(), klabel(method_Vm_method-toString_bytes32)]
    
    syntax S2KVmMethod ::= "method-toString" "(" Int ":" "int256" ")" [symbol(), klabel(method_Vm_method-toString_int256)]
    
    syntax S2KVmMethod ::= "method-toString" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-toString_uint256)]
    
    syntax S2KVmMethod ::= "method-warp" "(" Int ":" "uint256" ")" [symbol(), klabel(method_Vm_method-warp_uint256)]
    
    syntax S2S2Kethod ::= "method-writeFile" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-writeFile_string_string)]
    
    syntax S2KVmMethod ::= "method-writeLine" "(" String ":" "string" "," String ":" "string" ")" [symbol(), klabel(method_Vm_method-writeLine_string_string)]
    
    rule  ( S2KVm . method-accesses ( V0_ : address ) => #abiCallData ( "accesses" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . method-activeFork ( ) => #abiCallData ( "activeFork" , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-addr ( V0_ : uint256 ) => #abiCallData ( "addr" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . method-assume ( V0_ : bool ) => #abiCallData ( "assume" , #bool ( V0_ ) , .TypedArgs ) )
       ensures #rangeBool ( V0_ )
      
    
    rule  ( S2KVm . method-broadcast ( ) => #abiCallData ( "broadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-broadcast ( V0_ : address ) => #abiCallData ( "broadcast" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . method-chainId ( V0_ : uint256 ) => #abiCallData ( "chainId" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2S2K. method-clearMockedCalls ( ) => #abiCallData ( "clearMockedCalls" , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-closeFile ( V0_ : string ) => #abiCallData ( "closeFile" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-coinbase ( V0_ : address ) => #abiCallData ( "coinbase" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . method-createFork ( V0_ : string ) => #abiCallData ( "createFork" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-createFork ( V0_ : string , V1_ : uint256 ) => #abiCallData ( "createFork" , #string ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_ )
      
    
    rule  ( S2KVm . method-createSelectFork ( V0_ : string ) => #abiCallData ( "createSelectFork" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-createSelectFork ( V0_ : string , V1_ : uint256 ) => #abiCallData ( "createSelectFork" , #string ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V1_ )
      
    
    rule  ( S2KVm . method-deal ( V0_ : address , V1_ : uint256 ) => #abiCallData ( "deal" , #address ( V0_ ) , #uint256 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KVm . method-deriveKey ( V0_ : string , V1_ : string , V2_ : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_ ) , #string ( V1_ ) , #uint32 ( V2_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V2_ )
      
    
    rule  ( S2S2K. method-deriveKey ( V0_ : string , V1_ : uint32 ) => #abiCallData ( "deriveKey" , #string ( V0_ ) , #uint32 ( V1_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 32 , V1_ )
      
    
    rule  ( S2KVm . method-envAddress ( V0_ : string ) => #abiCallData ( "envAddress" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envAddress ( V0_ : string , V1_ : string ) => #abiCallData ( "envAddress" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envBool ( V0_ : string ) => #abiCallData ( "envBool" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envBool ( V0_ : string , V1_ : string ) => #abiCallData ( "envBool" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envBytes ( V0_ : string ) => #abiCallData ( "envBytes" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envBytes ( V0_ : string , V1_ : string ) => #abiCallData ( "envBytes" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envBytes32 ( V0_ : string ) => #abiCallData ( "envBytes32" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envBytes32 ( V0_ : string , V1_ : string ) => #abiCallData ( "envBytes32" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2S2K. method-envInt ( V0_ : string ) => #abiCallData ( "envInt" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envInt ( V0_ : string , V1_ : string ) => #abiCallData ( "envInt" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envString ( V0_ : string ) => #abiCallData ( "envString" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envString ( V0_ : string , V1_ : string ) => #abiCallData ( "envString" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envUint ( V0_ : string ) => #abiCallData ( "envUint" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-envUint ( V0_ : string , V1_ : string ) => #abiCallData ( "envUint" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-etch ( V0_ : address , V1_ : bytes ) => #abiCallData ( "etch" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KVm . method-expectCall ( V0_ : address , V1_ : bytes ) => #abiCallData ( "expectCall" , #address ( V0_ ) , #bytes ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
               ))
      
    
    rule  ( S2KVm . method-expectCall ( V0_ : address , V1_ : uint256 , V2_ : bytes ) => #abiCallData ( "expectCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2S2K. method-expectEmit ( V0_ : bool , V1_ : bool , V2_ : bool , V3_ : bool ) => #abiCallData ( "expectEmit" , #bool ( V0_ ) , #bool ( V1_ ) , #bool ( V2_ ) , #bool ( V3_ ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_ )
       andBool ( #rangeBool ( V1_ )
       andBool ( #rangeBool ( V2_ )
       andBool ( #rangeBool ( V3_ )
               ))))
      
    
    rule  ( S2KVm . method-expectEmit ( V0_ : bool , V1_ : bool , V2_ : bool , V3_ : bool , V4_ : address ) => #abiCallData ( "expectEmit" , #bool ( V0_ ) , #bool ( V1_ ) , #bool ( V2_ ) , #bool ( V3_ ) , #address ( V4_ ) , .TypedArgs ) )
       ensures ( #rangeBool ( V0_ )
       andBool ( #rangeBool ( V1_ )
       andBool ( #rangeBool ( V2_ )
       andBool ( #rangeBool ( V3_ )
       andBool ( #rangeAddress ( V4_ )
               )))))
      
    
    rule  ( S2KVm . method-expectRevert ( ) => #abiCallData ( "expectRevert" , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-expectRevert ( V0_ : bytes ) => #abiCallData ( "expectRevert" , #bytes ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_ ) )
      
    
    rule  ( S2KVm . method-expectRevert ( V0_ : bytes4 ) => #abiCallData ( "expectRevert" , #bytes4 ( V0_ ) , .TypedArgs ) )
       ensures #rangeBytes ( 4 , V0_ )
      
    
    rule  ( S2KVm . method-fee ( V0_ : uint256 ) => #abiCallData ( "fee" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . method-getCode ( V0_ : string ) => #abiCallData ( "getCode" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-getNonce ( V0_ : address ) => #abiCallData ( "getNonce" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . method-getRecordedLogs ( ) => #abiCallData ( "getRecordedLogs" , .TypedArgs ) )
      
    
    rule  ( S2S2K. method-label ( V0_ : address , V1_ : string ) => #abiCallData ( "label" , #address ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . method-load ( V0_ : address , V1_ : bytes32 ) => #abiCallData ( "load" , #address ( V0_ ) , #bytes32 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KVm . method-mockCall ( V0_ : address , V1_ : bytes , V2_ : bytes ) => #abiCallData ( "mockCall" , #address ( V0_ ) , #bytes ( V1_ ) , #bytes ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V1_ ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
               )))
      
    
    rule  ( S2KVm . method-mockCall ( V0_ : address , V1_ : uint256 , V2_ : bytes , V3_ : bytes ) => #abiCallData ( "mockCall" , #address ( V0_ ) , #uint256 ( V1_ ) , #bytes ( V2_ ) , #bytes ( V3_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V2_ ) )
       andBool ( #rangeUInt ( 128 , lengthBytes ( V3_ ) )
               ))))
      
    
    rule  ( S2KVm . method-prank ( V0_ : address ) => #abiCallData ( "prank" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . method-prank ( V0_ : address , V1_ : address ) => #abiCallData ( "prank" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))
      
    
    rule  ( S2KVm . method-readFile ( V0_ : string ) => #abiCallData ( "readFile" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-readLine ( V0_ : string ) => #abiCallData ( "readLine" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-record ( ) => #abiCallData ( "record" , .TypedArgs ) )
      
    
    rule  ( S2S2K. method-recordLogs ( ) => #abiCallData ( "recordLogs" , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-removeFile ( V0_ : string ) => #abiCallData ( "removeFile" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-revertTo ( V0_ : uint256 ) => #abiCallData ( "revertTo" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . method-roll ( V0_ : uint256 ) => #abiCallData ( "roll" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . method-rollFork ( V0_ : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . method-rollFork ( V0_forkId : uint256 , V1_blockNumber : uint256 ) => #abiCallData ( "rollFork" , #uint256 ( V0_forkId ) , #uint256 ( V1_blockNumber ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_forkId )
       andBool ( #rangeUInt ( 256 , V1_blockNumber )
               ))
      
    
    rule  ( S2KVm . method-rpcUrl ( V0_ : string ) => #abiCallData ( "rpcUrl" , #string ( V0_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-rpcUrls ( ) => #abiCallData ( "rpcUrls" , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-selectFork ( V0_ : uint256 ) => #abiCallData ( "selectFork" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2S2K. method-setEnv ( V0_ : string , V1_ : string ) => #abiCallData ( "setEnv" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-setNonce ( V0_ : address , V1_ : uint64 ) => #abiCallData ( "setNonce" , #address ( V0_ ) , #uint64 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 64 , V1_ )
               ))
      
    
    rule  ( S2KVm . method-sign ( V0_ : uint256 , V1_ : bytes32 ) => #abiCallData ( "sign" , #uint256 ( V0_ ) , #bytes32 ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
               ))
      
    
    rule  ( S2KVm . method-snapshot ( ) => #abiCallData ( "snapshot" , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-startBroadcast ( ) => #abiCallData ( "startBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-startBroadcast ( V0_ : address ) => #abiCallData ( "startBroadcast" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . method-startPrank ( V0_ : address ) => #abiCallData ( "startPrank" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . method-startPrank ( V0_ : address , V1_ : address ) => #abiCallData ( "startPrank" , #address ( V0_ ) , #address ( V1_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeAddress ( V1_ )
               ))
      
    
    rule  ( S2KVm . method-stopBroadcast ( ) => #abiCallData ( "stopBroadcast" , .TypedArgs ) )
      
    
    rule  ( S2S2K. method-stopPrank ( ) => #abiCallData ( "stopPrank" , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-store ( V0_ : address , V1_ : bytes32 , V2_ : bytes32 ) => #abiCallData ( "store" , #address ( V0_ ) , #bytes32 ( V1_ ) , #bytes32 ( V2_ ) , .TypedArgs ) )
       ensures ( #rangeAddress ( V0_ )
       andBool ( #rangeUInt ( 256 , V1_ )
       andBool ( #rangeUInt ( 256 , V2_ )
               )))
      
    
    rule  ( S2KVm . method-toString ( V0_ : address ) => #abiCallData ( "toString" , #address ( V0_ ) , .TypedArgs ) )
       ensures #rangeAddress ( V0_ )
      
    
    rule  ( S2KVm . method-toString ( V0_ : bool ) => #abiCallData ( "toString" , #bool ( V0_ ) , .TypedArgs ) )
       ensures #rangeBool ( V0_ )
      
    
    rule  ( S2KVm . method-toString ( V0_ : bytes ) => #abiCallData ( "toString" , #bytes ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 128 , lengthBytes ( V0_ ) )
      
    
    rule  ( S2KVm . method-toString ( V0_ : bytes32 ) => #abiCallData ( "toString" , #bytes32 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . method-toString ( V0_ : int256 ) => #abiCallData ( "toString" , #int256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeSInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . method-toString ( V0_ : uint256 ) => #abiCallData ( "toString" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . method-warp ( V0_ : uint256 ) => #abiCallData ( "warp" , #uint256 ( V0_ ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_ )
      
    
    rule  ( S2KVm . method-writeFile ( V0_ : string , V1_ : string ) => #abiCallData ( "writeFile" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( S2KVm . method-writeLine ( V0_ : string , V1_ : string ) => #abiCallData ( "writeLine" , #string ( V0_ ) , #string ( V1_ ) , .TypedArgs ) )
      
    
    rule  ( selector ( "accesses(address)" ) => 1706857601 )
      
    
    rule  ( selector ( "activeFork()" ) => 789593890 )
      
    
    rule  ( selector ( "addr(uint256)" ) => 4288775753 )
      
    
    rule  ( selector ( "assume(bool)" ) => 1281615202 )
      
    
    rule  ( selector ( "broadcast()" ) => 2949218368 )
      
    
    rule  ( selector ( "broadcast(address)" ) => 3868601563 )
      
    
    rule  ( selector ( "chainId(uint256)" ) => 1078582738 )
      
    
    rule  ( selector ( "clearMockedCalls()" ) => 1071599125 )
      
    
    rule  ( selector ( "closeFile(string)" ) => 1220748319 )
      
    
    rule  ( selector ( "coinbase(address)" ) => 4282924116 )
      
    
    rule  ( selector ( "createFork(string)" ) => 834286744 )
      
    
    rule  ( selector ( "createFork(string,uint256)" ) => 1805892139 )
      
    
    rule  ( selector ( "createSelectFork(string)" ) => 2556952628 )
      
    
    rule  ( selector ( "createSelectFork(string,uint256)" ) => 1911440973 )
      
    
    rule  ( selector ( "deal(address,uint256)" ) => 3364511341 )
      
    
    rule  ( selector ( "deriveKey(string,string,uint32)" ) => 1808477211 )
      
    
    rule  ( selector ( "deriveKey(string,uint32)" ) => 1646872971 )
      
    
    rule  ( selector ( "envAddress(string)" ) => 890066623 )
      
    
    rule  ( selector ( "envAddress(string,string)" ) => 2905717242 )
      
    
    rule  ( selector ( "envBool(string)" ) => 2127686781 )
      
    
    rule  ( selector ( "envBool(string,string)" ) => 2863521455 )
      
    
    rule  ( selector ( "envBytes(string)" ) => 1299951366 )
      
    
    rule  ( selector ( "envBytes(string,string)" ) => 3720504603 )
      
    
    rule  ( selector ( "envBytes32(string)" ) => 2543095874 )
      
    
    rule  ( selector ( "envBytes32(string,string)" ) => 1525821889 )
      
    
    rule  ( selector ( "envInt(string)" ) => 2301234273 )
      
    
    rule  ( selector ( "envInt(string,string)" ) => 1108873552 )
      
    
    rule  ( selector ( "envString(string)" ) => 4168600345 )
      
    
    rule  ( selector ( "envString(string,string)" ) => 347089865 )
      
    
    rule  ( selector ( "envUint(string)" ) => 3247934751 )
      
    
    rule  ( selector ( "envUint(string,string)" ) => 4091461785 )
      
    
    rule  ( selector ( "etch(address,bytes)" ) => 3033974658 )
      
    
    rule  ( selector ( "expectCall(address,bytes)" ) => 3177903156 )
      
    
    rule  ( selector ( "expectCall(address,uint256,bytes)" ) => 4077681571 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool)" ) => 1226622914 )
      
    
    rule  ( selector ( "expectEmit(bool,bool,bool,bool,address)" ) => 2176505587 )
      
    
    rule  ( selector ( "expectRevert()" ) => 4102309908 )
      
    
    rule  ( selector ( "expectRevert(bytes)" ) => 4069379763 )
      
    
    rule  ( selector ( "expectRevert(bytes4)" ) => 3273568480 )
      
    
    rule  ( selector ( "fee(uint256)" ) => 968063664 )
      
    
    rule  ( selector ( "ffi(string[])" ) => 2299921511 )
      
    
    rule  ( selector ( "getCode(string)" ) => 2367473957 )
      
    
    rule  ( selector ( "getNonce(address)" ) => 755185067 )
      
    
    rule  ( selector ( "getRecordedLogs()" ) => 420828068 )
      
    
    rule  ( selector ( "label(address,string)" ) => 3327641368 )
      
    
    rule  ( selector ( "load(address,bytes32)" ) => 1719639408 )
      
    
    rule  ( selector ( "mockCall(address,bytes,bytes)" ) => 3110212580 )
      
    
    rule  ( selector ( "mockCall(address,uint256,bytes,bytes)" ) => 2168494993 )
      
    
    rule  ( selector ( "prank(address)" ) => 3395723175 )
      
    
    rule  ( selector ( "prank(address,address)" ) => 1206193358 )
      
    
    rule  ( selector ( "readFile(string)" ) => 1626979089 )
      
    
    rule  ( selector ( "readLine(string)" ) => 1895126824 )
      
    
    rule  ( selector ( "record()" ) => 644673801 )
      
    
    rule  ( selector ( "recordLogs()" ) => 1101999954 )
      
    
    rule  ( selector ( "removeFile(string)" ) => 4054835277 )
      
    
    rule  ( selector ( "revertTo(uint256)" ) => 1155002532 )
      
    
    rule  ( selector ( "roll(uint256)" ) => 528174896 )
      
    
    rule  ( selector ( "rollFork(uint256)" ) => 3652973473 )
      
    
    rule  ( selector ( "rollFork(uint256,uint256)" ) => 3612115876 )
      
    
    rule  ( selector ( "rpcUrl(string)" ) => 2539285737 )
      
    
    rule  ( selector ( "rpcUrls()" ) => 2824504344 )
      
    
    rule  ( selector ( "selectFork(uint256)" ) => 2663344167 )
      
    
    rule  ( selector ( "setEnv(string,string)" ) => 1029252078 )
      
    
    rule  ( selector ( "setNonce(address,uint64)" ) => 4175530839 )
      
    
    rule  ( selector ( "sign(uint256,bytes32)" ) => 3812747940 )
      
    
    rule  ( selector ( "snapshot()" ) => 2534502746 )
      
    
    rule  ( selector ( "startBroadcast()" ) => 2142579071 )
      
    
    rule  ( selector ( "startBroadcast(address)" ) => 2146183821 )
      
    
    rule  ( selector ( "startPrank(address)" ) => 105151830 )
      
    
    rule  ( selector ( "startPrank(address,address)" ) => 1169514616 )
      
    
    rule  ( selector ( "stopBroadcast()" ) => 1995103542 )
      
    
    rule  ( selector ( "stopPrank()" ) => 2428830011 )
      
    
    rule  ( selector ( "store(address,bytes32,bytes32)" ) => 1892290747 )
      
    
    rule  ( selector ( "toString(address)" ) => 1456103998 )
      
    
    rule  ( selector ( "toString(bool)" ) => 1910302682 )
      
    
    rule  ( selector ( "toString(bytes)" ) => 1907020045 )
      
    
    rule  ( selector ( "toString(bytes32)" ) => 2971277800 )
      
    
    rule  ( selector ( "toString(int256)" ) => 2736964622 )
      
    
    rule  ( selector ( "toString(uint256)" ) => 1761649582 )
      
    
    rule  ( selector ( "warp(uint256)" ) => 3856056066 )
      
    
    rule  ( selector ( "writeFile(string,string)" ) => 2306738839 )
      
    
    rule  ( selector ( "writeLine(string,string)" ) => 1637714303 )
      

endmodule

module console-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KconsoleContract
    
    syntax S2KconsoleContract ::= "S2Kconsole" [symbol(), klabel(contract_console)]
    
      

endmodule

module console2-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2Kconsole2Contract
    
    syntax S2Kconsole2Contract ::= "S2Kconsole2" [symbol(), klabel(contract_console2)]
    
      

endmodule

module DSTest-CONTRACT
    imports public FOUNDRY
    
    syntax Contract ::= S2KDSTestContract
    
    syntax S2KDSTestContract ::= "S2KDSTest" [symbol(), klabel(contract_DSTest)]
    
      
    
    syntax Field ::= DSTestField
    
    syntax DSTestField ::= "IS_TEST" [symbol(), klabel(field_DSTest_IS_TEST)]
    
    syntax DSTestField ::= "_failed" [symbol(), klabel(field_DSTest__failed)]
    
    rule  ( #loc ( S2KDSTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( S2KDSTest . _failed ) => 0 )
      
    
    syntax Bytes ::= S2KDSTestContract "." S2KDSTestMethod [function(), symbol(), klabel(method_DSTest)]
    
    syntax S2KDSTestMethod ::= "method-IS_TEST" "(" ")" [symbol(), klabel(method_DSTest_method-IS_TEST_)]
    
    syntax S2KDSTestMethod ::= "method-failed" "(" ")" [symbol(), klabel(method_DSTest_method-failed_)]
    
    rule  ( S2KDSTest . method-IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( S2KDSTest . method-failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_TEST()" ) => 4202047188 )
      
    
    rule  ( selector ( "failed()" ) => 3124842406 )
      

endmodule
