name: 'Test PR'
on:
  pull_request:
    branches:
      - 'master'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  version-bump:
    name: 'Version Bump'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.JENKINS_GITHUB_PAT }}
          # fetch-depth 0 means deep clone the repo
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.sha }}
      - name: 'Configure GitHub user'
        run: |
          git config user.name devops
          git config user.email devops@runtimeverification.com
      - name: 'Update version'
        run: |
          og_version=$(git show origin/${GITHUB_BASE_REF}:package/version)
          ./package/version.sh bump ${og_version}
          ./package/version.sh sub
          git add --update && git commit --message "Set Version: $(cat package/version)" || true
      - name: 'Install Nix'
        uses: cachix/install-nix-action@v19
        with:
          install_url: https://releases.nixos.org/nix/nix-2.13.3/install
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: 'Install Cachix'
        uses: cachix/cachix-action@v12
        with:
          name: k-framework
          authToken: ${{ secrets.CACHIX_PUBLIC_TOKEN }}
          skipPush: true
      - name: 'Update nix flake inputs'
        run: |
          nix flake update
          git add flake.nix flake.lock && git commit -m 'flake.{nix,lock}: update Nix derivations' || true
      - name: 'Push updates'
        run: git push origin HEAD:${GITHUB_HEAD_REF}

  kevm-pyk-code-quality-checks:
    needs: version-bump
    name: 'Code Quality Checks'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
      - name: 'Install Poetry'
        uses: Gr1N/setup-poetry@v8
      - name: 'Run code quality checks'
        run: make -C kevm-pyk check
      - name: 'Run pyupgrade'
        run: make -C kevm-pyk pyupgrade

  kevm-pyk-unit-tests:
    needs: kevm-pyk-code-quality-checks
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
      - name: 'Install Poetry'
        uses: Gr1N/setup-poetry@v8
      - name: 'Run unit tests'
        run: make -C kevm-pyk cov-unit

  kevm-pyk-profile:
    needs: kevm-pyk-code-quality-checks
    name: 'Profiling'
    runs-on: ubuntu-latest
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: true
      - name: 'Install Poetry'
        uses: Gr1N/setup-poetry@v8
      - name: 'Run profiling'
        run: |
          make -C kevm-pyk profile
          find /tmp/pytest-of-${USER}/pytest-current/ -type f | sort | xargs tail -n +1

  test-concrete-execution:
    name: 'Build and Test KEVM concrete execution'
    needs: kevm-pyk-code-quality-checks
    runs-on: [self-hosted, linux, normal]
    timeout-minutes: 25
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          tag: kevm-ci-concrete-${{ github.sha }}
      - name: 'Build kevm-pyk'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make poetry'
      - name: 'Build kevm'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make build-llvm build-node -j`nproc` RELEASE=true'
      - name: 'Test kevm-pyk'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-kevm-pyk -j`nproc`'
      - name: 'Test conformance'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-conformance -j`nproc` TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test llvm krun'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-interactive-run TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test kast'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-parse -j`nproc` TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test failure tests'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-failure -j`nproc` TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test node'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-node -j`nproc`'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop --time=0 kevm-ci-concrete-${GITHUB_SHA}

  test-prove-haskell:
    name: 'Build and Test KEVM haskell proofs'
    needs: test-concrete-execution
    runs-on: [self-hosted, linux, huge]
    timeout-minutes: 90
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          tag: kevm-ci-haskell-${{ github.sha }}
      - name: 'Build kevm-pyk'
        run: docker exec -u user kevm-ci-haskell-${GITHUB_SHA} /bin/bash -c 'make poetry'
      - name: 'Build Definitions'
        run: docker exec -u user kevm-ci-haskell-${GITHUB_SHA} /bin/bash -c 'make build-prove-haskell -j4'
      - name: 'Prove Haskell'
        run: docker exec -u user kevm-ci-haskell-${GITHUB_SHA} /bin/bash -c 'make test-prove -j9 TEST_SYMBOLIC_BACKEND=haskell'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop --time=0 kevm-ci-haskell-${GITHUB_SHA}

  test-prove-foundry:
    name: 'Build and Test KEVM Foundry proofs'
    needs: test-concrete-execution
    runs-on: [self-hosted, linux, huge]
    timeout-minutes: 150
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          tag: kevm-ci-foundry-${{ github.sha }}
      - name: 'Build kevm-pyk'
        run: docker exec -u user kevm-ci-foundry-${GITHUB_SHA} /bin/bash -c 'make poetry'
      - name: 'Build Foundry'
        run: docker exec -u user kevm-ci-foundry-${GITHUB_SHA} /bin/bash -c 'make build-foundry -j2'
      - name: 'Foundry Kompile'
        run: docker exec -u user kevm-ci-foundry-${GITHUB_SHA} /bin/bash -c 'make test-foundry-kompile -j2'
      - name: 'Foundry Prove'
        run: docker exec -u user kevm-ci-foundry-${GITHUB_SHA} /bin/bash -c 'make test-foundry-prove -j2 FOUNDRY_PAR=12'
      - name: 'Foundry diff tests'
        run: docker exec -u user kevm-ci-foundry-${GITHUB_SHA} /bin/bash -c 'make test-foundry-kcfg-diff -j2 FOUNDRY_PAR=12'
      - name: 'Foundry List'
        run: docker exec -u user kevm-ci-foundry-${GITHUB_SHA} /bin/bash -c 'make test-foundry-list -j2'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop --time=0 kevm-ci-foundry-${GITHUB_SHA}

  nix:
    name: 'Nix'
    strategy:
      fail-fast: false
      matrix:
        include:
          - runner: normal
          - runner: macos-12
          - runner: ARM64
    needs: version-bump
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 60
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          # Check out pull request HEAD instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}
      - name: 'Install Nix'
        if: ${{ matrix.runner == 'macos-12' }}
        uses: cachix/install-nix-action@v19
        with:
          install_url: https://releases.nixos.org/nix/nix-2.13.3/install
          extra_nix_config: |
            access-tokens = github.com=${{ secrets.GITHUB_TOKEN }}
      - name: 'Install Cachix'
        if: ${{ matrix.runner == 'macos-12' }}
        uses: cachix/cachix-action@v12
        with:
          name: k-framework
          authToken: ${{ secrets.CACHIX_PUBLIC_TOKEN }}
      - name: 'Build KEVM'
        run: GC_DONT_GC=1 nix build --extra-experimental-features 'nix-command flakes' --print-build-logs
      - name: 'Test KEVM'
        run: GC_DONT_GC=1 nix build --extra-experimental-features 'nix-command flakes' --print-build-logs .#kevm-test
