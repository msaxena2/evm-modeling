name: 'Test PR'
on:
  pull_request:
    branches:
      - 'master'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  test-concrete-execution:
    name: 'Build and Test KEVM concrete execution'
    runs-on: [self-hosted, linux, normal]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          tag: kevm-ci-concrete-${{ github.sha }}
      - name: 'Build kevm-pyk'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make kevm-pyk venv'
      - name: 'Build kevm'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make build-llvm build-node -j`nproc` RELEASE=true'
      - name: 'Test kevm-pyk'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-kevm-pyk -j`nproc`'
      - name: 'Test conformance'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-conformance -j`nproc` TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test llvm krun'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-interactive-run TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test kast'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-parse -j`nproc` TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test failure tests'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-failure -j`nproc` TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test node'
        run: docker exec -u user kevm-ci-concrete-${GITHUB_SHA} /bin/bash -c 'make test-node -j`nproc`'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop --time=0 kevm-ci-concrete-${GITHUB_SHA}

  test-prove-java:
    name: 'Build and Test KEVM java proofs'
    needs: test-concrete-execution
    runs-on: [self-hosted, linux, normal]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          tag: kevm-ci-java-${{ github.sha }}
      - name: 'Build kevm-pyk'
        run: docker exec -u user kevm-ci-java-${GITHUB_SHA} /bin/bash -c 'make kevm-pyk venv -j2'
      - name: 'Build Definitions'
        run: docker exec -u user kevm-ci-java-${GITHUB_SHA} /bin/bash -c 'make build-prove-java -j2'
      - name: 'Prove Java'
        run: docker exec -u user kevm-ci-java-${GITHUB_SHA} /bin/bash -c 'make test-prove -j3 TEST_SYMBOLIC_BACKEND=java'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop --time=0 kevm-ci-java-${GITHUB_SHA}

  test-prove-haskell:
    name: 'Build and Test KEVM haskell proofs'
    needs: test-concrete-execution
    runs-on: [self-hosted, linux, huge]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          tag: kevm-ci-haskell-${{ github.sha }}
      - name: 'Build kevm-pyk'
        run: docker exec -u user kevm-ci-haskell-${GITHUB_SHA} /bin/bash -c 'make kevm-pyk venv -j2'
      - name: 'Build Definitions'
        run: docker exec -u user kevm-ci-haskell-${GITHUB_SHA} /bin/bash -c 'make build-prove-haskell -j4'
      - name: 'Prove Haskell'
        run: docker exec -u user kevm-ci-haskell-${GITHUB_SHA} /bin/bash -c 'make test-prove -j6 TEST_SYMBOLIC_BACKEND=haskell'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop --time=0 kevm-ci-haskell-${GITHUB_SHA} 

  test-prove-foundry:
    name: 'Build and Test KEVM Foundry proofs'
    needs: test-concrete-execution
    runs-on: [self-hosted, linux, huge]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Set up Docker'
        uses: ./.github/actions/with-docker
        with:
          tag: kevm-ci-foundry-${{ github.sha }}
      - name: 'Build kevm-pyk'
        run: docker exec -u user kevm-ci-foundry-${GITHUB_SHA} /bin/bash -c 'make kevm-pyk venv -j2'
      - name: 'Build Foundry'
        run: docker exec -u user kevm-ci-foundry-${GITHUB_SHA} /bin/bash -c 'make build-foundry -j2'
      - name: 'Test Foundry'
        run: docker exec -u user kevm-ci-foundry-${GITHUB_SHA} /bin/bash -c 'make test-foundry -j2 FOUNDRY_PAR=4 KPROVE_OPTS=--retry'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop --time=0 kevm-ci-foundry-${GITHUB_SHA} 

  nix:
    name: 'Nix'
    strategy:
      matrix:
        os: [ubuntu-20.04, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          # Check out pull request HEAD instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}
      - name: 'Install Python3.10'
        if: ${{ !contains(matrix.os, 'macos') }}
        run: |
          sudo apt-get install --yes software-properties-common
          sudo apt-add-repository ppa:deadsnakes/ppa
          sudo apt-get install --yes python3.10
      - name: 'Install Nix'
        uses: cachix/install-nix-action@v15
        with:
          install_url: https://releases.nixos.org/nix/nix-2.7.0/install
          extra_nix_config: |
            substituters = http://cache.nixos.org https://cache.iog.io
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=
      - name: 'Install Cachix'
        uses: cachix/cachix-action@v10
        with:
          name: k-framework
          authToken: '${{ secrets.CACHIX_PUBLIC_TOKEN }}'
      - name: 'Test KEVM'
        run: GC_DONT_GC=1 nix build --print-build-logs .#kevm-test
