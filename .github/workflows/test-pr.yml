name: 'Test PR'
on:
  pull_request:
    branches:
      - 'master'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:

  test-concrete-execution:
    name: 'Build and Test KEVM concrete execution'
    runs-on: [self-hosted, linux, normal]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
          fetch-depth: 0
      - name: 'Set up Docker'
        run: |
          Z3_VERSION=4.8.15
          K_COMMIT="$(cat deps/k_release | cut --characters=2-)"
          docker build . --file .github/workflows/Dockerfile.z3 \
            --tag z3:${Z3_VERSION}
          docker build . --file .github/workflows/Dockerfile           \
            --tag runtimeverification/kevm-ci-concrete                 \
            --build-arg K_COMMIT=${K_COMMIT}                           \
            --build-arg Z3_VERSION=${Z3_VERSION}                       \
            --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)
          docker run                        \
            --name kevm-ci-concrete         \
            --rm -it                        \
            --detach                        \
            --workdir /opt/workspace        \
            --user $(id -u):$(id -g)        \
            -v ${HOME}:${HOME}              \
            -v "$(pwd):/opt/workspace"      \
            -v "/etc/passwd:/etc/passwd:ro" \
            -v "/etc/group:/etc/group:ro"   \
            runtimeverification/kevm-ci-concrete
      - name: 'Build kevm-pyk'
        run: docker exec -t kevm-ci-concrete /bin/bash -c 'make kevm-pyk venv -j`nproc`'
      - name: 'Build kevm'
        run: docker exec -t kevm-ci-concrete /bin/bash -c 'make build-llvm build-node -j`nproc` RELEASE=true'
      - name: 'Test kevm-pyk'
        run: docker exec -t kevm-ci-concrete /bin/bash -c 'make test-kevm-pyk -j`nproc`'
      - name: 'Test conformance'
        run: docker exec -t kevm-ci-concrete /bin/bash -c 'make test-conformance -j`nproc` TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test llvm krun'
        run: docker exec -t kevm-ci-concrete /bin/bash -c 'make test-interactive-run TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test kast'
        run: docker exec -t kevm-ci-concrete /bin/bash -c 'make test-parse -j`nproc` TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test failure tests'
        run: docker exec -t kevm-ci-concrete /bin/bash -c 'make test-failure -j`nproc` TEST_CONCRETE_BACKEND=llvm'
      - name: 'Test node'
        run: docker exec -t kevm-ci-concrete /bin/bash -c 'make test-node -j`nproc`'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop kevm-ci-concrete || true

  test-prove-java:
    name: 'Build and Test KEVM java proofs'
    needs: test-concrete-execution
    runs-on: [self-hosted, linux, normal]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Set up Docker'
        run: |
          docker build . --file .github/workflows/Dockerfile --tag runtimeverification/kevm-ci-java \
            --build-arg BASE_IMAGE=ubuntu:jammy --build-arg LLVM_VERSION=14                         \
            --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)
          docker run                        \
            --name kevm-ci-java             \
            --rm -it                        \
            --detach                        \
            --workdir /opt/workspace        \
            --user $(id -u):$(id -g)        \
            -v ${HOME}:${HOME}              \
            -v "$(pwd):/opt/workspace"      \
            -v "/etc/passwd:/etc/passwd:ro" \
            -v "/etc/group:/etc/group:ro"   \
            runtimeverification/kevm-ci-java
      - name: 'Build kevm-pyk'
        run: docker exec -t kevm-ci-java /bin/bash -c 'make kevm-pyk venv -j2'
      - name: 'Test Java'
        run: docker exec -t kevm-ci-java /bin/bash -c 'make test-prove -j2 TEST_SYMBOLIC_BACKEND=java'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop kevm-ci-java || true

  test-prove-haskell:
    name: 'Build and Test KEVM haskell proofs'
    needs: test-concrete-execution
    runs-on: [self-hosted, linux, huge]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Set up Docker'
        run: |
          docker build . --file .github/workflows/Dockerfile --tag runtimeverification/kevm-ci-haskell \
            --build-arg BASE_IMAGE=ubuntu:jammy --build-arg LLVM_VERSION=14                            \
            --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)
          docker run                        \
            --name kevm-ci-haskell          \
            --rm -it                        \
            --detach                        \
            --workdir /opt/workspace        \
            --user $(id -u):$(id -g)        \
            -v ${HOME}:${HOME}              \
            -v "$(pwd):/opt/workspace"      \
            -v "/etc/passwd:/etc/passwd:ro" \
            -v "/etc/group:/etc/group:ro"   \
            runtimeverification/kevm-ci-haskell
      - name: 'Build kevm-pyk'
        run: docker exec -t kevm-ci-haskell /bin/bash -c 'make kevm-pyk venv -j2'
      - name: 'Test Java'
        run: docker exec -t kevm-ci-haskell /bin/bash -c 'make test-prove -j6 TEST_SYMBOLIC_BACKEND=haskell'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop kevm-ci-haskell || true

  test-prove-foundry:
    name: 'Build and Test KEVM Foundry proofs'
    needs: test-prove-java
    runs-on: [self-hosted, linux, normal]
    steps:
      - name: 'Check out code'
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: 'Set up Docker'
        run: |
          docker build . --file .github/workflows/Dockerfile --tag runtimeverification/kevm-ci-foundry \
            --build-arg BASE_IMAGE=ubuntu:jammy --build-arg LLVM_VERSION=14                            \
            --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g)
          docker run                        \
            --name kevm-ci-foundry          \
            --rm -it                        \
            --detach                        \
            --workdir /opt/workspace        \
            --user $(id -u):$(id -g)        \
            -v ${HOME}:${HOME}              \
            -v "$(pwd):/opt/workspace"      \
            -v "/etc/passwd:/etc/passwd:ro" \
            -v "/etc/group:/etc/group:ro"   \
            runtimeverification/kevm-ci-foundry
      - name: 'Build kevm-pyk'
        run: docker exec -t kevm-ci-foundry /bin/bash -c 'make kevm-pyk venv -j2'
      - name: 'Test Java'
        run: docker exec -t kevm-ci-foundry /bin/bash -c 'make test-foundry -j2'
      - name: 'Tear down Docker'
        if: always()
        run: |
          docker stop kevm-ci-foundry || true

  nix:
    name: 'Nix'
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Check out code
        uses: actions/checkout@v2.3.4
        with:
          # Check out pull request HEAD instead of merge commit.
          ref: ${{ github.event.pull_request.head.sha }}

      - name: 'Install Nix'
        uses: cachix/install-nix-action@v15
        with:
          install_url: https://releases.nixos.org/nix/nix-2.7.0/install
          extra_nix_config: |
            substituters = http://cache.nixos.org https://cache.iog.io
            trusted-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=

      - name: 'Install Cachix'
        uses: cachix/cachix-action@v10
        with:
          name: runtimeverification
          extraPullNames: kore
          signingKey: '${{ secrets.CACHIX_SIGNING_KEY }}'

      # - name: Check submodules
      #   run: GC_DONT_GC=1 nix run .#check-submodules

      - name: Test KEVM
        run: GC_DONT_GC=1 nix build .#kevm-test
