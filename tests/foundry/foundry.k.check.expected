requires "edsl.md"
requires "lemmas/int-simplification.k"
requires "lemmas/lemmas.k"
requires "lemmas/int-simplification.k"

module ASSUMETEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= AssumeTestContract
    
    syntax AssumeTestContract ::= "AssumeTest" [klabel(contract_AssumeTest)]
    
    rule  ( #binRuntime ( AssumeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa6146100ed578063e41befb41461008d578063f8ccbf4714610105578063fa7626d41461011857600080fd5b80630eb656da1461008d5780633a768463146100a25780635f2e70fb146100da5780636eef607c146100da575b600080fd5b6100a061009b36600461052d565b610125565b005b6100bd737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a06100e836600461052d565b61019b565b6100f56101d4565b60405190151581526020016100d1565b6000546100f59062010000900460ff1681565b6000546100f59060ff1681565b604051632631f2b160e11b8152818314156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e562906024015b600060405180830381600087803b15801561017557600080fd5b505af1158015610189573d6000803e3d6000fd5b5050505061019782826102ff565b5050565b604051632631f2b160e11b81528183146004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e5629060240161015b565b60008054610100900460ff16156101f45750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102fa5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610282917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161058a565b60408051601f198184030181529082905261029c916105ae565b6000604051808303816000865af19150503d80600081146102d9576040519150601f19603f3d011682016040523d82523d6000602084013e6102de565b606091505b50915050808060200190518101906102f691906105c1565b9150505b919050565b808214610197577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103709060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610197737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561051c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526104bb929160200161058a565b60408051601f19818403018152908290526104d5916105ae565b6000604051808303816000865af19150503d8060008114610512576040519150601f19603f3d011682016040523d82523d6000602084013e610517565b606091505b505050505b6000805461ff001916610100179055565b6000806040838503121561054057600080fd5b50508035926020909101359150565b6000815160005b818110156105705760208185018101518683015201610556565b8181111561057f576000828601525b509290920192915050565b6001600160e01b03198316815260006105a6600483018461054f565b949350505050565b60006105ba828461054f565b9392505050565b6000602082840312156105d357600080fd5b815180151581146105ba57600080fdfea2646970667358221220518a724d423010b6b721a9f29160c745e0bdfdc3ba5c26a4814f0d218249b7ea64736f6c634300080d0033" ) )
      
    
    syntax Field ::= AssumeTestField
    
    syntax AssumeTestField ::= "IS_TEST" [symbol(), klabel(field_AssumeTest_IS_TEST)]
    
    syntax AssumeTestField ::= "_failed" [symbol(), klabel(field_AssumeTest__failed)]
    
    syntax AssumeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_AssumeTest_IS_SCRIPT)]
    
    syntax AssumeTestField ::= "stdstore" [symbol(), klabel(field_AssumeTest_stdstore)]
    
    rule  ( #loc ( AssumeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( AssumeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( AssumeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( AssumeTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= AssumeTestContract "." AssumeTestMethod [function(), klabel(method_AssumeTest)]
    
    syntax AssumeTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_AssumeTest_IS_SCRIPT)]
    
    syntax AssumeTestMethod ::= "IS_TEST" "(" ")" [klabel(method_AssumeTest_IS_TEST)]
    
    syntax AssumeTestMethod ::= "failed" "(" ")" [klabel(method_AssumeTest_failed)]
    
    syntax AssumeTestMethod ::= "testFail_assume_false" "(" Int "," Int ")" [klabel(method_AssumeTest_testFail_assume_false)]
    
    syntax AssumeTestMethod ::= "testFail_assume_true" "(" Int "," Int ")" [klabel(method_AssumeTest_testFail_assume_true)]
    
    syntax AssumeTestMethod ::= "test_assume_false" "(" Int "," Int ")" [klabel(method_AssumeTest_test_assume_false)]
    
    syntax AssumeTestMethod ::= "test_assume_true" "(" Int "," Int ")" [klabel(method_AssumeTest_test_assume_true)]
    
    syntax AssumeTestMethod ::= "vm" "(" ")" [klabel(method_AssumeTest_vm)]
    
    rule  ( AssumeTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( AssumeTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( AssumeTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( AssumeTest . testFail_assume_false ( V0_a , V1_b ) => #abiCallData ( "testFail_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( AssumeTest . testFail_assume_true ( V0_a , V1_b ) => #abiCallData ( "testFail_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( AssumeTest . test_assume_false ( V0_a , V1_b ) => #abiCallData ( "test_assume_false" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( AssumeTest . test_assume_true ( V0_a , V1_b ) => #abiCallData ( "test_assume_true" , #uint256 ( V0_a ) , #uint256 ( V1_b ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_a )
       andBool ( #rangeUInt ( 256 , V1_b )
               ))
      
    
    rule  ( AssumeTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testFail_assume_false" ) => 1596879099 )
      
    
    rule  ( selector ( "testFail_assume_true" ) => 246830810 )
      
    
    rule  ( selector ( "test_assume_false" ) => 3827036084 )
      
    
    rule  ( selector ( "test_assume_true" ) => 1861181564 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module BLOCKPARAMSTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= BlockParamsTestContract
    
    syntax BlockParamsTestContract ::= "BlockParamsTest" [klabel(contract_BlockParamsTest)]
    
    rule  ( #binRuntime ( BlockParamsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806385017cac1161006657806385017cac1461010b578063ba414fa614610113578063e46f59bb1461012b578063f8ccbf471461013e578063fa7626d41461015157600080fd5b80631d06e4361461009857806328f82645146100ad5780633a768463146100c057806374b41d6a146100f8575b600080fd5b6100ab6100a63660046107bf565b61015e565b005b6100ab6100bb3660046107bf565b6101d0565b6100db737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab6101063660046107bf565b61023f565b6100ab6102ae565b61011b610336565b60405190151581526020016100ef565b6100ab6101393660046107bf565b610461565b60005461011b9062010000900460ff1681565b60005461011b9060ff1681565b604051632024eee960e11b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90634049ddd290602401600060405180830381600087803b1580156101ab57600080fd5b505af11580156101bf573d6000803e3d6000fd5b505050506101cd46826104cc565b50565b60405163039b37ab60e41b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906339b37ab090602401600060405180830381600087803b15801561021d57600080fd5b505af1158015610231573d6000803e3d6000fd5b505050506101cd48826104cc565b6040516372eb5f8160e11b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e5d6bf0290602401600060405180830381600087803b15801561028c57600080fd5b505af11580156102a0573d6000803e3d6000fd5b505050506101cd42826104cc565b6040516001622df0eb60e21b0319815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ff483c5490602401600060405180830381600087803b15801561031457600080fd5b505af1158015610328573d6000803e3d6000fd5b505050506101cd41826105bf565b60008054610100900460ff16156103565750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561045c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916103e4917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610813565b60408051601f19818403018152908290526103fe91610837565b6000604051808303816000865af19150503d806000811461043b576040519150601f19603f3d011682016040523d82523d6000602084013e610440565b606091505b5091505080806020019051810190610458919061084a565b9150505b919050565b6040516301f7b4f360e41b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90631f7b4f3090602401600060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b505050506101cd43825b8082146105bb577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161053d9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610574919061086c565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8826040516105ab91906108a4565b60405180910390a16105bb6106b3565b5050565b806001600160a01b0316826001600160a01b0316146105bb577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516106459060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8160405161067c91906108ce565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f826040516105ab9190610912565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107ae5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261074d9291602001610813565b60408051601f198184030181529082905261076791610837565b6000604051808303816000865af19150503d80600081146107a4576040519150601f19603f3d011682016040523d82523d6000602084013e6107a9565b606091505b505050505b6000805461ff001916610100179055565b6000602082840312156107d157600080fd5b5035919050565b6000815160005b818110156107f957602081850181015186830152016107df565b81811115610808576000828601525b509290920192915050565b6001600160e01b031983168152600061082f60048301846107d8565b949350505050565b600061084382846107d8565b9392505050565b60006020828403121561085c57600080fd5b8151801515811461084357600080fd5b60408152600061089660408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b60408152600061089660408301600a815269080808081058dd1d585b60b21b602082015260400190565b6040815260006108f860408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b6040815260006108f860408301600a815269080808081058dd1d585b60b21b60208201526040019056fea2646970667358221220de8011cd448828d5a40b76db4f5d8fb57dbb8aa085b1f031c850ae713c85bfe364736f6c634300080d0033" ) )
      
    
    syntax Field ::= BlockParamsTestField
    
    syntax BlockParamsTestField ::= "IS_TEST" [symbol(), klabel(field_BlockParamsTest_IS_TEST)]
    
    syntax BlockParamsTestField ::= "_failed" [symbol(), klabel(field_BlockParamsTest__failed)]
    
    syntax BlockParamsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BlockParamsTest_IS_SCRIPT)]
    
    syntax BlockParamsTestField ::= "stdstore" [symbol(), klabel(field_BlockParamsTest_stdstore)]
    
    rule  ( #loc ( BlockParamsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( BlockParamsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( BlockParamsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( BlockParamsTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= BlockParamsTestContract "." BlockParamsTestMethod [function(), klabel(method_BlockParamsTest)]
    
    syntax BlockParamsTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_BlockParamsTest_IS_SCRIPT)]
    
    syntax BlockParamsTestMethod ::= "IS_TEST" "(" ")" [klabel(method_BlockParamsTest_IS_TEST)]
    
    syntax BlockParamsTestMethod ::= "failed" "(" ")" [klabel(method_BlockParamsTest_failed)]
    
    syntax BlockParamsTestMethod ::= "testChainId" "(" Int ")" [klabel(method_BlockParamsTest_testChainId)]
    
    syntax BlockParamsTestMethod ::= "testCoinBase" "(" ")" [klabel(method_BlockParamsTest_testCoinBase)]
    
    syntax BlockParamsTestMethod ::= "testFee" "(" Int ")" [klabel(method_BlockParamsTest_testFee)]
    
    syntax BlockParamsTestMethod ::= "testRoll" "(" Int ")" [klabel(method_BlockParamsTest_testRoll)]
    
    syntax BlockParamsTestMethod ::= "testWarp" "(" Int ")" [klabel(method_BlockParamsTest_testWarp)]
    
    syntax BlockParamsTestMethod ::= "vm" "(" ")" [klabel(method_BlockParamsTest_vm)]
    
    rule  ( BlockParamsTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( BlockParamsTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( BlockParamsTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( BlockParamsTest . testChainId ( V0_newChainId ) => #abiCallData ( "testChainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( BlockParamsTest . testCoinBase ( ) => #abiCallData ( "testCoinBase" , .TypedArgs ) )
      
    
    rule  ( BlockParamsTest . testFee ( V0_newFee ) => #abiCallData ( "testFee" , #uint256 ( V0_newFee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newFee )
      
    
    rule  ( BlockParamsTest . testRoll ( V0_newHeight ) => #abiCallData ( "testRoll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( BlockParamsTest . testWarp ( V0_time ) => #abiCallData ( "testWarp" , #uint256 ( V0_time ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_time )
      
    
    rule  ( BlockParamsTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testChainId" ) => 486990902 )
      
    
    rule  ( selector ( "testCoinBase" ) => 2231467180 )
      
    
    rule  ( selector ( "testFee" ) => 687351365 )
      
    
    rule  ( selector ( "testRoll" ) => 3832502715 )
      
    
    rule  ( selector ( "testWarp" ) => 1957961066 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module BROADCASTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= BroadcastTestContract
    
    syntax BroadcastTestContract ::= "BroadcastTest" [klabel(contract_BroadcastTest)]
    
    rule  ( #binRuntime ( BroadcastTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa614610118578063f8ccbf4714610130578063fa7626d414610143578063fd959e421461015057600080fd5b80630a9254e41461008d578063354b2735146100d65780633a768463146100de578063715f1d5c14610110575b600080fd5b6100d4600880546001600160a01b031990811673ea674fdde714fd979de3edf0f56aa9716b898ec81790915560098054909116600080516020610ea1833981519152179055565b005b6100d4610158565b6100f3600080516020610ea183398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100d461034e565b6101206105b0565b6040519015158152602001610107565b6000546101209062010000900460ff1681565b6000546101209060ff1681565b6100d46106cf565b60085460405163e6962cdb60e01b81526001600160a01b039091166004820152600080516020610ea18339815191529063e6962cdb90602401600060405180830381600087803b1580156101ab57600080fd5b505af11580156101bf573d6000803e3d6000fd5b505050506000600a6040516101d390610a68565b908152602001604051809103906000f0801580156101f5573d6000803e3d6000fd5b5060405163afe29f7160e01b81526004818101529091506000906001600160a01b0383169063afe29f71906024016020604051808303816000875af1158015610242573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102669190610a75565b905061027381600061083d565b60095460405163e6962cdb60e01b81526001600160a01b039091166004820152600080516020610ea18339815191529063e6962cdb90602401600060405180830381600087803b1580156102c657600080fd5b505af11580156102da573d6000803e3d6000fd5b505060405163afe29f7160e01b8152600560048201526001600160a01b038516925063afe29f7191506024016020604051808303816000875af1158015610325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103499190610a75565b505050565b604080516302bf260160e61b81529051600080516020610ea18339815191529163afc9804091600480830192600092919082900301818387803b15801561039457600080fd5b505af11580156103a8573d6000803e3d6000fd5b50505050600060056040516103bc90610a68565b908152602001604051809103906000f0801580156103de573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600060048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610429573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044d9190610a75565b5060408051637fb5297f60e01b81529051600080516020610ea183398151915291637fb5297f91600480830192600092919082900301818387803b15801561049457600080fd5b505af11580156104a8573d6000803e3d6000fd5b50505050600060146040516104bc90610a68565b908152602001604051809103906000f0801580156104de573d6000803e3d6000fd5b5060405163afe29f7160e01b8152601960048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610529573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054d9190610a75565b5060408051633b756e9b60e11b81529051600080516020610ea1833981519152916376eadd3691600480830192600092919082900301818387803b15801561059457600080fd5b505af11580156105a8573d6000803e3d6000fd5b505050505050565b60008054610100900460ff16156105d05750600054610100900460ff1690565b6000600080516020610ea18339815191523b156106ca5760408051600080516020610ea1833981519152602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610652917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ac9565b60408051601f198184030181529082905261066c91610aed565b6000604051808303816000865af19150503d80600081146106a9576040519150601f19603f3d011682016040523d82523d6000602084013e6106ae565b606091505b50915050808060200190518101906106c69190610b00565b9150505b919050565b600854604051637fec2a8d60e01b81526001600160a01b039091166004820152600080516020610ea183398151915290637fec2a8d90602401600060405180830381600087803b15801561072257600080fd5b505af1158015610736573d6000803e3d6000fd5b505050506000600a60405161074a90610a68565b908152602001604051809103906000f08015801561076c573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600160048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af11580156107b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107db9190610a75565b5060408051633b756e9b60e11b81529051600080516020610ea1833981519152916376eadd3691600480830192600092919082900301818387803b15801561082257600080fd5b505af1158015610836573d6000803e3d6000fd5b5050505050565b808214610964577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108ae9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610964610968565b5050565b600080516020610ea18339815191523b15610a575760408051600080516020610ea1833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109f69291602001610ac9565b60408051601f1981840301815290829052610a1091610aed565b6000604051808303816000865af19150503d8060008114610a4d576040519150601f19603f3d011682016040523d82523d6000602084013e610a52565b606091505b505050505b6000805461ff001916610100179055565b61037e80610b2383390190565b600060208284031215610a8757600080fd5b5051919050565b6000815160005b81811015610aaf5760208185018101518683015201610a95565b81811115610abe576000828601525b509290920192915050565b6001600160e01b0319831681526000610ae56004830184610a8e565b949350505050565b6000610af98284610a8e565b9392505050565b600060208284031215610b1257600080fd5b81518015158114610af957600080fdfe60806040526000805460ff1916600117905534801561001d57600080fd5b5060405161037e38038061037e83398101604081905261003c91610044565b60015561005d565b60006020828403121561005657600080fd5b5051919050565b6103128061006c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d414610098575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461022f565b6100a5565b610088610104565b6040519015158152602001610064565b6000546100889060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b906100f6906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60008054610100900460ff16156101245750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561022a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101b2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610283565b60408051601f19818403018152908290526101cc916102a7565b6000604051808303816000865af19150503d8060008114610209576040519150601f19603f3d011682016040523d82523d6000602084013e61020e565b606091505b509150508080602001905181019061022691906102ba565b9150505b919050565b60006020828403121561024157600080fd5b5035919050565b6000815160005b81811015610269576020818501810151868301520161024f565b81811115610278576000828601525b509290920192915050565b6001600160e01b031983168152600061029f6004830184610248565b949350505050565b60006102b38284610248565b9392505050565b6000602082840312156102cc57600080fd5b815180151581146102b357600080fdfea2646970667358221220cf7517df20a217a83ffd2ae9cc691adbe79f6a831c1449270897f25e247e94c564736f6c634300080d00330000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da264697066735822122014e3576661c69e26635d61ca7f1f7b6a9ad677b1b5362811279d4ba14433067064736f6c634300080d0033" ) )
      
    
    syntax Field ::= BroadcastTestField
    
    syntax BroadcastTestField ::= "IS_TEST" [symbol(), klabel(field_BroadcastTest_IS_TEST)]
    
    syntax BroadcastTestField ::= "_failed" [symbol(), klabel(field_BroadcastTest__failed)]
    
    syntax BroadcastTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BroadcastTest_IS_SCRIPT)]
    
    syntax BroadcastTestField ::= "stdstore" [symbol(), klabel(field_BroadcastTest_stdstore)]
    
    syntax BroadcastTestField ::= "ACCOUNT_A" [symbol(), klabel(field_BroadcastTest_ACCOUNT_A)]
    
    syntax BroadcastTestField ::= "ACCOUNT_B" [symbol(), klabel(field_BroadcastTest_ACCOUNT_B)]
    
    rule  ( #loc ( BroadcastTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( BroadcastTest . _failed ) => 0 )
      
    
    rule  ( #loc ( BroadcastTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( BroadcastTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( BroadcastTest . ACCOUNT_A ) => 8 )
      
    
    rule  ( #loc ( BroadcastTest . ACCOUNT_B ) => 9 )
      
    
    syntax ByteArray ::= BroadcastTestContract "." BroadcastTestMethod [function(), klabel(method_BroadcastTest)]
    
    syntax BroadcastTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_BroadcastTest_IS_SCRIPT)]
    
    syntax BroadcastTestMethod ::= "IS_TEST" "(" ")" [klabel(method_BroadcastTest_IS_TEST)]
    
    syntax BroadcastTestMethod ::= "deployNoArgs" "(" ")" [klabel(method_BroadcastTest_deployNoArgs)]
    
    syntax BroadcastTestMethod ::= "deployOther" "(" ")" [klabel(method_BroadcastTest_deployOther)]
    
    syntax BroadcastTestMethod ::= "failed" "(" ")" [klabel(method_BroadcastTest_failed)]
    
    syntax BroadcastTestMethod ::= "setUp" "(" ")" [klabel(method_BroadcastTest_setUp)]
    
    syntax BroadcastTestMethod ::= "testDeploy" "(" ")" [klabel(method_BroadcastTest_testDeploy)]
    
    syntax BroadcastTestMethod ::= "vm" "(" ")" [klabel(method_BroadcastTest_vm)]
    
    rule  ( BroadcastTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . deployNoArgs ( ) => #abiCallData ( "deployNoArgs" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . deployOther ( ) => #abiCallData ( "deployOther" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . testDeploy ( ) => #abiCallData ( "testDeploy" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "deployNoArgs" ) => 1902058844 )
      
    
    rule  ( selector ( "deployOther" ) => 4254441026 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testDeploy" ) => 894117685 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module CONTRACTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= ContractTestContract
    
    syntax ContractTestContract ::= "ContractTest" [klabel(contract_ContractTest)]
    
    rule  ( #binRuntime ( ContractTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a768463146100695780633f5a4a2a146100a1578063ba414fa6146100a9578063f8ccbf47146100c1578063fa7626d4146100d4575b600080fd5b005b610084737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100676100e3565b6100b16100ed565b6040519015158152602001610098565b6000546100b19062010000900460ff1681565b6000546100b19060ff1681565b565b6100e16001610218565b60008054610100900460ff161561010d5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102135760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161019b917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016103d6565b60408051601f19818403018152908290526101b5916103fa565b6000604051808303816000865af19150503d80600081146101f2576040519150601f19603f3d011682016040523d82523d6000602084013e6101f7565b606091505b509150508080602001905181019061020f919061040d565b9150505b919050565b8061028c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161027c9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a161028c61028f565b50565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561038a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261032992916020016103d6565b60408051601f1981840301815290829052610343916103fa565b6000604051808303816000865af19150503d8060008114610380576040519150601f19603f3d011682016040523d82523d6000602084013e610385565b606091505b505050505b6000805461ff001916610100179055565b6000815160005b818110156103bc57602081850181015186830152016103a2565b818111156103cb576000828601525b509290920192915050565b6001600160e01b03198316815260006103f2600483018461039b565b949350505050565b6000610406828461039b565b9392505050565b60006020828403121561041f57600080fd5b8151801515811461040657600080fdfea26469706673582212200b6257bd6e860413461ed224492a289d9cb85fd34b8d1a7618903e9fc8a3e5f364736f6c634300080d0033" ) )
      
    
    syntax Field ::= ContractTestField
    
    syntax ContractTestField ::= "IS_TEST" [symbol(), klabel(field_ContractTest_IS_TEST)]
    
    syntax ContractTestField ::= "_failed" [symbol(), klabel(field_ContractTest__failed)]
    
    syntax ContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractTest_IS_SCRIPT)]
    
    syntax ContractTestField ::= "stdstore" [symbol(), klabel(field_ContractTest_stdstore)]
    
    rule  ( #loc ( ContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( ContractTest . _failed ) => 0 )
      
    
    rule  ( #loc ( ContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( ContractTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= ContractTestContract "." ContractTestMethod [function(), klabel(method_ContractTest)]
    
    syntax ContractTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_ContractTest_IS_SCRIPT)]
    
    syntax ContractTestMethod ::= "IS_TEST" "(" ")" [klabel(method_ContractTest_IS_TEST)]
    
    syntax ContractTestMethod ::= "failed" "(" ")" [klabel(method_ContractTest_failed)]
    
    syntax ContractTestMethod ::= "setUp" "(" ")" [klabel(method_ContractTest_setUp)]
    
    syntax ContractTestMethod ::= "testExample" "(" ")" [klabel(method_ContractTest_testExample)]
    
    syntax ContractTestMethod ::= "vm" "(" ")" [klabel(method_ContractTest_vm)]
    
    rule  ( ContractTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( ContractTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( ContractTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( ContractTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( ContractTest . testExample ( ) => #abiCallData ( "testExample" , .TypedArgs ) )
      
    
    rule  ( ContractTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testExample" ) => 1062881834 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module CONTRACTBTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= ContractBTestContract
    
    syntax ContractBTestContract ::= "ContractBTest" [klabel(contract_ContractBTest)]
    
    rule  ( #binRuntime ( ContractBTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80633ce7a75c1161005b5780633ce7a75c146100e1578063ba414fa6146100e9578063f8ccbf4714610101578063fa7626d41461011457600080fd5b80630a9254e41461008d5780632f6b04ac146100995780633790444c146100a15780633a768463146100a9575b600080fd5b610097602a600855565b005b610097610121565b610097610130565b6100c4737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100976101ee565b6100f1610201565b60405190151581526020016100d8565b6000546100f19062010000900460ff1681565b6000546100f19060ff1681565b61012e600854602a61032c565b565b60405160116024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb39060440160408051601f198184030181529181526020820180516001600160e01b0316634e487b7160e01b1790525160e083901b6001600160e01b03191681526101a29190600401610593565b600060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b50505050602b600860008282546101e791906105c6565b9091555050565b602b600860008282546101e791906105c6565b60008054610100900460ff16156102215750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156103275760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916102af917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016105eb565b60408051601f19818403018152908290526102c99161061c565b6000604051808303816000865af19150503d8060008114610306576040519150601f19603f3d011682016040523d82523d6000602084013e61030b565b606091505b50915050808060200190518101906103239190610638565b9150505b919050565b808214610453577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161039d9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610453610457565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105525760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526104f192916020016105eb565b60408051601f198184030181529082905261050b9161061c565b6000604051808303816000865af19150503d8060008114610548576040519150601f19603f3d011682016040523d82523d6000602084013e61054d565b606091505b505050505b6000805461ff001916610100179055565b60005b8381101561057e578181015183820152602001610566565b8381111561058d576000848401525b50505050565b60208152600082518060208401526105b2816040850160208701610563565b601f01601f19169190910160400192915050565b6000828210156105e657634e487b7160e01b600052601160045260246000fd5b500390565b6001600160e01b031983168152815160009061060e816004850160208701610563565b919091016004019392505050565b6000825161062e818460208701610563565b9190910192915050565b60006020828403121561064a57600080fd5b8151801515811461065a57600080fd5b939250505056fea2646970667358221220dc018407c547a1955db12d3eef7056431f46d091289dca1efb146347a0d262eb64736f6c634300080d0033" ) )
      
    
    syntax Field ::= ContractBTestField
    
    syntax ContractBTestField ::= "IS_TEST" [symbol(), klabel(field_ContractBTest_IS_TEST)]
    
    syntax ContractBTestField ::= "_failed" [symbol(), klabel(field_ContractBTest__failed)]
    
    syntax ContractBTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractBTest_IS_SCRIPT)]
    
    syntax ContractBTestField ::= "stdstore" [symbol(), klabel(field_ContractBTest_stdstore)]
    
    syntax ContractBTestField ::= "testNumber" [symbol(), klabel(field_ContractBTest_testNumber)]
    
    rule  ( #loc ( ContractBTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( ContractBTest . _failed ) => 0 )
      
    
    rule  ( #loc ( ContractBTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( ContractBTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( ContractBTest . testNumber ) => 8 )
      
    
    syntax ByteArray ::= ContractBTestContract "." ContractBTestMethod [function(), klabel(method_ContractBTest)]
    
    syntax ContractBTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_ContractBTest_IS_SCRIPT)]
    
    syntax ContractBTestMethod ::= "IS_TEST" "(" ")" [klabel(method_ContractBTest_IS_TEST)]
    
    syntax ContractBTestMethod ::= "failed" "(" ")" [klabel(method_ContractBTest_failed)]
    
    syntax ContractBTestMethod ::= "setUp" "(" ")" [klabel(method_ContractBTest_setUp)]
    
    syntax ContractBTestMethod ::= "testCannotSubtract43" "(" ")" [klabel(method_ContractBTest_testCannotSubtract43)]
    
    syntax ContractBTestMethod ::= "testFailSubtract43" "(" ")" [klabel(method_ContractBTest_testFailSubtract43)]
    
    syntax ContractBTestMethod ::= "testNumberIs42" "(" ")" [klabel(method_ContractBTest_testNumberIs42)]
    
    syntax ContractBTestMethod ::= "vm" "(" ")" [klabel(method_ContractBTest_vm)]
    
    rule  ( ContractBTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . testCannotSubtract43 ( ) => #abiCallData ( "testCannotSubtract43" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . testFailSubtract43 ( ) => #abiCallData ( "testFailSubtract43" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . testNumberIs42 ( ) => #abiCallData ( "testNumberIs42" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testCannotSubtract43" ) => 932201548 )
      
    
    rule  ( selector ( "testFailSubtract43" ) => 1021814620 )
      
    
    rule  ( selector ( "testNumberIs42" ) => 795542700 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module DEALTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= DealTestContract
    
    syntax DealTestContract ::= "DealTest" [klabel(contract_DealTest)]
    
    rule  ( #binRuntime ( DealTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80633a7684631461005c578063950b054e14610094578063ba414fa6146100a9578063f8ccbf47146100c1578063fa7626d4146100d4575b600080fd5b610077737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a76100a2366004610500565b6100e1565b005b6100b161019b565b604051901515815260200161008b565b6000546100b19062010000900460ff1681565b6000546100b19060ff1681565b60006040516100ef906104f4565b604051809103906000f08015801561010b573d6000803e3d6000fd5b5060405163c88a5e6d60e01b81526001600160a01b038216600482015260248101849052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d90604401600060405180830381600087803b15801561016b57600080fd5b505af115801561017f573d6000803e3d6000fd5b50505050610197816001600160a01b031631836102c6565b5050565b60008054610100900460ff16156101bb5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102c15760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610249917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610554565b60408051601f198184030181529082905261026391610578565b6000604051808303816000865af19150503d80600081146102a0576040519150601f19603f3d011682016040523d82523d6000602084013e6102a5565b606091505b50915050808060200190518101906102bd919061058b565b9150505b919050565b808214610197577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103379060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a1610197737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104e35760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526104829291602001610554565b60408051601f198184030181529082905261049c91610578565b6000604051808303816000865af19150503d80600081146104d9576040519150601f19603f3d011682016040523d82523d6000602084013e6104de565b606091505b505050505b6000805461ff001916610100179055565b605c806105ae83390190565b60006020828403121561051257600080fd5b5035919050565b6000815160005b8181101561053a5760208185018101518683015201610520565b81811115610549576000828601525b509290920192915050565b6001600160e01b03198316815260006105706004830184610519565b949350505050565b60006105848284610519565b9392505050565b60006020828403121561059d57600080fd5b8151801515811461058457600080fdfe6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220a69ca03b7fbbc0d7a5e6c4707c52740edac71ddc7b395b2c184b60b5497870e764736f6c634300080d0033a264697066735822122083b6df3853e42a458898e27c898631aca1390810955241b2de67c615489d866164736f6c634300080d0033" ) )
      
    
    syntax Field ::= DealTestField
    
    syntax DealTestField ::= "IS_TEST" [symbol(), klabel(field_DealTest_IS_TEST)]
    
    syntax DealTestField ::= "_failed" [symbol(), klabel(field_DealTest__failed)]
    
    syntax DealTestField ::= "IS_SCRIPT" [symbol(), klabel(field_DealTest_IS_SCRIPT)]
    
    syntax DealTestField ::= "stdstore" [symbol(), klabel(field_DealTest_stdstore)]
    
    rule  ( #loc ( DealTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( DealTest . _failed ) => 0 )
      
    
    rule  ( #loc ( DealTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( DealTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= DealTestContract "." DealTestMethod [function(), klabel(method_DealTest)]
    
    syntax DealTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_DealTest_IS_SCRIPT)]
    
    syntax DealTestMethod ::= "IS_TEST" "(" ")" [klabel(method_DealTest_IS_TEST)]
    
    syntax DealTestMethod ::= "failed" "(" ")" [klabel(method_DealTest_failed)]
    
    syntax DealTestMethod ::= "testDeal" "(" Int ")" [klabel(method_DealTest_testDeal)]
    
    syntax DealTestMethod ::= "vm" "(" ")" [klabel(method_DealTest_vm)]
    
    rule  ( DealTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( DealTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( DealTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( DealTest . testDeal ( V0_value ) => #abiCallData ( "testDeal" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( DealTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testDeal" ) => 2500527438 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module TOKEN-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= TokenContract
    
    syntax TokenContract ::= "Token" [klabel(contract_Token)]
    
    rule  ( #binRuntime ( Token ) => #parseByteStack ( "0x6080604052600080fdfea2646970667358221220a69ca03b7fbbc0d7a5e6c4707c52740edac71ddc7b395b2c184b60b5497870e764736f6c634300080d0033" ) )
      

endmodule

module EMITCONTRACTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= EmitContractTestContract
    
    syntax EmitContractTestContract ::= "EmitContractTest" [klabel(contract_EmitContractTest)]
    
    rule  ( #binRuntime ( EmitContractTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063e3d959391161005b578063e3d95939146100dc578063f8ccbf47146100e4578063fa7626d4146100f7578063fd047e0d1461010457600080fd5b80633a768463146100825780638e30cd39146100ba578063ba414fa6146100c4575b600080fd5b61009d737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c261010c565b005b6100cc610245565b60405190151581526020016100b1565b6100c2610370565b6000546100cc9062010000900460ff1681565b6000546100cc9060ff1681565b6100c26103fa565b600060405161011a906104da565b604051809103906000f080158015610136573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201819052600060448301526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c2906084015b600060405180830381600087803b15801561019d57600080fd5b505af11580156101b1573d6000803e3d6000fd5b505060405161053980825292503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3806001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561022a57600080fd5b505af115801561023e573d6000803e3d6000fd5b5050505050565b60008054610100900460ff16156102655750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561036b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916102f3917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610521565b60408051601f198184030181529082905261030d91610545565b6000604051808303816000865af19150503d806000811461034a576040519150601f19603f3d011682016040523d82523d6000602084013e61034f565b606091505b50915050808060200190518101906103679190610558565b9150505b919050565b600060405161037e906104da565b604051809103906000f08015801561039a573d6000803e3d6000fd5b506040516381bad6f360e01b8152600160048201819052602482018190526000604483015260648201526001600160a01b0382166084820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906381bad6f39060a401610183565b6000604051610408906104da565b604051809103906000f080158015610424573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201526000604482018190526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c290608401600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b505060405161053a815261053992503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016101e7565b60c48061057b83390190565b6000815160005b8181101561050757602081850181015186830152016104ed565b81811115610516576000828601525b509290920192915050565b6001600160e01b031983168152600061053d60048301846104e6565b949350505050565b600061055182846104e6565b9392505050565b60006020828403121561056a57600080fd5b8151801515811461055157600080fdfe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033a264697066735822122032858f22114bdac9bf14bcd2474d99bcb49de4ca39724595591f551c36852b0464736f6c634300080d0033" ) )
      
    
    syntax Field ::= EmitContractTestField
    
    syntax EmitContractTestField ::= "IS_TEST" [symbol(), klabel(field_EmitContractTest_IS_TEST)]
    
    syntax EmitContractTestField ::= "_failed" [symbol(), klabel(field_EmitContractTest__failed)]
    
    syntax EmitContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EmitContractTest_IS_SCRIPT)]
    
    syntax EmitContractTestField ::= "stdstore" [symbol(), klabel(field_EmitContractTest_stdstore)]
    
    rule  ( #loc ( EmitContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( EmitContractTest . _failed ) => 0 )
      
    
    rule  ( #loc ( EmitContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( EmitContractTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= EmitContractTestContract "." EmitContractTestMethod [function(), klabel(method_EmitContractTest)]
    
    syntax EmitContractTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_EmitContractTest_IS_SCRIPT)]
    
    syntax EmitContractTestMethod ::= "IS_TEST" "(" ")" [klabel(method_EmitContractTest_IS_TEST)]
    
    syntax EmitContractTestMethod ::= "failed" "(" ")" [klabel(method_EmitContractTest_failed)]
    
    syntax EmitContractTestMethod ::= "testExpectEmit" "(" ")" [klabel(method_EmitContractTest_testExpectEmit)]
    
    syntax EmitContractTestMethod ::= "testExpectEmitCheckEmitter" "(" ")" [klabel(method_EmitContractTest_testExpectEmitCheckEmitter)]
    
    syntax EmitContractTestMethod ::= "testExpectEmitDoNotCheckData" "(" ")" [klabel(method_EmitContractTest_testExpectEmitDoNotCheckData)]
    
    syntax EmitContractTestMethod ::= "vm" "(" ")" [klabel(method_EmitContractTest_vm)]
    
    rule  ( EmitContractTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . testExpectEmit ( ) => #abiCallData ( "testExpectEmit" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . testExpectEmitCheckEmitter ( ) => #abiCallData ( "testExpectEmitCheckEmitter" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . testExpectEmitDoNotCheckData ( ) => #abiCallData ( "testExpectEmitDoNotCheckData" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testExpectEmit" ) => 2385562937 )
      
    
    rule  ( selector ( "testExpectEmitCheckEmitter" ) => 3822672185 )
      
    
    rule  ( selector ( "testExpectEmitDoNotCheckData" ) => 4244930061 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module ENVTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= EnvTestContract
    
    syntax EnvTestContract ::= "EnvTest" [klabel(contract_EnvTest)]
    
    rule  ( #binRuntime ( EnvTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80636c627094116100ad578063ba414fa611610071578063ba414fa6146101ba578063c45db9c5146101d2578063d5d09187146101da578063f8ccbf47146101e2578063fa7626d4146101f557600080fd5b80636c627094146101925780637b290a421461019a5780637cebe429146101a25780639a96435d146101aa578063aaa3bd3b146101b257600080fd5b80633a768463116100f45780633a768463146101405780633b4996ff14610172578063416c9f6a1461017a57806355151e531461018257806355c7785a1461018a57600080fd5b80630a9254e4146101265780631a9ca1b61461012857806320e3be7f14610130578063354e99c814610138575b600080fd5b005b610126610202565b61012661033f565b6101266104f8565b6101556000805160206122c483398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b61012661062b565b610126610746565b6101266108a1565b6101266109c9565b610126610b26565b610126610c03565b610126610ce5565b610126610e8f565b610126611132565b6101c261127b565b6040519015158152602001610169565b61012661139a565b61012661152c565b6000546101c29062010000900460ff1681565b6000546101c29060ff1681565b600060405180604001604052806009815260200168494e545f56414c554560b81b815250905060006040518060800160405280604e8152602001612419604e9139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee906102799085908590600401611b89565b600060405180830381600087803b15801561029357600080fd5b505af11580156102a7573d6000803e3d6000fd5b505060405163892a0c6160e01b8152600160ff1b9250600091506000805160206122c48339815191529063892a0c61906102e5908790600401611bb7565b6020604051808303816000875af1158015610304573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103289190611bd1565b905081811461033957610339611bea565b50505050565b60006040518060400160405280600b81526020016a55494e545f56414c55455360a81b8152509050600060405180608001604052806044815260200161246760449139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee906103b89085908590600401611b89565b600060405180830381600087803b1580156103d257600080fd5b505af11580156103e6573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602080830191909152825180840184526000808252918101829052925163f3dec09960e01b81529194509192506000805160206122c48339815191529063f3dec0999061044d9088908790600401611b89565b6000604051808303816000875af115801561046c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104949190810190611c6b565b9050816040516020016104a79190611d01565b60405160208183030381529060405280519060200120816040516020016104ce9190611d35565b60405160208183030381529060405280519060200120146104f1576104f1611bea565b5050505050565b604080518082018252600a815269424f4f4c5f56414c554560b01b602080830191909152825180840184526004808252637472756560e01b928201929092529251631eac91f760e11b81529192916000805160206122c483398151915291633d5923ee9161056a918691869101611b89565b600060405180830381600087803b15801561058457600080fd5b505af1158015610598573d6000803e3d6000fd5b5050604051637ed1ec7d60e01b815260019250600091506000805160206122c483398151915290637ed1ec7d906105d3908790600401611bb7565b6020604051808303816000875af11580156105f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106169190611d7b565b90508115158115151461033957610339611bea565b60006040518060400160405280600a815260200169494e545f56414c55455360b01b815250905060006040518060c001604052806087815260200161239260879139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee906106a39085908590600401611b89565b600060405180830381600087803b1580156106bd57600080fd5b505af11580156106d1573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452600160ff1b81526001600160ff1b03918101919091529151630421811560e41b81529093509091506000906000805160206122c48339815191529063421811509061044d9088908790600401611b89565b604080518082018252600c81526b535452494e475f56414c554560a01b60208083019190915282518084018452600d81526c68656c6c6f2c20776f726c642160981b918101919091529151631eac91f760e11b81529091906000805160206122c483398151915290633d5923ee906107c49085908590600401611b89565b600060405180830381600087803b1580156107de57600080fd5b505af11580156107f2573d6000803e3d6000fd5b5050604080518082018252600d81526c68656c6c6f2c20776f726c642160981b6020820152905163f877cb1960e01b8152909250600091506000805160206122c48339815191529063f877cb199061084e908790600401611bb7565b6000604051808303816000875af115801561086d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108959190810190611e02565b90506103398183611772565b60006040518060400160405280600e81526020016d425954455333325f56414c55455360901b815250905060006040518060600160405280602f81526020016122e4602f9139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee9061091d9085908590600401611b89565b600060405180830381600087803b15801561093757600080fd5b505af115801561094b573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b815260009181018290529251635af231c160e01b81529194509192506000805160206122c483398151915290635af231c19061044d9088908790600401611b89565b60006040518060400160405280600b81526020016a42595445535f56414c554560a81b815250905060006040518060600160405280602a8152602001612368602a9139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee90610a429085908590600401611b89565b600060405180830381600087803b158015610a5c57600080fd5b505af1158015610a70573d6000803e3d6000fd5b505060408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516326bdd78360e11b8152909250600091506000805160206122c483398151915290634d7baf0690610ad3908790600401611bb7565b6000604051808303816000875af1158015610af2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b1a9190810190611e02565b905061033981836118b3565b604080518082018252600d81526c425954455333325f56414c554560981b602080830191909152825180840184526004808252630307830360e41b928201929092529251631eac91f760e11b81529192916000805160206122c483398151915291633d5923ee91610b9b918691869101611b89565b600060405180830381600087803b158015610bb557600080fd5b505af1158015610bc9573d6000803e3d6000fd5b5050604051634bca482160e11b8152600092508291506000805160206122c4833981519152906397949042906102e5908790600401611bb7565b60006040518060400160405280600a81526020016955494e545f56414c554560b01b815250905060006040518060800160405280604e81526020016124ab604e9139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee90610c7b9085908590600401611b89565b600060405180830381600087803b158015610c9557600080fd5b505af1158015610ca9573d6000803e3d6000fd5b505060405163c1978d1f60e01b81526000199250600091506000805160206122c48339815191529063c1978d1f906102e5908790600401611bb7565b604080518082018252600b81526a424f4f4c5f56414c55455360a81b602080830191909152825180840184526015815274747275652c66616c73652c747275652c66616c736560581b918101919091529151631eac91f760e11b81529091906000805160206122c483398151915290633d5923ee90610d6a9085908590600401611b89565b600060405180830381600087803b158015610d8457600080fd5b505af1158015610d98573d6000803e3d6000fd5b50506040805180820182526001808252600b60fa1b602080840191909152835160808101855282815260009181018290528085019290925260608201819052925163aaaddeaf60e01b815291945092506000805160206122c48339815191529063aaaddeaf90610e0e9088908790600401611b89565b6000604051808303816000875af1158015610e2d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e559190810190611e37565b905081604051602001610e689190611ec4565b60405160208183030381529060405280519060200120816040516020016104ce9190611efa565b60006040518060400160405280600c81526020016b42595445535f56414c55455360a01b815250905060006040518060600160405280602f81526020016122e4602f9139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee90610f099085908590600401611b89565b600060405180830381600087803b158015610f2357600080fd5b505af1158015610f37573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602082015281516002808252606082019093529093506000925090816020015b6060815260200190600190039081610f6b579050509050604051806040016040528060148152602001737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b81525081600081518110610fc257610fc2611f26565b6020026020010181905250604051806040016040528060018152602001600081525081600181518110610ff757610ff7611f26565b602090810291909101015260405163ddc2651b60e01b81526000906000805160206122c48339815191529063ddc2651b906110389088908790600401611b89565b6000604051808303816000875af1158015611057573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261107f9190810190611f3c565b905060005b825181101561112a5782818151811061109f5761109f611f26565b60200260200101516040516020016110b79190611fed565b604051602081830303815290604052805190602001208282815181106110df576110df611f26565b60200260200101516040516020016110f79190611fed565b604051602081830303815290604052805190602001201461111a5761111a611bea565b61112381612009565b9050611084565b505050505050565b60006040518060400160405280600d81526020016c414444524553535f56414c554560981b815250905060006040518060600160405280602a8152602001612368602a9139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee906111ad9085908590600401611b89565b600060405180830381600087803b1580156111c757600080fd5b505af11580156111db573d6000803e3d6000fd5b505060405163350d56bf60e01b81526000805160206122c4833981519152925060009150829063350d56bf90611215908790600401611bb7565b6020604051808303816000875af1158015611234573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112589190612047565b9050816001600160a01b0316816001600160a01b03161461033957610339611bea565b60008054610100900460ff161561129b5750600054610100900460ff1690565b60006000805160206122c48339815191523b1561139557604080516000805160206122c4833981519152602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161131d917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001612062565b60408051601f198184030181529082905261133791611fed565b6000604051808303816000865af19150503d8060008114611374576040519150601f19603f3d011682016040523d82523d6000602084013e611379565b606091505b50915050808060200190518101906113919190611d7b565b9150505b919050565b60006040518060400160405280600e81526020016d414444524553535f56414c55455360901b8152509050600060405180608001604052806055815260200161231360559139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee906114169085908590600401611b89565b600060405180830381600087803b15801561143057600080fd5b505af1158015611444573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602080830191909152825180840184526000805160206122c483398151915280825260009282018390529351635698dcfd60e11b81529295509350919063ad31b9fa906114ab9088908790600401611b89565b6000604051808303816000875af11580156114ca573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526114f29190810190612093565b9050816040516020016115059190612120565b60405160208183030381529060405280519060200120816040516020016104ce919061214e565b60006040518060400160405280600d81526020016c535452494e475f56414c55455360981b8152509050600060405180606001604052806038815260200161228c60389139604051631eac91f760e11b81529091506000805160206122c483398151915290633d5923ee906115a79085908590600401611b89565b600060405180830381600087803b1580156115c157600080fd5b505af11580156115d5573d6000803e3d6000fd5b505050506000604051806040016040528060018152602001601f60fa1b8152509050600060405180604001604052806040518060400160405280600d81526020016c68656c6c6f2c20776f726c642160981b81525081526020016040518060600160405280602a8152602001612368602a913990526040516314b02bc960e01b81529091506000906000805160206122c4833981519152906314b02bc9906116839088908790600401611b89565b6000604051808303816000875af11580156116a2573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526116ca9190810190612181565b905060005b600281101561112a578281600281106116ea576116ea611f26565b60200201516040516020016116ff9190611fed565b6040516020818303038152906040528051906020012082828151811061172757611727611f26565b602002602001015160405160200161173f9190611fed565b604051602081830303815290604052805190602001201461176257611762611bea565b61176b81612009565b90506116cf565b806040516020016117839190611fed565b60405160208183030381529060405280519060200120826040516020016117aa9190611fed565b60405160208183030381529060405280519060200120146118af577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516118319060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516118689190612225565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838260405161189f9190612261565b60405180910390a16118af6118bd565b5050565b6118af82826119bd565b6000805160206122c48339815191523b156119ac57604080516000805160206122c4833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261194b9291602001612062565b60408051601f198184030181529082905261196591611fed565b6000604051808303816000865af19150503d80600081146119a2576040519150601f19603f3d011682016040523d82523d6000602084013e6119a7565b606091505b505050505b6000805461ff001916610100179055565b6119c78282611aa4565b6118af577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051611a369060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf1881604051611a6d9190612225565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405161189f9190612261565b805182516001919003611b275760005b8351811015611b2157828181518110611acf57611acf611f26565b602001015160f81c60f81b6001600160f81b031916848281518110611af657611af6611f26565b01602001516001600160f81b03191614611b0f57600091505b80611b1981612009565b915050611ab4565b50611b2b565b5060005b92915050565b60005b83811015611b4c578181015183820152602001611b34565b838111156103395750506000910152565b60008151808452611b75816020860160208601611b31565b601f01601f19169290920160200192915050565b604081526000611b9c6040830185611b5d565b8281036020840152611bae8185611b5d565b95945050505050565b602081526000611bca6020830184611b5d565b9392505050565b600060208284031215611be357600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611c3f57611c3f611c00565b604052919050565b600067ffffffffffffffff821115611c6157611c61611c00565b5060051b60200190565b60006020808385031215611c7e57600080fd5b825167ffffffffffffffff811115611c9557600080fd5b8301601f81018513611ca657600080fd5b8051611cb9611cb482611c47565b611c16565b81815260059190911b82018301908381019087831115611cd857600080fd5b928401925b82841015611cf657835182529284019290840190611cdd565b979650505050505050565b60008183825b6002811015611d26578151835260209283019290910190600101611d07565b50505060408201905092915050565b815160009082906020808601845b83811015611d5f57815185529382019390820190600101611d43565b50929695505050505050565b8051801515811461139557600080fd5b600060208284031215611d8d57600080fd5b611bca82611d6b565b600082601f830112611da757600080fd5b815167ffffffffffffffff811115611dc157611dc1611c00565b611dd4601f8201601f1916602001611c16565b818152846020838601011115611de957600080fd5b611dfa826020830160208701611b31565b949350505050565b600060208284031215611e1457600080fd5b815167ffffffffffffffff811115611e2b57600080fd5b611dfa84828501611d96565b60006020808385031215611e4a57600080fd5b825167ffffffffffffffff811115611e6157600080fd5b8301601f81018513611e7257600080fd5b8051611e80611cb482611c47565b81815260059190911b82018301908381019087831115611e9f57600080fd5b928401925b82841015611cf657611eb584611d6b565b82529284019290840190611ea4565b60008183825b6004811015611eeb5781511515835260209283019290910190600101611eca565b50505060808201905092915050565b815160009082906020808601845b83811015611d5f578151151585529382019390820190600101611f08565b634e487b7160e01b600052603260045260246000fd5b60006020808385031215611f4f57600080fd5b825167ffffffffffffffff80821115611f6757600080fd5b818501915085601f830112611f7b57600080fd5b8151611f89611cb482611c47565b81815260059190911b83018401908481019088831115611fa857600080fd5b8585015b83811015611fe057805185811115611fc45760008081fd5b611fd28b89838a0101611d96565b845250918601918601611fac565b5098975050505050505050565b60008251611fff818460208701611b31565b9190910192915050565b60006001820161202957634e487b7160e01b600052601160045260246000fd5b5060010190565b80516001600160a01b038116811461139557600080fd5b60006020828403121561205957600080fd5b611bca82612030565b6001600160e01b0319831681528151600090612085816004850160208701611b31565b919091016004019392505050565b600060208083850312156120a657600080fd5b825167ffffffffffffffff8111156120bd57600080fd5b8301601f810185136120ce57600080fd5b80516120dc611cb482611c47565b81815260059190911b820183019083810190878311156120fb57600080fd5b928401925b82841015611cf65761211184612030565b82529284019290840190612100565b60008183825b6002811015611d265781516001600160a01b0316835260209283019290910190600101612126565b815160009082906020808601845b83811015611d5f5781516001600160a01b03168552938201939082019060010161215c565b6000602080838503121561219457600080fd5b825167ffffffffffffffff808211156121ac57600080fd5b818501915085601f8301126121c057600080fd5b81516121ce611cb482611c47565b81815260059190911b830184019084810190888311156121ed57600080fd5b8585015b83811015611fe0578051858111156122095760008081fd5b6122178b89838a0101611d96565b8452509186019186016121f1565b60408152600061224f60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b8281036020840152611dfa8185611b5d565b60408152600061224f60408301600a815269080808081058dd1d585b60b21b60208201526040019056fe68656c6c6f2c20776f726c64217c3078373130393730394543666139316138303632366646333938394436386636374635623144443132440000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d3078373130393730394543666139316138303632366646333938394436386636374635623144443132442c307830303078373130393730394543666139316138303632366646333938394436386636374635623144443132442c3078303030303030303030303030303030303030303030303030303030303030303030303030303030303078373130393730394543666139316138303632366646333938394436386636374635623144443132442d3078383030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302c2b3078374646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646462d3537383936303434363138363538303937373131373835343932353034333433393533393236363334393932333332383230323832303139373238373932303033393536353634383139393638302c307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030313135373932303839323337333136313935343233353730393835303038363837393037383533323639393834363635363430353634303339343537353834303037393133313239363339393335a2646970667358221220a321840d8fc3373f59d27ff03e97d4c94feb496df2f4941d58eed5b86e794bf364736f6c634300080d0033" ) )
      
    
    syntax Field ::= EnvTestField
    
    syntax EnvTestField ::= "IS_TEST" [symbol(), klabel(field_EnvTest_IS_TEST)]
    
    syntax EnvTestField ::= "_failed" [symbol(), klabel(field_EnvTest__failed)]
    
    syntax EnvTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EnvTest_IS_SCRIPT)]
    
    syntax EnvTestField ::= "stdstore" [symbol(), klabel(field_EnvTest_stdstore)]
    
    rule  ( #loc ( EnvTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( EnvTest . _failed ) => 0 )
      
    
    rule  ( #loc ( EnvTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( EnvTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= EnvTestContract "." EnvTestMethod [function(), klabel(method_EnvTest)]
    
    syntax EnvTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_EnvTest_IS_SCRIPT)]
    
    syntax EnvTestMethod ::= "IS_TEST" "(" ")" [klabel(method_EnvTest_IS_TEST)]
    
    syntax EnvTestMethod ::= "failed" "(" ")" [klabel(method_EnvTest_failed)]
    
    syntax EnvTestMethod ::= "setUp" "(" ")" [klabel(method_EnvTest_setUp)]
    
    syntax EnvTestMethod ::= "testEnvAddress" "(" ")" [klabel(method_EnvTest_testEnvAddress)]
    
    syntax EnvTestMethod ::= "testEnvAddresseArray" "(" ")" [klabel(method_EnvTest_testEnvAddresseArray)]
    
    syntax EnvTestMethod ::= "testEnvBool" "(" ")" [klabel(method_EnvTest_testEnvBool)]
    
    syntax EnvTestMethod ::= "testEnvBoolArray" "(" ")" [klabel(method_EnvTest_testEnvBoolArray)]
    
    syntax EnvTestMethod ::= "testEnvBytes" "(" ")" [klabel(method_EnvTest_testEnvBytes)]
    
    syntax EnvTestMethod ::= "testEnvBytes32" "(" ")" [klabel(method_EnvTest_testEnvBytes32)]
    
    syntax EnvTestMethod ::= "testEnvBytes32Array" "(" ")" [klabel(method_EnvTest_testEnvBytes32Array)]
    
    syntax EnvTestMethod ::= "testEnvBytesArray" "(" ")" [klabel(method_EnvTest_testEnvBytesArray)]
    
    syntax EnvTestMethod ::= "testEnvInt" "(" ")" [klabel(method_EnvTest_testEnvInt)]
    
    syntax EnvTestMethod ::= "testEnvIntArray" "(" ")" [klabel(method_EnvTest_testEnvIntArray)]
    
    syntax EnvTestMethod ::= "testEnvString" "(" ")" [klabel(method_EnvTest_testEnvString)]
    
    syntax EnvTestMethod ::= "testEnvStringArray" "(" ")" [klabel(method_EnvTest_testEnvStringArray)]
    
    syntax EnvTestMethod ::= "testEnvUInt" "(" ")" [klabel(method_EnvTest_testEnvUInt)]
    
    syntax EnvTestMethod ::= "testEnvUIntArray" "(" ")" [klabel(method_EnvTest_testEnvUIntArray)]
    
    syntax EnvTestMethod ::= "vm" "(" ")" [klabel(method_EnvTest_vm)]
    
    rule  ( EnvTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( EnvTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( EnvTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( EnvTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvAddress ( ) => #abiCallData ( "testEnvAddress" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvAddresseArray ( ) => #abiCallData ( "testEnvAddresseArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBool ( ) => #abiCallData ( "testEnvBool" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBoolArray ( ) => #abiCallData ( "testEnvBoolArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBytes ( ) => #abiCallData ( "testEnvBytes" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBytes32 ( ) => #abiCallData ( "testEnvBytes32" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBytes32Array ( ) => #abiCallData ( "testEnvBytes32Array" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBytesArray ( ) => #abiCallData ( "testEnvBytesArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvInt ( ) => #abiCallData ( "testEnvInt" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvIntArray ( ) => #abiCallData ( "testEnvIntArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvString ( ) => #abiCallData ( "testEnvString" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvStringArray ( ) => #abiCallData ( "testEnvStringArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvUInt ( ) => #abiCallData ( "testEnvUInt" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvUIntArray ( ) => #abiCallData ( "testEnvUIntArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testEnvAddress" ) => 2862857531 )
      
    
    rule  ( selector ( "testEnvAddresseArray" ) => 3294476741 )
      
    
    rule  ( selector ( "testEnvBool" ) => 894343624 )
      
    
    rule  ( selector ( "testEnvBoolArray" ) => 2095834153 )
      
    
    rule  ( selector ( "testEnvBytes" ) => 1439135834 )
      
    
    rule  ( selector ( "testEnvBytes32" ) => 1818390676 )
      
    
    rule  ( selector ( "testEnvBytes32Array" ) => 1427447379 )
      
    
    rule  ( selector ( "testEnvBytesArray" ) => 2593538909 )
      
    
    rule  ( selector ( "testEnvInt" ) => 446472630 )
      
    
    rule  ( selector ( "testEnvIntArray" ) => 994678527 )
      
    
    rule  ( selector ( "testEnvString" ) => 1097637738 )
      
    
    rule  ( selector ( "testEnvStringArray" ) => 3587215751 )
      
    
    rule  ( selector ( "testEnvUInt" ) => 2066287170 )
      
    
    rule  ( selector ( "testEnvUIntArray" ) => 551796351 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module ETCHTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= EtchTestContract
    
    syntax EtchTestContract ::= "EtchTest" [klabel(contract_EtchTest)]
    
    rule  ( #binRuntime ( EtchTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780631a9f8ff7146100715780633a76846314610079578063ba414fa6146100b1578063f8ccbf47146100c9578063fa7626d4146100dc575b600080fd5b61006f6100e9565b005b61006f610134565b610094737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b9610206565b60405190151581526020016100a8565b6000546100b99062010000900460ff1681565b6000546100b99060ff1681565b6040516100f5906105c6565b604051809103906000f080158015610111573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b600854604080516001600160a01b03909216803b838101602090810190935280845260009392909184918401903c604051635a6b63c160e11b8152909150600190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063b4d6c782906101a1908490869060040161062f565b600060405180830381600087803b1580156101bb57600080fd5b505af11580156101cf573d6000803e3d6000fd5b50505050610202816001600160a01b0316803b806020016040519081016040528181526000908060200190933c83610331565b5050565b60008054610100900460ff16156102265750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561032c5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916102b4917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161065b565b60408051601f19818403018152908290526102ce9161068c565b6000604051808303816000865af19150503d806000811461030b576040519150601f19603f3d011682016040523d82523d6000602084013e610310565b606091505b509150508080602001905181019061032891906106a8565b9150505b919050565b6102028282610340828261042d565b610202577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103af9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516103e691906106d1565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405161041d9190610705565b60405180910390a16102026104ba565b8051825160019190036104b05760005b83518110156104aa5782818151811061045857610458610739565b602001015160f81c60f81b6001600160f81b03191684828151811061047f5761047f610739565b01602001516001600160f81b0319161461049857600091505b806104a28161074f565b91505061043d565b506104b4565b5060005b92915050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105b55760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610554929160200161065b565b60408051601f198184030181529082905261056e9161068c565b6000604051808303816000865af19150503d80600081146105ab576040519150601f19603f3d011682016040523d82523d6000602084013e6105b0565b606091505b505050505b6000805461ff001916610100179055565b61019c8061077783390190565b60005b838110156105ee5781810151838201526020016105d6565b838111156105fd576000848401525b50505050565b6000815180845261061b8160208601602086016105d3565b601f01601f19169290920160200192915050565b6001600160a01b038316815260406020820181905260009061065390830184610603565b949350505050565b6001600160e01b031983168152815160009061067e8160048501602087016105d3565b919091016004019392505050565b6000825161069e8184602087016105d3565b9190910192915050565b6000602082840312156106ba57600080fd5b815180151581146106ca57600080fd5b9392505050565b60408152600a6040820152690808115e1c1958dd195960b21b60608201526080602082015260006106ca6080830184610603565b60408152600a604082015269080808081058dd1d585b60b21b60608201526080602082015260006106ca6080830184610603565b634e487b7160e01b600052603260045260246000fd5b60006001820161076f57634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5061017c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9059cbb14610030575b600080fd5b61004361003e3660046100c9565b610045565b005b610050338383610054565b5050565b6001600160a01b038316600090815260016020526040902054610078908290610117565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546100a890829061012e565b6001600160a01b039092166000908152600160205260409020919091555050565b600080604083850312156100dc57600080fd5b82356001600160a01b03811681146100f357600080fd5b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561012957610129610101565b500390565b6000821982111561014157610141610101565b50019056fea2646970667358221220e48b937e7c9104a0808e115af1ee42e958a0c671314391ceab78b4d1e9009fe964736f6c634300080d0033a26469706673582212208418ff3515ac6e223cc3ab8f2f7b2d0c3cafbe259bb1de08465e3da4637a3b2864736f6c634300080d0033" ) )
      
    
    syntax Field ::= EtchTestField
    
    syntax EtchTestField ::= "IS_TEST" [symbol(), klabel(field_EtchTest_IS_TEST)]
    
    syntax EtchTestField ::= "_failed" [symbol(), klabel(field_EtchTest__failed)]
    
    syntax EtchTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EtchTest_IS_SCRIPT)]
    
    syntax EtchTestField ::= "stdstore" [symbol(), klabel(field_EtchTest_stdstore)]
    
    syntax EtchTestField ::= "awesomeContract" [symbol(), klabel(field_EtchTest_awesomeContract)]
    
    rule  ( #loc ( EtchTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( EtchTest . _failed ) => 0 )
      
    
    rule  ( #loc ( EtchTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( EtchTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( EtchTest . awesomeContract ) => 8 )
      
    
    syntax ByteArray ::= EtchTestContract "." EtchTestMethod [function(), klabel(method_EtchTest)]
    
    syntax EtchTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_EtchTest_IS_SCRIPT)]
    
    syntax EtchTestMethod ::= "IS_TEST" "(" ")" [klabel(method_EtchTest_IS_TEST)]
    
    syntax EtchTestMethod ::= "failed" "(" ")" [klabel(method_EtchTest_failed)]
    
    syntax EtchTestMethod ::= "setUp" "(" ")" [klabel(method_EtchTest_setUp)]
    
    syntax EtchTestMethod ::= "testEtch" "(" ")" [klabel(method_EtchTest_testEtch)]
    
    syntax EtchTestMethod ::= "vm" "(" ")" [klabel(method_EtchTest_vm)]
    
    rule  ( EtchTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( EtchTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( EtchTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( EtchTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( EtchTest . testEtch ( ) => #abiCallData ( "testEtch" , .TypedArgs ) )
      
    
    rule  ( EtchTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testEtch" ) => 446664695 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module FFITEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= FfiTestContract
    
    syntax FfiTestContract ::= "FfiTest" [klabel(contract_FfiTest)]
    
    rule  ( #binRuntime ( FfiTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100925760003560e01c8063a2f6dab511610066578063a2f6dab5146100e9578063ba414fa6146100f1578063f5eaa12614610109578063f8ccbf4714610111578063fa7626d41461012457600080fd5b80623e1314146100975780630a9254e4146100a15780633a768463146100a9578063900127c6146100e1575b600080fd5b61009f610131565b005b61009f61036c565b6100c4737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f61041a565b61009f6105c7565b6100f961066d565b60405190151581526020016100d8565b61009f610798565b6000546100f99062010000900460ff1681565b6000546100f99060ff1681565b60408051600380825260808201909252600091816020015b6060815260200190600190039081610149579050509050604051806040016040528060048152602001636563686f60e01b8152508160008151811061019057610190610b67565b60200260200101819052506040518060400160405280600281526020016116b760f11b815250816001815181106101c9576101c9610b67565b602090810291909101810191909152604051737109709ecfa91a80626ff3989d68f67f5b1dd12d916371aad10d916102189101602080825260029082015261676d60f01b604082015260600190565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016102439190610bd9565b6000604051808303816000875af1158015610262573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261028a9190810190610c67565b8160028151811061029d5761029d610b67565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906389160467906102e2908590600401610cb8565b6000604051808303816000875af1158015610301573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103299190810190610c67565b90506000818060200190518101906103419190610c67565b90506103678160405180604001604052806002815260200161676d60f01b815250610904565b505050565b600060405180604001604052806003815260200162464f4f60e81b8152509050600060405180610100016040528060c28152602001610e2060c29139604051631eac91f760e11b8152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90633d5923ee906103e49085908590600401610d1a565b600060405180830381600087803b1580156103fe57600080fd5b505af1158015610412573d6000803e3d6000fd5b505050505050565b60408051600380825260808201909252600091816020015b6060815260200190600190039081610432579050509050604051806040016040528060048152602001630c4c2e6d60e31b8152508160008151811061047957610479610b67565b6020026020010181905250604051806040016040528060028152602001612d6360f01b815250816001815181106104b2576104b2610b67565b60200260200101819052506040518060400160405280600c81526020016b6563686f202d6e2024464f4f60a01b815250816002815181106104f5576104f5610b67565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063891604679061053a908590600401610cb8565b6000604051808303816000875af1158015610559573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105819190810190610c67565b90506000818060200190518101906105999190610c67565b9050610367816040518060400160405280600a815260200169393ab73a34b6b2ab30b960b11b815250610904565b60408051600280825260608201909252600091816020015b60608152602001906001900390816105df579050509050604051806040016040528060048152602001630c4c2e6d60e31b8152508160008151811061062657610626610b67565b60200260200101819052506040518060400160405280601081526020016f0e8cae6e85edaf2e6c6e4d2e0e85ce6d60831b815250816001815181106104f5576104f5610b67565b60008054610100900460ff161561068d5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107935760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161071b917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610d48565b60408051601f198184030181529082905261073591610d79565b6000604051808303816000865af19150503d8060008114610772576040519150601f19603f3d011682016040523d82523d6000602084013e610777565b606091505b509150508080602001905181019061078f9190610d95565b9150505b919050565b60408051600280825260608201909252600091816020015b60608152602001906001900390816107b0579050509050604051806040016040528060048152602001630c4c2e6d60e31b815250816000815181106107f7576107f7610b67565b60200260200101819052506040518060400160405280600e81526020016d0e8cae6e85ee6c6e4d2e0e85ce6d60931b8152508160018151811061083c5761083c610b67565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90638916046790610881908590600401610cb8565b6000604051808303816000875af11580156108a0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526108c89190810190610c67565b90506000818060200190518101906108e09190610c67565b905061036781604051806040016040528060048152602001637472756560e01b8152505b806040516020016109159190610d79565b604051602081830303815290604052805190602001208260405160200161093c9190610d79565b6040516020818303038152906040528051906020012014610a41577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109c39060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516109fa9190610db7565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382604051610a319190610deb565b60405180910390a1610a41610a45565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610b405760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610adf9291602001610d48565b60408051601f1981840301815290829052610af991610d79565b6000604051808303816000865af19150503d8060008114610b36576040519150601f19603f3d011682016040523d82523d6000602084013e610b3b565b606091505b505050505b6000805461ff001916610100179055565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60005b83811015610b98578181015183820152602001610b80565b83811115610ba7576000848401525b50505050565b60008151808452610bc5816020860160208601610b7d565b601f01601f19169290920160200192915050565b602081526000610bec6020830184610bad565b9392505050565b600067ffffffffffffffff80841115610c0e57610c0e610b51565b604051601f8501601f19908116603f01168101908282118183101715610c3657610c36610b51565b81604052809350858152868686011115610c4f57600080fd5b610c5d866020830187610b7d565b5050509392505050565b600060208284031215610c7957600080fd5b815167ffffffffffffffff811115610c9057600080fd5b8201601f81018413610ca157600080fd5b610cb084825160208401610bf3565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610d0d57603f19888603018452610cfb858351610bad565b94509285019290850190600101610cdf565b5092979650505050505050565b604081526000610d2d6040830185610bad565b8281036020840152610d3f8185610bad565b95945050505050565b6001600160e01b0319831681528151600090610d6b816004850160208701610b7d565b919091016004019392505050565b60008251610d8b818460208701610b7d565b9190910192915050565b600060208284031215610da757600080fd5b81518015158114610bec57600080fd5b60408152600a6040820152690808115e1c1958dd195960b21b6060820152608060208201526000610bec6080830184610bad565b60408152600a604082015269080808081058dd1d585b60b21b6060820152608060208201526000610bec6080830184610bad56fe3078303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303032303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306137323735366537343639366436353536363137323030303030303030303030303030303030303030303030303030303030303030303030303030303030303030a2646970667358221220f0af67affc8dee166690105f745d997d2f33251aec8b7f9569ffc2046a1d166964736f6c634300080d0033" ) )
      
    
    syntax Field ::= FfiTestField
    
    syntax FfiTestField ::= "IS_TEST" [symbol(), klabel(field_FfiTest_IS_TEST)]
    
    syntax FfiTestField ::= "_failed" [symbol(), klabel(field_FfiTest__failed)]
    
    syntax FfiTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FfiTest_IS_SCRIPT)]
    
    syntax FfiTestField ::= "stdstore" [symbol(), klabel(field_FfiTest_stdstore)]
    
    rule  ( #loc ( FfiTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( FfiTest . _failed ) => 0 )
      
    
    rule  ( #loc ( FfiTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( FfiTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= FfiTestContract "." FfiTestMethod [function(), klabel(method_FfiTest)]
    
    syntax FfiTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_FfiTest_IS_SCRIPT)]
    
    syntax FfiTestMethod ::= "IS_TEST" "(" ")" [klabel(method_FfiTest_IS_TEST)]
    
    syntax FfiTestMethod ::= "failed" "(" ")" [klabel(method_FfiTest_failed)]
    
    syntax FfiTestMethod ::= "setUp" "(" ")" [klabel(method_FfiTest_setUp)]
    
    syntax FfiTestMethod ::= "testFFIFOO" "(" ")" [klabel(method_FfiTest_testFFIFOO)]
    
    syntax FfiTestMethod ::= "testFFIScript" "(" ")" [klabel(method_FfiTest_testFFIScript)]
    
    syntax FfiTestMethod ::= "testFFIScript2" "(" ")" [klabel(method_FfiTest_testFFIScript2)]
    
    syntax FfiTestMethod ::= "testffi" "(" ")" [klabel(method_FfiTest_testffi)]
    
    syntax FfiTestMethod ::= "vm" "(" ")" [klabel(method_FfiTest_vm)]
    
    rule  ( FfiTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( FfiTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( FfiTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( FfiTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( FfiTest . testFFIFOO ( ) => #abiCallData ( "testFFIFOO" , .TypedArgs ) )
      
    
    rule  ( FfiTest . testFFIScript ( ) => #abiCallData ( "testFFIScript" , .TypedArgs ) )
      
    
    rule  ( FfiTest . testFFIScript2 ( ) => #abiCallData ( "testFFIScript2" , .TypedArgs ) )
      
    
    rule  ( FfiTest . testffi ( ) => #abiCallData ( "testffi" , .TypedArgs ) )
      
    
    rule  ( FfiTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testFFIFOO" ) => 2415994822 )
      
    
    rule  ( selector ( "testFFIScript" ) => 2734086837 )
      
    
    rule  ( selector ( "testFFIScript2" ) => 4125794598 )
      
    
    rule  ( selector ( "testffi" ) => 4068116 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module FILESTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= FilesTestContract
    
    syntax FilesTestContract ::= "FilesTest" [klabel(contract_FilesTest)]
    
    rule  ( #binRuntime ( FilesTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100c6578063e7515e59146100de578063f8ccbf47146100e6578063fa7626d4146100f957600080fd5b80633a76846314610082578063a5be8246146100b4578063b52803ed146100be575b600080fd5b610097600080516020610d5983398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100bc610106565b005b6100bc6102c0565b6100ce610550565b60405190151581526020016100ab565b6100bc61066f565b6000546100ce9062010000900460ff1681565b6000546100ce9060ff1681565b6040516360f9bb1160e01b8152600090600080516020610d59833981519152906360f9bb119061013890600401610a07565b6000604051808303816000875af1158015610157573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261017f9190810190610a76565b60405163897e0a9760e01b8152909150600080516020610d598339815191529063897e0a97906101b3908490600401610b4f565b600060405180830381600087803b1580156101cd57600080fd5b505af11580156101e1573d6000803e3d6000fd5b505060405163f1afe04d60e01b8152600080516020610d59833981519152925063f1afe04d915061021490600401610b9d565b600060405180830381600087803b15801561022e57600080fd5b505af1158015610242573d6000803e3d6000fd5b50506040516360f9bb1160e01b8152600080516020610d5983398151915292506360f9bb11915061027590600401610b9d565b6000604051808303816000875af1158015610294573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102bc9190810190610a76565b5050565b604051630e1eaae560e31b8152600090600080516020610d59833981519152906370f55728906102f290600401610a07565b6000604051808303816000875af1158015610311573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103399190810190610a76565b60405163619d897f60e01b8152909150600080516020610d598339815191529063619d897f9061036d908490600401610bd7565b600060405180830381600087803b15801561038757600080fd5b505af115801561039b573d6000803e3d6000fd5b5050604051630e1eaae560e31b8152600080516020610d5983398151915292506370f5572891506103ce90600401610a07565b6000604051808303816000875af11580156103ed573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104159190810190610a76565b9050610444816040518060400160405280600b81526020016a666f722074657374696e6760a81b8152506107cf565b6040516348c3241f60e01b8152600080516020610d59833981519152906348c3241f9061047390600401610a07565b600060405180830381600087803b15801561048d57600080fd5b505af11580156104a1573d6000803e3d6000fd5b5050604051630e1eaae560e31b8152600080516020610d5983398151915292506370f5572891506104d490600401610a07565b6000604051808303816000875af11580156104f3573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261051b9190810190610a76565b905061054d816040518060400160405280600e81526020016d5468697320697320612066696c6560901b8152506107cf565b50565b60008054610100900460ff16156105705750600054610100900460ff1690565b6000600080516020610d598339815191523b1561066a5760408051600080516020610d59833981519152602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916105f2917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610c1b565b60408051601f198184030181529082905261060c91610c4c565b6000604051808303816000865af19150503d8060008114610649576040519150601f19603f3d011682016040523d82523d6000602084013e61064e565b606091505b50915050808060200190518101906106669190610c68565b9150505b919050565b6040516360f9bb1160e01b8152600090600080516020610d59833981519152906360f9bb11906106a190600401610a07565b6000604051808303816000875af11580156106c0573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106e89190810190610a76565b60405163897e0a9760e01b8152909150600080516020610d598339815191529063897e0a979061071c908490600401610c8a565b600060405180830381600087803b15801561073657600080fd5b505af115801561074a573d6000803e3d6000fd5b50506040516360f9bb1160e01b815260009250600080516020610d5983398151915291506360f9bb119061078090600401610cbd565b6000604051808303816000875af115801561079f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107c79190810190610a76565b90506102bc82825b806040516020016107e09190610c4c565b60405160208183030381529060405280519060200120826040516020016108079190610c4c565b60405160208183030381529060405280519060200120146102bc577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161088e9060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516108c59190610cf0565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516108fc9190610d24565b60405180910390a16102bc600080516020610d598339815191523b156109f65760408051600080516020610d59833981519152602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109959291602001610c1b565b60408051601f19818403018152908290526109af91610c4c565b6000604051808303816000865af19150503d80600081146109ec576040519150601f19603f3d011682016040523d82523d6000602084013e6109f1565b606091505b505050505b6000805461ff001916610100179055565b6020808252600f908201526e0b8bdd195cdd0bd99a5b194b9d1e1d608a1b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610a61578181015183820152602001610a49565b83811115610a70576000848401525b50505050565b600060208284031215610a8857600080fd5b815167ffffffffffffffff80821115610aa057600080fd5b818401915084601f830112610ab457600080fd5b815181811115610ac657610ac6610a30565b604051601f8201601f19908116603f01168101908382118183101715610aee57610aee610a30565b81604052828152876020848701011115610b0757600080fd5b610b18836020830160208801610a46565b979650505050505050565b60008151808452610b3b816020860160208601610a46565b601f01601f19169290920160200192915050565b604081526000610b836040830160148152730b8bdd195cdd0bd99a5b1958dbdc1e4c8b9d1e1d60621b602082015260400190565b8281036020840152610b958185610b23565b949350505050565b602081526000610bd16020830160148152730b8bdd195cdd0bd99a5b1958dbdc1e4c8b9d1e1d60621b602082015260400190565b92915050565b6040815260136040820152720b8bdd195cdd0bd99a5b195b1a5b994b9d1e1d606a1b6060820152608060208201526000610c146080830184610b23565b9392505050565b6001600160e01b0319831681528151600090610c3e816004850160208701610a46565b919091016004019392505050565b60008251610c5e818460208701610a46565b9190910192915050565b600060208284031215610c7a57600080fd5b81518015158114610c1457600080fd5b604081526000610b836040830160138152720b8bdd195cdd0bd99a5b1958dbdc1e4b9d1e1d606a1b602082015260400190565b602081526000610bd16020830160138152720b8bdd195cdd0bd99a5b1958dbdc1e4b9d1e1d606a1b602082015260400190565b60408152600a6040820152690808115e1c1958dd195960b21b6060820152608060208201526000610c146080830184610b23565b60408152600a604082015269080808081058dd1d585b60b21b6060820152608060208201526000610c146080830184610b2356fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da2646970667358221220c16e9f375ed8757d0d2a4ad931c139dcc1d0b7f96b026f27fb62eb52b385dfa064736f6c634300080d0033" ) )
      
    
    syntax Field ::= FilesTestField
    
    syntax FilesTestField ::= "IS_TEST" [symbol(), klabel(field_FilesTest_IS_TEST)]
    
    syntax FilesTestField ::= "_failed" [symbol(), klabel(field_FilesTest__failed)]
    
    syntax FilesTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FilesTest_IS_SCRIPT)]
    
    syntax FilesTestField ::= "stdstore" [symbol(), klabel(field_FilesTest_stdstore)]
    
    rule  ( #loc ( FilesTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( FilesTest . _failed ) => 0 )
      
    
    rule  ( #loc ( FilesTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( FilesTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= FilesTestContract "." FilesTestMethod [function(), klabel(method_FilesTest)]
    
    syntax FilesTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_FilesTest_IS_SCRIPT)]
    
    syntax FilesTestMethod ::= "IS_TEST" "(" ")" [klabel(method_FilesTest_IS_TEST)]
    
    syntax FilesTestMethod ::= "failed" "(" ")" [klabel(method_FilesTest_failed)]
    
    syntax FilesTestMethod ::= "testFailRemoveFile" "(" ")" [klabel(method_FilesTest_testFailRemoveFile)]
    
    syntax FilesTestMethod ::= "testReadWriteFile" "(" ")" [klabel(method_FilesTest_testReadWriteFile)]
    
    syntax FilesTestMethod ::= "testReadWriteLine" "(" ")" [klabel(method_FilesTest_testReadWriteLine)]
    
    syntax FilesTestMethod ::= "vm" "(" ")" [klabel(method_FilesTest_vm)]
    
    rule  ( FilesTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( FilesTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( FilesTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( FilesTest . testFailRemoveFile ( ) => #abiCallData ( "testFailRemoveFile" , .TypedArgs ) )
      
    
    rule  ( FilesTest . testReadWriteFile ( ) => #abiCallData ( "testReadWriteFile" , .TypedArgs ) )
      
    
    rule  ( FilesTest . testReadWriteLine ( ) => #abiCallData ( "testReadWriteLine" , .TypedArgs ) )
      
    
    rule  ( FilesTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testFailRemoveFile" ) => 2780725830 )
      
    
    rule  ( selector ( "testReadWriteFile" ) => 3880869465 )
      
    
    rule  ( selector ( "testReadWriteLine" ) => 3039298541 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module FORKTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= ForkTestContract
    
    syntax ForkTestContract ::= "ForkTest" [klabel(contract_ForkTest)]
    
    rule  ( #binRuntime ( ForkTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80633a76846314610051578063ba414fa614610089578063f8ccbf47146100a1578063fa7626d4146100b4575b600080fd5b61006c737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100916100c1565b6040519015158152602001610080565b6000546100919062010000900460ff1681565b6000546100919060ff1681565b60008054610100900460ff16156100e15750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156101e75760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161016f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610227565b60408051601f19818403018152908290526101899161024b565b6000604051808303816000865af19150503d80600081146101c6576040519150601f19603f3d011682016040523d82523d6000602084013e6101cb565b606091505b50915050808060200190518101906101e3919061025e565b9150505b919050565b6000815160005b8181101561020d57602081850181015186830152016101f3565b8181111561021c576000828601525b509290920192915050565b6001600160e01b031983168152600061024360048301846101ec565b949350505050565b600061025782846101ec565b9392505050565b60006020828403121561027057600080fd5b8151801515811461025757600080fdfea2646970667358221220efc346b0216164b37f73fd1740a8ef452c997a9df4b2afe9a13c7ee077c78be164736f6c634300080d0033" ) )
      
    
    syntax Field ::= ForkTestField
    
    syntax ForkTestField ::= "IS_TEST" [symbol(), klabel(field_ForkTest_IS_TEST)]
    
    syntax ForkTestField ::= "_failed" [symbol(), klabel(field_ForkTest__failed)]
    
    syntax ForkTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ForkTest_IS_SCRIPT)]
    
    syntax ForkTestField ::= "stdstore" [symbol(), klabel(field_ForkTest_stdstore)]
    
    rule  ( #loc ( ForkTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( ForkTest . _failed ) => 0 )
      
    
    rule  ( #loc ( ForkTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( ForkTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= ForkTestContract "." ForkTestMethod [function(), klabel(method_ForkTest)]
    
    syntax ForkTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_ForkTest_IS_SCRIPT)]
    
    syntax ForkTestMethod ::= "IS_TEST" "(" ")" [klabel(method_ForkTest_IS_TEST)]
    
    syntax ForkTestMethod ::= "failed" "(" ")" [klabel(method_ForkTest_failed)]
    
    syntax ForkTestMethod ::= "vm" "(" ")" [klabel(method_ForkTest_vm)]
    
    rule  ( ForkTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( ForkTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( ForkTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( ForkTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module GETCODETEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= GetCodeTestContract
    
    syntax GetCodeTestContract ::= "GetCodeTest" [klabel(contract_GetCodeTest)]
    
    rule  ( #binRuntime ( GetCodeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610071578063ba414fa6146100a9578063e8d3529f146100c1578063f8ccbf47146100c9578063fa7626d4146100dc575b600080fd5b61006f6100e9565b005b61008c737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b1610147565b60405190151581526020016100a0565b61006f610272565b6000546100b19062010000900460ff1681565b6000546100b19060ff1681565b6104d26040516100f8906106e1565b6001600160a01b039091168152602001604051809103906000f080158015610124573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60008054610100900460ff16156101675750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561026d5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101f5917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161071e565b60408051601f198184030181529082905261020f9161074f565b6000604051808303816000865af19150503d806000811461024c576040519150601f19603f3d011682016040523d82523d6000602084013e610251565b606091505b5091505080806020019051810190610269919061076b565b9150505b919050565b604080516104d260208201526000910160408051808303601f190181528282526318caf8e360e31b83526104d260048401526024830191909152600e60448301526d6578616d706c654164647265737360901b60648301529150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b15801561030557600080fd5b505af1158015610319573d6000803e3d6000fd5b5050604051638d1cc92560e01b815260206004820152601360248201527226bcaa37b5b2b71739b7b61d26bcaa37b5b2b760691b604482015260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d9150638d1cc925906064016000604051808303816000875af1158015610395573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103bd91908101906107aa565b826040516020016103cf929190610857565b604051602081830303815290604052905060008151602083016000f0600854604080516001600160a01b03909216803b83810160209081019093528084529394506104489391600091908401903c826001600160a01b0316803b806020016040519081016040528181526000908060200190933c61044d565b505050565b6104578282610548565b610544577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104c69060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516104fd91906108b2565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405161053491906108e6565b60405180910390a16105446105d5565b5050565b8051825160019190036105cb5760005b83518110156105c5578281815181106105735761057361091a565b602001015160f81c60f81b6001600160f81b03191684828151811061059a5761059a61091a565b01602001516001600160f81b031916146105b357600091505b806105bd81610930565b915050610558565b506105cf565b5060005b92915050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106d05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261066f929160200161071e565b60408051601f19818403018152908290526106899161074f565b6000604051808303816000865af19150503d80600081146106c6576040519150601f19603f3d011682016040523d82523d6000602084013e6106cb565b606091505b505050505b6000805461ff001916610100179055565b61027a8061095883390190565b60005b838110156107095781810151838201526020016106f1565b83811115610718576000848401525b50505050565b6001600160e01b03198316815281516000906107418160048501602087016106ee565b919091016004019392505050565b600082516107618184602087016106ee565b9190910192915050565b60006020828403121561077d57600080fd5b8151801515811461078d57600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6000602082840312156107bc57600080fd5b815167ffffffffffffffff808211156107d457600080fd5b818401915084601f8301126107e857600080fd5b8151818111156107fa576107fa610794565b604051601f8201601f19908116603f0116810190838211818310171561082257610822610794565b8160405282815287602084870101111561083b57600080fd5b61084c8360208301602088016106ee565b979650505050505050565b600083516108698184602088016106ee565b83519083019061087d8183602088016106ee565b01949350505050565b6000815180845261089e8160208601602086016106ee565b601f01601f19169290920160200192915050565b60408152600a6040820152690808115e1c1958dd195960b21b606082015260806020820152600061078d6080830184610886565b60408152600a604082015269080808081058dd1d585b60b21b606082015260806020820152600061078d6080830184610886565b634e487b7160e01b600052603260045260246000fd5b60006001820161095057634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a2646970667358221220f50f6669fe1d564bbf007a8f01c2eb6dd91659a35772834de279eb816110148264736f6c634300080d0033" ) )
      
    
    syntax Field ::= GetCodeTestField
    
    syntax GetCodeTestField ::= "IS_TEST" [symbol(), klabel(field_GetCodeTest_IS_TEST)]
    
    syntax GetCodeTestField ::= "_failed" [symbol(), klabel(field_GetCodeTest__failed)]
    
    syntax GetCodeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_GetCodeTest_IS_SCRIPT)]
    
    syntax GetCodeTestField ::= "stdstore" [symbol(), klabel(field_GetCodeTest_stdstore)]
    
    syntax GetCodeTestField ::= "myToken" [symbol(), klabel(field_GetCodeTest_myToken)]
    
    rule  ( #loc ( GetCodeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( GetCodeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( GetCodeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( GetCodeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( GetCodeTest . myToken ) => 8 )
      
    
    syntax ByteArray ::= GetCodeTestContract "." GetCodeTestMethod [function(), klabel(method_GetCodeTest)]
    
    syntax GetCodeTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_GetCodeTest_IS_SCRIPT)]
    
    syntax GetCodeTestMethod ::= "IS_TEST" "(" ")" [klabel(method_GetCodeTest_IS_TEST)]
    
    syntax GetCodeTestMethod ::= "failed" "(" ")" [klabel(method_GetCodeTest_failed)]
    
    syntax GetCodeTestMethod ::= "setUp" "(" ")" [klabel(method_GetCodeTest_setUp)]
    
    syntax GetCodeTestMethod ::= "testGetCode" "(" ")" [klabel(method_GetCodeTest_testGetCode)]
    
    syntax GetCodeTestMethod ::= "vm" "(" ")" [klabel(method_GetCodeTest_vm)]
    
    rule  ( GetCodeTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . testGetCode ( ) => #abiCallData ( "testGetCode" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testGetCode" ) => 3906163359 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module LOOPSTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= LoopsTestContract
    
    syntax LoopsTestContract ::= "LoopsTest" [klabel(contract_LoopsTest)]
    
    rule  ( #binRuntime ( LoopsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80635de22f07116100a2578063a118e10211610071578063a118e10214610208578063ba414fa61461021b578063d313940d14610233578063f8ccbf4714610246578063fa7626d41461025957600080fd5b80635de22f07146101bc5780636d5d39df146101cf578063887e4fdb146101e25780638fe34aed146101f557600080fd5b806330476e27116100de57806330476e271461014b5780633a7684631461015e5780634e94ce571461019657806351cdc192146101a957600080fd5b806306ac1530146101105780630a9254e4146101235780630de4eb1614610125578063181f88ec14610138575b600080fd5b61012361011e3660046110b0565b610266565b005b6101236101333660046110d2565b6102bf565b6101236101463660046110d2565b61031d565b6101236101593660046110d2565b61033a565b610179737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6101236101a43660046110d2565b61039e565b6101236101b7366004611101565b610444565b6101236101ca366004611101565b6104a4565b6101236101dd3660046110b0565b6104fa565b6101236101f03660046110d2565b610505565b610123610203366004611101565b61059f565b6101236102163660046110b0565b610619565b610223610683565b604051901515815260200161018d565b610123610241366004611101565b6107ae565b6000546102239062010000900460ff1681565b6000546102239060ff1681565b600061027183610828565b90506102888115806102835750600184115b610879565b6102ba600283108061029a5750838310155b806102a3575081155b8061028357506102b383856111d5565b1515610879565b505050565b60006102ca826108ed565b905060006102d88283610935565b90506000838211156102f5576102ee84836111ff565b9050610302565b6102ff83836111ff565b90505b610317610310606486611216565b8210610879565b50505050565b61033761032982610828565b61033283610970565b6109c1565b50565b600061034582610828565b905080806103535750600282105b1561035c575050565b60025b8281101561038f5761037181846111d5565b60000361037d57505050565b806103878161122a565b91505061035f565b5061039a6000610879565b5050565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b1580156103ee57600080fd5b505af1158015610402573d6000803e3d6000fd5b50505050600060028260016104179190611243565b610421908461125b565b61042b9190611216565b9050600061043883610b3e565b90506102ba8282610b70565b600061044f82610c4f565b9050600160005b8351811080156104635750815b1561049a5783818151811061047a5761047a61127a565b6020026020010151831015915080806104929061122a565b915050610456565b506102ba81610879565b60006104af82610cae565b9050600160005b8351811080156104c35750815b1561049a578381815181106104da576104da61127a565b6020026020010151831015915080806104f29061122a565b9150506104b6565b600061027183610d0c565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561055557600080fd5b505af1158015610569573d6000803e3d6000fd5b505050506000600282600161057e9190611243565b610588908461125b565b6105929190611216565b9050600061043883610d43565b60006105aa82610d6d565b90506001805b8251811080156105bd5750815b1561049a578381815181106105d4576105d461127a565b6020026020010151846001836105ea91906111ff565b815181106105fa576105fa61127a565b60200260200101511115915080806106119061122a565b9150506105b0565b600061062483610d99565b905082600003610639576102ba816000610b70565b61064561028382610828565b600061065a6106556001866111ff565b610d99565b9050610317818411158061066e5750828410155b80610283575061067d84610828565b15610879565b60008054610100900460ff16156106a35750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156107a95760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610731917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016112bc565b60408051601f198184030181529082905261074b916112ed565b6000604051808303816000865af19150503d8060008114610788576040519150601f19603f3d011682016040523d82523d6000602084013e61078d565b606091505b50915050808060200190518101906107a59190611309565b9150505b919050565b60006107b982610dd3565b90506001805b8251811080156107cc5750815b1561049a578381815181106107e3576107e361127a565b6020026020010151846001836107f991906111ff565b815181106108095761080961127a565b60200260200101511115915080806108209061122a565b9150506107bf565b6000600282101561083b57506000919050565b60025b828110156108705761085081846111d5565b1561085e5750600092915050565b806108688161122a565b91505061083e565b50600192915050565b80610337577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108dd9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a1610337610df5565b6000816000036108ff57506000919050565b815b8091506002816109118584610f01565b61091b9190611243565b6109259190611216565b9050818103610901575b50919050565b6000670de0b6b3a764000061094b600282611216565b610955848661125b565b61095f9190611243565b6109699190611216565b9392505050565b6000600282101561098357506000919050565b60025b610991600284611216565b8111610870576109a181846111d5565b156109af5750600092915050565b806109b98161122a565b915050610986565b8015158215151461039a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610a369060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381610a87576040518060400160405280600581526020016466616c736560d81b815250610aa5565b604051806040016040528060048152602001637472756560e01b8152505b604051610ab29190611357565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358382610b03576040518060400160405280600581526020016466616c736560d81b815250610b21565b604051806040016040528060048152602001637472756560e01b8152505b604051610b2e919061139b565b60405180910390a161039a610df5565b600080805b83811015610b6957610b558183611243565b915080610b618161122a565b915050610b43565b5092915050565b80821461039a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610be19060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610c1891906113c5565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610b2e91906113fd565b60008060015b8351811015610b695781848281518110610c7157610c7161127a565b60200260200101511115610c9c57838181518110610c9157610c9161127a565b602002602001015191505b80610ca68161122a565b915050610c55565b600080805b8351811015610b695781848281518110610ccf57610ccf61127a565b60200260200101511115610cfa57838181518110610cef57610cef61127a565b602002602001015191505b80610d048161122a565b915050610cb3565b600060025b8281101561087057610d2381846111d5565b15610d315750600092915050565b80610d3b8161122a565b915050610d11565b600080805b838111610b6957610d598183611243565b915080610d658161122a565b915050610d48565b60606001825111610d7c575090565b610d9582600060018551610d9091906111ff565b610f21565b5090565b6000805b8281101561092f5781610daf8161122a565b925050610dbb82610828565b15610dce5780610dca8161122a565b9150505b610d9d565b60606001825111610de2575090565b610d95826001808551610d9091906111ff565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b15610ef05760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f1981840301815290829052610e8f92916020016112bc565b60408051601f1981840301815290829052610ea9916112ed565b6000604051808303816000865af19150503d8060008114610ee6576040519150601f19603f3d011682016040523d82523d6000602084013e610eeb565b606091505b505050505b6000805461ff001916610100179055565b600081610f0f600282611216565b610955670de0b6b3a76400008661125b565b808210610f2d57505050565b81816000856002610f3e85856111ff565b610f489190611216565b610f529087611243565b81518110610f6257610f6261127a565b602002602001015190505b818311611082575b80868481518110610f8857610f8861127a565b60200260200101511015610fa85782610fa08161122a565b935050610f75565b858281518110610fba57610fba61127a565b602002602001015181108015610fd05750600082115b15610fe75781610fdf81611427565b925050610fa8565b81831161107d578582815181106110005761100061127a565b602002602001015186848151811061101a5761101a61127a565b60200260200101518785815181106110345761103461127a565b6020026020010188858151811061104d5761104d61127a565b602090810291909101019190915252826110668161122a565b935050811561107d578161107981611427565b9250505b610f6d565b8185101561109557611095868684610f21565b838310156110a8576110a8868486610f21565b505050505050565b600080604083850312156110c357600080fd5b50508035926020909101359150565b6000602082840312156110e457600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561111457600080fd5b823567ffffffffffffffff8082111561112c57600080fd5b818501915085601f83011261114057600080fd5b813581811115611152576111526110eb565b8060051b604051601f19603f83011681018181108582111715611177576111776110eb565b60405291825284820192508381018501918883111561119557600080fd5b938501935b828510156111b35784358452938501939285019261119a565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b6000826111e4576111e46111bf565b500690565b634e487b7160e01b600052601160045260246000fd5b600082821015611211576112116111e9565b500390565b600082611225576112256111bf565b500490565b60006001820161123c5761123c6111e9565b5060010190565b60008219821115611256576112566111e9565b500190565b6000816000190483118215151615611275576112756111e9565b500290565b634e487b7160e01b600052603260045260246000fd5b60005b838110156112ab578181015183820152602001611293565b838111156103175750506000910152565b6001600160e01b03198316815281516000906112df816004850160208701611290565b919091016004019392505050565b600082516112ff818460208701611290565b9190910192915050565b60006020828403121561131b57600080fd5b8151801515811461096957600080fd5b60008151808452611343816020860160208601611290565b601f01601f19169290920160200192915050565b60408152600061138160408301600a8152690808115e1c1958dd195960b21b602082015260400190565b8281036020840152611393818561132b565b949350505050565b60408152600061138160408301600a815269080808081058dd1d585b60b21b602082015260400190565b6040815260006113ef60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b6040815260006113ef60408301600a815269080808081058dd1d585b60b21b602082015260400190565b600081611436576114366111e9565b50600019019056fea264697066735822122073418d6cc5bc5d376871af1e7ed1123d205ecff4e6ac6c0fd661e206d51e26d164736f6c634300080d0033" ) )
      
    
    syntax Field ::= LoopsTestField
    
    syntax LoopsTestField ::= "IS_TEST" [symbol(), klabel(field_LoopsTest_IS_TEST)]
    
    syntax LoopsTestField ::= "_failed" [symbol(), klabel(field_LoopsTest__failed)]
    
    syntax LoopsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_LoopsTest_IS_SCRIPT)]
    
    syntax LoopsTestField ::= "stdstore" [symbol(), klabel(field_LoopsTest_stdstore)]
    
    rule  ( #loc ( LoopsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( LoopsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( LoopsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( LoopsTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= LoopsTestContract "." LoopsTestMethod [function(), klabel(method_LoopsTest)]
    
    syntax LoopsTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_LoopsTest_IS_SCRIPT)]
    
    syntax LoopsTestMethod ::= "IS_TEST" "(" ")" [klabel(method_LoopsTest_IS_TEST)]
    
    syntax LoopsTestMethod ::= "failed" "(" ")" [klabel(method_LoopsTest_failed)]
    
    syntax LoopsTestMethod ::= "setUp" "(" ")" [klabel(method_LoopsTest_setUp)]
    
    syntax LoopsTestMethod ::= "testIsNotPrime" "(" Int ")" [klabel(method_LoopsTest_testIsNotPrime)]
    
    syntax LoopsTestMethod ::= "testIsPrime" "(" Int "," Int ")" [klabel(method_LoopsTest_testIsPrime)]
    
    syntax LoopsTestMethod ::= "testIsPrimeBroken" "(" Int "," Int ")" [klabel(method_LoopsTest_testIsPrimeBroken)]
    
    syntax LoopsTestMethod ::= "testIsPrimeOpt" "(" Int ")" [klabel(method_LoopsTest_testIsPrimeOpt)]
    
    syntax LoopsTestMethod ::= "testMax" "(" K ")" [klabel(method_LoopsTest_testMax)]
    
    syntax LoopsTestMethod ::= "testMaxBroken" "(" K ")" [klabel(method_LoopsTest_testMaxBroken)]
    
    syntax LoopsTestMethod ::= "testNthPrime" "(" Int "," Int ")" [klabel(method_LoopsTest_testNthPrime)]
    
    syntax LoopsTestMethod ::= "testSort" "(" K ")" [klabel(method_LoopsTest_testSort)]
    
    syntax LoopsTestMethod ::= "testSortBroken" "(" K ")" [klabel(method_LoopsTest_testSortBroken)]
    
    syntax LoopsTestMethod ::= "testSqrt" "(" Int ")" [klabel(method_LoopsTest_testSqrt)]
    
    syntax LoopsTestMethod ::= "testSumToN" "(" Int ")" [klabel(method_LoopsTest_testSumToN)]
    
    syntax LoopsTestMethod ::= "testSumToNBroken" "(" Int ")" [klabel(method_LoopsTest_testSumToNBroken)]
    
    syntax LoopsTestMethod ::= "vm" "(" ")" [klabel(method_LoopsTest_vm)]
    
    rule  ( LoopsTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( LoopsTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( LoopsTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( LoopsTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( LoopsTest . testIsNotPrime ( V0_n ) => #abiCallData ( "testIsNotPrime" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( LoopsTest . testIsPrime ( V0_n , V1_i ) => #abiCallData ( "testIsPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( LoopsTest . testIsPrimeBroken ( V0_n , V1_i ) => #abiCallData ( "testIsPrimeBroken" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( LoopsTest . testIsPrimeOpt ( V0_n ) => #abiCallData ( "testIsPrimeOpt" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( LoopsTest . testNthPrime ( V0_n , V1_i ) => #abiCallData ( "testNthPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( LoopsTest . testSqrt ( V0_x ) => #abiCallData ( "testSqrt" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( LoopsTest . testSumToN ( V0_n ) => #abiCallData ( "testSumToN" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( LoopsTest . testSumToNBroken ( V0_n ) => #abiCallData ( "testSumToNBroken" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( LoopsTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testIsNotPrime" ) => 809987623 )
      
    
    rule  ( selector ( "testIsPrime" ) => 111940912 )
      
    
    rule  ( selector ( "testIsPrimeBroken" ) => 1834826207 )
      
    
    rule  ( selector ( "testIsPrimeOpt" ) => 404719852 )
      
    
    rule  ( selector ( "testMax" ) => 1575104263 )
      
    
    rule  ( selector ( "testMaxBroken" ) => 1372438930 )
      
    
    rule  ( selector ( "testNthPrime" ) => 2702762242 )
      
    
    rule  ( selector ( "testSort" ) => 2414037741 )
      
    
    rule  ( selector ( "testSortBroken" ) => 3541275661 )
      
    
    rule  ( selector ( "testSqrt" ) => 233106198 )
      
    
    rule  ( selector ( "testSumToN" ) => 2289979355 )
      
    
    rule  ( selector ( "testSumToNBroken" ) => 1318374999 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module MOCKCALLTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= MockCallTestContract
    
    syntax MockCallTestContract ::= "MockCallTest" [klabel(contract_MockCallTest)]
    
    rule  ( #binRuntime ( MockCallTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa6146100d7578063bb630a5c146100ef578063f8ccbf47146100f7578063fa7626d41461010a57600080fd5b80630a9254e41461008d57806339188d4e1461008f5780633a76846314610097578063480a6996146100cf575b600080fd5b005b61008d610119565b6100b2737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008d6102bf565b6100df61058c565b60405190151581526020016100c6565b61008d6106b7565b6000546100df9062010000900460ff1681565b6000546100df9060ff1681565b565b6040805160048152602481018252602080820180516001600160e01b03166370a0823160e01b1790528251600a818301528351808203909201825280840193849052632e5884f960e21b909352737109709ecfa91a80626ff3989d68f67f5b1dd12d9263b96213e49261019192600092604401610a3a565b600060405180830381600087803b1580156101ab57600080fd5b505af11580156101bf573d6000803e3d6000fd5b50506040516370a0823160e01b8152600160048201526102309250600091506370a08231906024015b602060405180830381865afa158015610205573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102299190610a7a565b600a61079e565b6040516370a0823160e01b815260026004820152610259906000906370a08231906024016101e8565b60408051633fdf4e1560e01b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d91633fdf4e1591600480830192600092919082900301818387803b1580156102a557600080fd5b505af11580156102b9573d6000803e3d6000fd5b50505050565b60006105396040516102d0906109d5565b6001600160a01b039091168152602001604051809103906000f0801580156102fc573d6000803e3d6000fd5b50604051630c11dedd60e01b815260016004820152909150610372906001600160a01b03831690630c11dedd90600a9060240160206040518083038185885af115801561034d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906102299190610a7a565b604051630c11dedd60e01b81526002600482018190526103ea916001600160a01b03841691630c11dedd9160240160206040518083038185885af11580156103be573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103e39190610a7a565b600261079e565b6040805160048152602481018252602080820180516001600160e01b0316630c11dedd60e01b179052825160638183015283518082039092018252808401938490526381409b9160e01b909352737109709ecfa91a80626ff3989d68f67f5b1dd12d926381409b9192610466928692600a929190604401610a93565b600060405180830381600087803b15801561048057600080fd5b505af1158015610494573d6000803e3d6000fd5b5050604051630c11dedd60e01b81526001600482015261051192506001600160a01b0384169150630c11dedd90600a9060240160206040518083038185885af11580156104e5573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061050a9190610a7a565b606361079e565b604051630c11dedd60e01b8152600260048201819052610589916001600160a01b03841691630c11dedd9160240160206040518083038185885af115801561055d573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906105829190610a7a565b600461079e565b50565b60008054610100900460ff16156105ac5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106b25760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161063a917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ad7565b60408051601f198184030181529082905261065491610b08565b6000604051808303816000865af19150503d8060008114610691576040519150601f19603f3d011682016040523d82523d6000602084013e610696565b606091505b50915050808060200190518101906106ae9190610b24565b9150505b919050565b6040805160016024808301919091528251808303909101815260449182018352602080820180516001600160e01b03166370a0823160e01b1790528351600a818301528451808203909201825280850194859052632e5884f960e21b909452737109709ecfa91a80626ff3989d68f67f5b1dd12d9363b96213e493610743936000939092909101610a3a565b600060405180830381600087803b15801561075d57600080fd5b505af1158015610771573d6000803e3d6000fd5b50506040516370a0823160e01b8152600160048201526101179250600091506370a08231906024016101e8565b8082146108c5577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161080f9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16108c56108c9565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156109c45760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109639291602001610ad7565b60408051601f198184030181529082905261097d91610b08565b6000604051808303816000865af19150503d80600081146109ba576040519150601f19603f3d011682016040523d82523d6000602084013e6109bf565b606091505b505050505b6000805461ff001916610100179055565b61027a80610b4e83390190565b60005b838110156109fd5781810151838201526020016109e5565b838111156102b95750506000910152565b60008151808452610a268160208601602086016109e2565b601f01601f19169290920160200192915050565b6001600160a01b0384168152606060208201819052600090610a5e90830185610a0e565b8281036040840152610a708185610a0e565b9695505050505050565b600060208284031215610a8c57600080fd5b5051919050565b60018060a01b0385168152836020820152608060408201526000610aba6080830185610a0e565b8281036060840152610acc8185610a0e565b979650505050505050565b6001600160e01b0319831681528151600090610afa8160048501602087016109e2565b919091016004019392505050565b60008251610b1a8184602087016109e2565b9190910192915050565b600060208284031215610b3657600080fd5b81518015158114610b4657600080fd5b939250505056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea2646970667358221220a2e1e3002801e60ab4a6f05c5032836800c3ac718b6d0aa0b4b7b6d2168805b464736f6c634300080d0033a2646970667358221220f5577a6b560fa3ef1f7be29464bb1423aed75c68ceaae52d0e59a05de3d4a9e464736f6c634300080d0033" ) )
      
    
    syntax Field ::= MockCallTestField
    
    syntax MockCallTestField ::= "IS_TEST" [symbol(), klabel(field_MockCallTest_IS_TEST)]
    
    syntax MockCallTestField ::= "_failed" [symbol(), klabel(field_MockCallTest__failed)]
    
    syntax MockCallTestField ::= "IS_SCRIPT" [symbol(), klabel(field_MockCallTest_IS_SCRIPT)]
    
    syntax MockCallTestField ::= "stdstore" [symbol(), klabel(field_MockCallTest_stdstore)]
    
    rule  ( #loc ( MockCallTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( MockCallTest . _failed ) => 0 )
      
    
    rule  ( #loc ( MockCallTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( MockCallTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= MockCallTestContract "." MockCallTestMethod [function(), klabel(method_MockCallTest)]
    
    syntax MockCallTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_MockCallTest_IS_SCRIPT)]
    
    syntax MockCallTestMethod ::= "IS_TEST" "(" ")" [klabel(method_MockCallTest_IS_TEST)]
    
    syntax MockCallTestMethod ::= "failed" "(" ")" [klabel(method_MockCallTest_failed)]
    
    syntax MockCallTestMethod ::= "setUp" "(" ")" [klabel(method_MockCallTest_setUp)]
    
    syntax MockCallTestMethod ::= "testMockCall" "(" ")" [klabel(method_MockCallTest_testMockCall)]
    
    syntax MockCallTestMethod ::= "testMockCallValue" "(" ")" [klabel(method_MockCallTest_testMockCallValue)]
    
    syntax MockCallTestMethod ::= "testMockCalls" "(" ")" [klabel(method_MockCallTest_testMockCalls)]
    
    syntax MockCallTestMethod ::= "vm" "(" ")" [klabel(method_MockCallTest_vm)]
    
    rule  ( MockCallTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . testMockCall ( ) => #abiCallData ( "testMockCall" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . testMockCallValue ( ) => #abiCallData ( "testMockCallValue" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . testMockCalls ( ) => #abiCallData ( "testMockCalls" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testMockCall" ) => 3143830108 )
      
    
    rule  ( selector ( "testMockCallValue" ) => 1208641942 )
      
    
    rule  ( selector ( "testMockCalls" ) => 957910350 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module NONCETEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= NonceTestContract
    
    syntax NonceTestContract ::= "NonceTest" [klabel(contract_NonceTest)]
    
    rule  ( #binRuntime ( NonceTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610069578063ba414fa6146100a1578063d8cfdceb146100b9578063f8ccbf47146100cc578063fa7626d4146100df575b600080fd5b005b610084737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a96100ec565b6040519015158152602001610098565b6100676100c7366004610657565b610217565b6000546100a99062010000900460ff1681565b6000546100a99060ff1681565b60008054610100900460ff161561010c5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102125760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161019a917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc4916080016106b6565b60408051601f19818403018152908290526101b4916106da565b6000604051808303816000865af19150503d80600081146101f1576040519150601f19603f3d011682016040523d82523d6000602084013e6101f6565b606091505b509150508080602001905181019061020e91906106e6565b9150505b919050565b604051632d0335ab60e01b8152306004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90632d0335ab906024016020604051808303816000875af115801561026b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028f9190610708565b604051632631f2b160e11b815267ffffffffffffffff808316908516116004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b1580156102ed57600080fd5b505af1158015610301573d6000803e3d6000fd5b505060405163f8e18b5760e01b815230600482015267ffffffffffffffff85166024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f8e18b579150604401600060405180830381600087803b15801561036157600080fd5b505af1158015610375573d6000803e3d6000fd5b5050604051632d0335ab60e01b815230600482015261040c9250737109709ecfa91a80626ff3989d68f67f5b1dd12d9150632d0335ab906024016020604051808303816000875af11580156103ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103f29190610708565b67ffffffffffffffff168367ffffffffffffffff16610410565b5050565b80821461040c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104819060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161040c737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561062d5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526105cc92916020016106b6565b60408051601f19818403018152908290526105e6916106da565b6000604051808303816000865af19150503d8060008114610623576040519150601f19603f3d011682016040523d82523d6000602084013e610628565b606091505b505050505b6000805461ff001916610100179055565b67ffffffffffffffff8116811461065457600080fd5b50565b60006020828403121561066957600080fd5b81356106748161063e565b9392505050565b6000815160005b8181101561069c5760208185018101518683015201610682565b818111156106ab576000828601525b509290920192915050565b6001600160e01b03198316815260006106d2600483018461067b565b949350505050565b6000610674828461067b565b6000602082840312156106f857600080fd5b8151801515811461067457600080fd5b60006020828403121561071a57600080fd5b81516106748161063e56fea2646970667358221220c1f10f2325a0501df1018664ad3968ffed100e59070ce0976d283363e33d232964736f6c634300080d0033" ) )
      
    
    syntax Field ::= NonceTestField
    
    syntax NonceTestField ::= "IS_TEST" [symbol(), klabel(field_NonceTest_IS_TEST)]
    
    syntax NonceTestField ::= "_failed" [symbol(), klabel(field_NonceTest__failed)]
    
    syntax NonceTestField ::= "IS_SCRIPT" [symbol(), klabel(field_NonceTest_IS_SCRIPT)]
    
    syntax NonceTestField ::= "stdstore" [symbol(), klabel(field_NonceTest_stdstore)]
    
    rule  ( #loc ( NonceTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( NonceTest . _failed ) => 0 )
      
    
    rule  ( #loc ( NonceTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( NonceTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= NonceTestContract "." NonceTestMethod [function(), klabel(method_NonceTest)]
    
    syntax NonceTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_NonceTest_IS_SCRIPT)]
    
    syntax NonceTestMethod ::= "IS_TEST" "(" ")" [klabel(method_NonceTest_IS_TEST)]
    
    syntax NonceTestMethod ::= "failed" "(" ")" [klabel(method_NonceTest_failed)]
    
    syntax NonceTestMethod ::= "setUp" "(" ")" [klabel(method_NonceTest_setUp)]
    
    syntax NonceTestMethod ::= "testNonce" "(" Int ")" [klabel(method_NonceTest_testNonce)]
    
    syntax NonceTestMethod ::= "vm" "(" ")" [klabel(method_NonceTest_vm)]
    
    rule  ( NonceTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( NonceTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( NonceTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( NonceTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( NonceTest . testNonce ( V0_newNonce ) => #abiCallData ( "testNonce" , #uint64 ( V0_newNonce ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_newNonce )
      
    
    rule  ( NonceTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testNonce" ) => 3637501163 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module OWNERUPONLYTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= OwnerUpOnlyTestContract
    
    syntax OwnerUpOnlyTestContract ::= "OwnerUpOnlyTest" [klabel(contract_OwnerUpOnlyTest)]
    
    rule  ( #binRuntime ( OwnerUpOnlyTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa6146100df578063f8ccbf47146100f7578063fa7626d41461010a578063fd50a0811461011757600080fd5b80630a9254e41461008d5780633a768463146100975780634d9feb35146100cf578063760c01a7146100d7575b600080fd5b61009561011f565b005b6100b2737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61009561016a565b6100956102a4565b6100e7610405565b60405190151581526020016100c6565b6000546100e79062010000900460ff1681565b6000546100e79060ff1681565b610095610530565b60405161012b9061079f565b604051809103906000f080158015610147573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b604051630618f58760e51b81526282b42960e81b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b505060405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015b600060405180830381600087803b15801561022257600080fd5b505af1158015610236573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561028a57600080fd5b505af115801561029e573d6000803e3d6000fd5b50505050565b600854604080516306661abd60e01b8152905161031a926001600160a01b0316916306661abd9160048083019260209291908290030181865afa1580156102ef573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031391906107ac565b6000610568565b600860009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561036a57600080fd5b505af115801561037e573d6000803e3d6000fd5b50505050610403600860009054906101000a90046001600160a01b03166001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103fc91906107ac565b6001610568565b565b60008054610100900460ff16156104255750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561052b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916104b3917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610800565b60408051601f19818403018152908290526104cd91610824565b6000604051808303816000865af19150503d806000811461050a576040519150601f19603f3d011682016040523d82523d6000602084013e61050f565b606091505b50915050808060200190518101906105279190610837565b9150505b919050565b60405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401610208565b80821461068f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516105d99060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161068f610693565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561078e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261072d9291602001610800565b60408051601f198184030181529082905261074791610824565b6000604051808303816000865af19150503d8060008114610784576040519150601f19603f3d011682016040523d82523d6000602084013e610789565b606091505b505050505b6000805461ff001916610100179055565b61019b8061085a83390190565b6000602082840312156107be57600080fd5b5051919050565b6000815160005b818110156107e657602081850181015186830152016107cc565b818111156107f5576000828601525b509290920192915050565b6001600160e01b031983168152600061081c60048301846107c5565b949350505050565b600061083082846107c5565b9392505050565b60006020828403121561084957600080fd5b8151801515811461083057600080fdfe60a060405234801561001057600080fd5b5033608052608051610166610035600039600081816067015260b601526101666000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063d09de08a146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100f3576040516282b42960e81b815260040160405180910390fd5b60008054908061010283610109565b9190505550565b60006001820161012957634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220d97d79ce6005dfff95fc88f1bd8d0c967afa52d3d922a5bd033da4faf88f5ec264736f6c634300080d0033a264697066735822122084096911c3ff620972662198dc14d19687ec5a4e74ee77423470a023c4b64f0864736f6c634300080d0033" ) )
      
    
    syntax Field ::= OwnerUpOnlyTestField
    
    syntax OwnerUpOnlyTestField ::= "IS_TEST" [symbol(), klabel(field_OwnerUpOnlyTest_IS_TEST)]
    
    syntax OwnerUpOnlyTestField ::= "_failed" [symbol(), klabel(field_OwnerUpOnlyTest__failed)]
    
    syntax OwnerUpOnlyTestField ::= "IS_SCRIPT" [symbol(), klabel(field_OwnerUpOnlyTest_IS_SCRIPT)]
    
    syntax OwnerUpOnlyTestField ::= "stdstore" [symbol(), klabel(field_OwnerUpOnlyTest_stdstore)]
    
    syntax OwnerUpOnlyTestField ::= "upOnly" [symbol(), klabel(field_OwnerUpOnlyTest_upOnly)]
    
    rule  ( #loc ( OwnerUpOnlyTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( OwnerUpOnlyTest . _failed ) => 0 )
      
    
    rule  ( #loc ( OwnerUpOnlyTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( OwnerUpOnlyTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( OwnerUpOnlyTest . upOnly ) => 8 )
      
    
    syntax ByteArray ::= OwnerUpOnlyTestContract "." OwnerUpOnlyTestMethod [function(), klabel(method_OwnerUpOnlyTest)]
    
    syntax OwnerUpOnlyTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_OwnerUpOnlyTest_IS_SCRIPT)]
    
    syntax OwnerUpOnlyTestMethod ::= "IS_TEST" "(" ")" [klabel(method_OwnerUpOnlyTest_IS_TEST)]
    
    syntax OwnerUpOnlyTestMethod ::= "failed" "(" ")" [klabel(method_OwnerUpOnlyTest_failed)]
    
    syntax OwnerUpOnlyTestMethod ::= "setUp" "(" ")" [klabel(method_OwnerUpOnlyTest_setUp)]
    
    syntax OwnerUpOnlyTestMethod ::= "testFailIncrementAsNotOwner" "(" ")" [klabel(method_OwnerUpOnlyTest_testFailIncrementAsNotOwner)]
    
    syntax OwnerUpOnlyTestMethod ::= "testIncrementAsNotOwner" "(" ")" [klabel(method_OwnerUpOnlyTest_testIncrementAsNotOwner)]
    
    syntax OwnerUpOnlyTestMethod ::= "testIncrementAsOwner" "(" ")" [klabel(method_OwnerUpOnlyTest_testIncrementAsOwner)]
    
    syntax OwnerUpOnlyTestMethod ::= "vm" "(" ")" [klabel(method_OwnerUpOnlyTest_vm)]
    
    rule  ( OwnerUpOnlyTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . testFailIncrementAsNotOwner ( ) => #abiCallData ( "testFailIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . testIncrementAsNotOwner ( ) => #abiCallData ( "testIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . testIncrementAsOwner ( ) => #abiCallData ( "testIncrementAsOwner" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testFailIncrementAsNotOwner" ) => 4249919617 )
      
    
    rule  ( selector ( "testIncrementAsNotOwner" ) => 1302326069 )
      
    
    rule  ( selector ( "testIncrementAsOwner" ) => 1980498343 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module PRANKTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= PrankTestContract
    
    syntax PrankTestContract ::= "PrankTest" [klabel(contract_PrankTest)]
    
    rule  ( #binRuntime ( PrankTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= PrankTestField
    
    syntax PrankTestField ::= "IS_TEST" [symbol(), klabel(field_PrankTest_IS_TEST)]
    
    syntax PrankTestField ::= "_failed" [symbol(), klabel(field_PrankTest__failed)]
    
    syntax PrankTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PrankTest_IS_SCRIPT)]
    
    syntax PrankTestField ::= "stdstore" [symbol(), klabel(field_PrankTest_stdstore)]
    
    syntax PrankTestField ::= "prankContract" [symbol(), klabel(field_PrankTest_prankContract)]
    
    rule  ( #loc ( PrankTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( PrankTest . _failed ) => 0 )
      
    
    rule  ( #loc ( PrankTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( PrankTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( PrankTest . prankContract ) => 8 )
      
    
    syntax ByteArray ::= PrankTestContract "." PrankTestMethod [function(), klabel(method_PrankTest)]
    
    syntax PrankTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_PrankTest_IS_SCRIPT)]
    
    syntax PrankTestMethod ::= "IS_TEST" "(" ")" [klabel(method_PrankTest_IS_TEST)]
    
    syntax PrankTestMethod ::= "failed" "(" ")" [klabel(method_PrankTest_failed)]
    
    syntax PrankTestMethod ::= "setUp" "(" ")" [klabel(method_PrankTest_setUp)]
    
    syntax PrankTestMethod ::= "testAddAsOwner" "(" Int ")" [klabel(method_PrankTest_testAddAsOwner)]
    
    syntax PrankTestMethod ::= "testAddStartPrank" "(" Int ")" [klabel(method_PrankTest_testAddStartPrank)]
    
    syntax PrankTestMethod ::= "testFailAddPrank" "(" Int ")" [klabel(method_PrankTest_testFailAddPrank)]
    
    syntax PrankTestMethod ::= "testSubtractAsTxOrigin" "(" Int "," Int ")" [klabel(method_PrankTest_testSubtractAsTxOrigin)]
    
    syntax PrankTestMethod ::= "testSubtractFail" "(" Int ")" [klabel(method_PrankTest_testSubtractFail)]
    
    syntax PrankTestMethod ::= "testSubtractStartPrank" "(" Int "," Int ")" [klabel(method_PrankTest_testSubtractStartPrank)]
    
    syntax PrankTestMethod ::= "vm" "(" ")" [klabel(method_PrankTest_vm)]
    
    rule  ( PrankTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( PrankTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( PrankTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( PrankTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( PrankTest . testAddAsOwner ( V0_x ) => #abiCallData ( "testAddAsOwner" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( PrankTest . testAddStartPrank ( V0_x ) => #abiCallData ( "testAddStartPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( PrankTest . testFailAddPrank ( V0_x ) => #abiCallData ( "testFailAddPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( PrankTest . testSubtractAsTxOrigin ( V0_addValue , V1_subValue ) => #abiCallData ( "testSubtractAsTxOrigin" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( PrankTest . testSubtractFail ( V0_x ) => #abiCallData ( "testSubtractFail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( PrankTest . testSubtractStartPrank ( V0_addValue , V1_subValue ) => #abiCallData ( "testSubtractStartPrank" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( PrankTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testAddAsOwner" ) => 1600382513 )
      
    
    rule  ( selector ( "testAddStartPrank" ) => 1333759955 )
      
    
    rule  ( selector ( "testFailAddPrank" ) => 948023622 )
      
    
    rule  ( selector ( "testSubtractAsTxOrigin" ) => 3798952319 )
      
    
    rule  ( selector ( "testSubtractFail" ) => 1433390937 )
      
    
    rule  ( selector ( "testSubtractStartPrank" ) => 262874110 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module RECORDLOGSTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= RecordLogsTestContract
    
    syntax RecordLogsTestContract ::= "RecordLogsTest" [klabel(contract_RecordLogsTest)]
    
    rule  ( #binRuntime ( RecordLogsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610071578063ba414fa6146100a9578063d7f89958146100c1578063f8ccbf47146100c9578063fa7626d4146100dc575b600080fd5b61006f6100e9565b005b61008c737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b1610198565b60405190151581526020016100a0565b61006f6102c3565b6000546100b19062010000900460ff1681565b6000546100b19060ff1681565b6040516100f59061074f565b604051809103906000f080158015610111573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055604080516320d797a960e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d916341af2f5291600480830192600092919082900301818387803b15801561017e57600080fd5b505af1158015610192573d6000803e3d6000fd5b50505050565b60008054610100900460ff16156101b85750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102be5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610246917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610787565b60408051601f1981840301815290829052610260916107b8565b6000604051808303816000865af19150503d806000811461029d576040519150601f19603f3d011682016040523d82523d6000602084013e6102a2565b606091505b50915050808060200190518101906102ba91906107d4565b9150505b919050565b600860009054906101000a90046001600160a01b03166001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561031357600080fd5b505af1158015610327573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610396573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103be91908101906108fd565b90506103cc8151600161046e565b61042e816000815181106103e2576103e2610a5e565b60200260200101516000015160008151811061040057610400610a5e565b60200260200101517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef610561565b61046b8160008151811061044457610444610a5e565b6020026020010151602001518060200190518101906104639190610a74565b61053961046e565b50565b80821461055d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104df9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516105169190610a8d565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405161054d9190610ac5565b60405180910390a161055d610643565b5050565b80821461055d577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516105d59060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f998160405161060c9190610a8d565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f998260405161054d9190610ac5565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561073e5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526106dd9291602001610787565b60408051601f19818403018152908290526106f7916107b8565b6000604051808303816000865af19150503d8060008114610734576040519150601f19603f3d011682016040523d82523d6000602084013e610739565b606091505b505050505b6000805461ff001916610100179055565b60c480610af083390190565b60005b8381101561077657818101518382015260200161075e565b838111156101925750506000910152565b6001600160e01b03198316815281516000906107aa81600485016020870161075b565b919091016004019392505050565b600082516107ca81846020870161075b565b9190910192915050565b6000602082840312156107e657600080fd5b815180151581146107f657600080fd5b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610836576108366107fd565b60405290565b604051601f8201601f1916810167ffffffffffffffff81118282101715610865576108656107fd565b604052919050565b600067ffffffffffffffff821115610887576108876107fd565b5060051b60200190565b600082601f8301126108a257600080fd5b815167ffffffffffffffff8111156108bc576108bc6107fd565b6108cf601f8201601f191660200161083c565b8181528460208386010111156108e457600080fd5b6108f582602083016020870161075b565b949350505050565b6000602080838503121561091057600080fd5b825167ffffffffffffffff8082111561092857600080fd5b818501915085601f83011261093c57600080fd5b815161094f61094a8261086d565b61083c565b81815260059190911b8301840190848101908883111561096e57600080fd5b8585015b83811015610a515780518581111561098957600080fd5b86016040818c03601f1901121561099f57600080fd5b6109a7610813565b88820151878111156109b857600080fd5b8201603f81018d136109c957600080fd5b898101516109d961094a8261086d565b81815260059190911b8201604001908b8101908f8311156109f957600080fd5b6040840193505b82841015610a195783518252928c0192908c0190610a00565b8452505050604082015187811115610a3057600080fd5b610a3e8d8b83860101610891565b828b015250845250918601918601610972565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b600060208284031215610a8657600080fd5b5051919050565b604081526000610ab760408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b604081526000610ab760408301600a815269080808081058dd1d585b60b21b60208201526040019056fe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea2646970667358221220c4ed2c9244ece564e9b30685992756e975e6e312d658109ba3d16f0a280c7e6d64736f6c634300080d0033a2646970667358221220c3173837979b2a75eeb0eef76711a7827d7b9cdfc12c5451f1067629295ffba864736f6c634300080d0033" ) )
      
    
    syntax Field ::= RecordLogsTestField
    
    syntax RecordLogsTestField ::= "IS_TEST" [symbol(), klabel(field_RecordLogsTest_IS_TEST)]
    
    syntax RecordLogsTestField ::= "_failed" [symbol(), klabel(field_RecordLogsTest__failed)]
    
    syntax RecordLogsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_RecordLogsTest_IS_SCRIPT)]
    
    syntax RecordLogsTestField ::= "stdstore" [symbol(), klabel(field_RecordLogsTest_stdstore)]
    
    syntax RecordLogsTestField ::= "emitter" [symbol(), klabel(field_RecordLogsTest_emitter)]
    
    rule  ( #loc ( RecordLogsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( RecordLogsTest . _failed ) => 0 )
      
    
    rule  ( #loc ( RecordLogsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( RecordLogsTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( RecordLogsTest . emitter ) => 8 )
      
    
    syntax ByteArray ::= RecordLogsTestContract "." RecordLogsTestMethod [function(), klabel(method_RecordLogsTest)]
    
    syntax RecordLogsTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_RecordLogsTest_IS_SCRIPT)]
    
    syntax RecordLogsTestMethod ::= "IS_TEST" "(" ")" [klabel(method_RecordLogsTest_IS_TEST)]
    
    syntax RecordLogsTestMethod ::= "failed" "(" ")" [klabel(method_RecordLogsTest_failed)]
    
    syntax RecordLogsTestMethod ::= "setUp" "(" ")" [klabel(method_RecordLogsTest_setUp)]
    
    syntax RecordLogsTestMethod ::= "testRecordLogs" "(" ")" [klabel(method_RecordLogsTest_testRecordLogs)]
    
    syntax RecordLogsTestMethod ::= "vm" "(" ")" [klabel(method_RecordLogsTest_vm)]
    
    rule  ( RecordLogsTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . testRecordLogs ( ) => #abiCallData ( "testRecordLogs" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testRecordLogs" ) => 3623393624 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module SAFETEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= SafeTestContract
    
    syntax SafeTestContract ::= "SafeTest" [klabel(contract_SafeTest)]
    
    rule  ( #binRuntime ( SafeTest ) => #parseByteStack ( "0x6080604052600436106100745760003560e01c8063d0da5a0a1161004e578063d0da5a0a14610101578063d509b16c14610121578063f8ccbf4714610136578063fa7626d41461015657600080fd5b80630a9254e4146100805780633a76846314610097578063ba414fa6146100dc57600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b50610095610170565b005b3480156100a357600080fd5b506100bf737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100e857600080fd5b506100f16101bb565b60405190151581526020016100d3565b34801561010d57600080fd5b5061009561011c366004610715565b6102e6565b34801561012d57600080fd5b50610095610423565b34801561014257600080fd5b506000546100f19062010000900460ff1681565b34801561016257600080fd5b506000546100f19060ff1681565b60405161017c90610709565b604051809103906000f080158015610198573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b60008054610100900460ff16156101db5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102e15760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610269917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610780565b60408051601f1981840301815290829052610283916107a4565b6000604051808303816000865af19150503d80600081146102c0576040519150601f19603f3d011682016040523d82523d6000602084013e6102c5565b606091505b50915050808060200190518101906102dd91906107b0565b9150505b919050565b604051632631f2b160e11b815267016345785d8a00006001600160601b038316116004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561034557600080fd5b505af1158015610359573d6000803e3d6000fd5b50506008546040516001600160a01b0390911692506001600160601b03841680156108fc029250906000818181858888f193505050501580156103a0573d6000803e3d6000fd5b5060085460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b1580156103e657600080fd5b505af11580156103fa573d6000803e3d6000fd5b5047925061041e915061041890506001600160601b038516846107d2565b826104db565b505050565b6008546040516001600160a01b0390911690600090670de0b6b3a76400009082818181858883f19350505050158015610460573d6000803e3d6000fd5b5060085460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b1580156104a657600080fd5b505af11580156104ba573d6000803e3d6000fd5b504792506104d79150610418905083670de0b6b3a76400006107d2565b5050565b8082146104d7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161054c9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16104d7737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106f85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526106979291602001610780565b60408051601f19818403018152908290526106b1916107a4565b6000604051808303816000865af19150503d80600081146106ee576040519150601f19603f3d011682016040523d82523d6000602084013e6106f3565b606091505b505050505b6000805461ff001916610100179055565b60c1806107f983390190565b60006020828403121561072757600080fd5b81356001600160601b038116811461073e57600080fd5b9392505050565b6000815160005b81811015610766576020818501810151868301520161074c565b81811115610775576000828601525b509290920192915050565b6001600160e01b031983168152600061079c6004830184610745565b949350505050565b600061073e8284610745565b6000602082840312156107c257600080fd5b8151801515811461073e57600080fd5b600082198211156107f357634e487b7160e01b600052601160045260246000fd5b50019056fe6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220208050e56f5bea1e231c136f36e3b9b3d9540900983bf725155d1cab0cd8dfe564736f6c634300080d0033a2646970667358221220a42b67554dd209f0fdacdb23d26524d3f533860c74062b992cc5836f8a8432b964736f6c634300080d0033" ) )
      
    
    syntax Field ::= SafeTestField
    
    syntax SafeTestField ::= "IS_TEST" [symbol(), klabel(field_SafeTest_IS_TEST)]
    
    syntax SafeTestField ::= "_failed" [symbol(), klabel(field_SafeTest__failed)]
    
    syntax SafeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SafeTest_IS_SCRIPT)]
    
    syntax SafeTestField ::= "stdstore" [symbol(), klabel(field_SafeTest_stdstore)]
    
    syntax SafeTestField ::= "safe" [symbol(), klabel(field_SafeTest_safe)]
    
    rule  ( #loc ( SafeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( SafeTest . _failed ) => 0 )
      
    
    rule  ( #loc ( SafeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( SafeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( SafeTest . safe ) => 8 )
      
    
    syntax ByteArray ::= SafeTestContract "." SafeTestMethod [function(), klabel(method_SafeTest)]
    
    syntax SafeTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_SafeTest_IS_SCRIPT)]
    
    syntax SafeTestMethod ::= "IS_TEST" "(" ")" [klabel(method_SafeTest_IS_TEST)]
    
    syntax SafeTestMethod ::= "failed" "(" ")" [klabel(method_SafeTest_failed)]
    
    syntax SafeTestMethod ::= "setUp" "(" ")" [klabel(method_SafeTest_setUp)]
    
    syntax SafeTestMethod ::= "testWithdraw" "(" ")" [klabel(method_SafeTest_testWithdraw)]
    
    syntax SafeTestMethod ::= "testWithdrawFuzz" "(" Int ")" [klabel(method_SafeTest_testWithdrawFuzz)]
    
    syntax SafeTestMethod ::= "vm" "(" ")" [klabel(method_SafeTest_vm)]
    
    rule  ( SafeTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( SafeTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( SafeTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( SafeTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( SafeTest . testWithdraw ( ) => #abiCallData ( "testWithdraw" , .TypedArgs ) )
      
    
    rule  ( SafeTest . testWithdrawFuzz ( V0_amount ) => #abiCallData ( "testWithdrawFuzz" , #uint96 ( V0_amount ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_amount )
      
    
    rule  ( SafeTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testWithdraw" ) => 3574182252 )
      
    
    rule  ( selector ( "testWithdrawFuzz" ) => 3503970826 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module SETUPTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= SetUpTestContract
    
    syntax SetUpTestContract ::= "SetUpTest" [klabel(contract_SetUpTest)]
    
    rule  ( #binRuntime ( SetUpTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c6a19dd21161005b578063c6a19dd2146100dc578063ec7fe471146100ef578063f8ccbf47146100f7578063fa7626d41461010a57600080fd5b80630a9254e4146100825780633a7684631461008c578063ba414fa6146100c4575b600080fd5b61008a610117565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100cc61012e565b60405190151581526020016100bb565b61008a6100ea3660046104b9565b610259565b61008a610273565b6000546100cc9062010000900460ff1681565b6000546100cc9060ff1681565b60088054906000610127836104d2565b9190505550565b60008054610100900460ff161561014e5750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102545760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b828401528251808303840181526060830190935260009290916101dc917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610534565b60408051601f19818403018152908290526101f691610558565b6000604051808303816000865af19150503d8060008114610233576040519150601f19603f3d011682016040523d82523d6000602084013e610238565b606091505b5091505080806020019051810190610250919061056b565b9150505b919050565b6102666008546065610282565b6102708182610282565b50565b6102806008546065610282565b565b8082146103a9577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516102f39060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16103a96103ad565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104a85760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526104479291602001610534565b60408051601f198184030181529082905261046191610558565b6000604051808303816000865af19150503d806000811461049e576040519150601f19603f3d011682016040523d82523d6000602084013e6104a3565b606091505b505050505b6000805461ff001916610100179055565b6000602082840312156104cb57600080fd5b5035919050565b6000600182016104f257634e487b7160e01b600052601160045260246000fd5b5060010190565b6000815160005b8181101561051a5760208185018101518683015201610500565b81811115610529576000828601525b509290920192915050565b6001600160e01b031983168152600061055060048301846104f9565b949350505050565b600061056482846104f9565b9392505050565b60006020828403121561057d57600080fd5b8151801515811461056457600080fdfea26469706673582212202d664bcae6e94c728e8a3068b96363417de52d1957f4bb60064b67af705a1c4a64736f6c634300080d0033" ) )
      
    
    syntax Field ::= SetUpTestField
    
    syntax SetUpTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpTest_IS_TEST)]
    
    syntax SetUpTestField ::= "_failed" [symbol(), klabel(field_SetUpTest__failed)]
    
    syntax SetUpTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SetUpTest_IS_SCRIPT)]
    
    syntax SetUpTestField ::= "stdstore" [symbol(), klabel(field_SetUpTest_stdstore)]
    
    syntax SetUpTestField ::= "counter" [symbol(), klabel(field_SetUpTest_counter)]
    
    rule  ( #loc ( SetUpTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( SetUpTest . _failed ) => 0 )
      
    
    rule  ( #loc ( SetUpTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( SetUpTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( SetUpTest . counter ) => 8 )
      
    
    syntax ByteArray ::= SetUpTestContract "." SetUpTestMethod [function(), klabel(method_SetUpTest)]
    
    syntax SetUpTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_SetUpTest_IS_SCRIPT)]
    
    syntax SetUpTestMethod ::= "IS_TEST" "(" ")" [klabel(method_SetUpTest_IS_TEST)]
    
    syntax SetUpTestMethod ::= "failed" "(" ")" [klabel(method_SetUpTest_failed)]
    
    syntax SetUpTestMethod ::= "setUp" "(" ")" [klabel(method_SetUpTest_setUp)]
    
    syntax SetUpTestMethod ::= "testSetUpCalled" "(" ")" [klabel(method_SetUpTest_testSetUpCalled)]
    
    syntax SetUpTestMethod ::= "testSetUpCalledSymbolic" "(" Int ")" [klabel(method_SetUpTest_testSetUpCalledSymbolic)]
    
    syntax SetUpTestMethod ::= "vm" "(" ")" [klabel(method_SetUpTest_vm)]
    
    rule  ( SetUpTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . testSetUpCalled ( ) => #abiCallData ( "testSetUpCalled" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . testSetUpCalledSymbolic ( V0_x ) => #abiCallData ( "testSetUpCalledSymbolic" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( SetUpTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testSetUpCalled" ) => 3967804529 )
      
    
    rule  ( selector ( "testSetUpCalledSymbolic" ) => 3332480466 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module SIGNTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= SignTestContract
    
    syntax SignTestContract ::= "SignTest" [klabel(contract_SignTest)]
    
    rule  ( #binRuntime ( SignTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610069578063ba414fa6146100a1578063ed8f10df146100b9578063f8ccbf47146100c1578063fa7626d4146100d4575b600080fd5b005b610084737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a96100e1565b6040519015158152602001610098565b61006761020c565b6000546100a99062010000900460ff1681565b6000546100a99060ff1681565b60008054610100900460ff16156101015750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102075760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161018f917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc49160800161064b565b60408051601f19818403018152908290526101a99161066f565b6000604051808303816000865af19150503d80600081146101e6576040519150601f19603f3d011682016040523d82523d6000602084013e6101eb565b606091505b50915050808060200190518101906102039190610682565b9150505b919050565b6040516001625e79b760e01b0319815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015610264573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028891906106a4565b6040516338d07aa960e21b8152600160048201527f385967023fb9520b497ee37da9c1e3d5faac1385800ce4ed07ca32d7893c7bb56024820181905291925060009081908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e341eaa4906044016060604051808303816000875af115801561030c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033091906106cd565b925092509250600060018585858560405160008152602001604052604051610374949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610396573d6000803e3d6000fd5b5050506020604051035190506103ac86826103b4565b505050505050565b806001600160a01b0316826001600160a01b031614610500577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161043a9060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a1610500610504565b5050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156105ff5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261059e929160200161064b565b60408051601f19818403018152908290526105b89161066f565b6000604051808303816000865af19150503d80600081146105f5576040519150601f19603f3d011682016040523d82523d6000602084013e6105fa565b606091505b505050505b6000805461ff001916610100179055565b6000815160005b818110156106315760208185018101518683015201610617565b81811115610640576000828601525b509290920192915050565b6001600160e01b03198316815260006106676004830184610610565b949350505050565b600061067b8284610610565b9392505050565b60006020828403121561069457600080fd5b8151801515811461067b57600080fd5b6000602082840312156106b657600080fd5b81516001600160a01b038116811461067b57600080fd5b6000806000606084860312156106e257600080fd5b835160ff811681146106f357600080fd5b60208501516040909501519096949550939250505056fea2646970667358221220dd43be43c70b41f08886fcd8af8bd59ad6fabf1dfb052414b6b0f4b5196e925064736f6c634300080d0033" ) )
      
    
    syntax Field ::= SignTestField
    
    syntax SignTestField ::= "IS_TEST" [symbol(), klabel(field_SignTest_IS_TEST)]
    
    syntax SignTestField ::= "_failed" [symbol(), klabel(field_SignTest__failed)]
    
    syntax SignTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SignTest_IS_SCRIPT)]
    
    syntax SignTestField ::= "stdstore" [symbol(), klabel(field_SignTest_stdstore)]
    
    rule  ( #loc ( SignTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( SignTest . _failed ) => 0 )
      
    
    rule  ( #loc ( SignTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( SignTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= SignTestContract "." SignTestMethod [function(), klabel(method_SignTest)]
    
    syntax SignTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_SignTest_IS_SCRIPT)]
    
    syntax SignTestMethod ::= "IS_TEST" "(" ")" [klabel(method_SignTest_IS_TEST)]
    
    syntax SignTestMethod ::= "failed" "(" ")" [klabel(method_SignTest_failed)]
    
    syntax SignTestMethod ::= "setUp" "(" ")" [klabel(method_SignTest_setUp)]
    
    syntax SignTestMethod ::= "testSign" "(" ")" [klabel(method_SignTest_testSign)]
    
    syntax SignTestMethod ::= "vm" "(" ")" [klabel(method_SignTest_vm)]
    
    rule  ( SignTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( SignTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( SignTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( SignTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( SignTest . testSign ( ) => #abiCallData ( "testSign" , .TypedArgs ) )
      
    
    rule  ( SignTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testSign" ) => 3985576159 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module ASSERTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= AssertTestContract
    
    syntax AssertTestContract ::= "AssertTest" [klabel(contract_AssertTest)]
    
    rule  ( #binRuntime ( AssertTest ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060505760003560e01c80630a9254e414605557806318675d42146055578063360da4d21460555780635ddecbfd1460575780637aa9ccae146057575b600080fd5b005b6055605f565b565b605d634e487b7160e01b600052600160045260246000fdfea26469706673582212209019657366e075e5682962ec1c8a2b226a839454dd5d9134495e8ffe89a3e1bb64736f6c634300080d0033" ) )
      
    
    syntax ByteArray ::= AssertTestContract "." AssertTestMethod [function(), klabel(method_AssertTest)]
    
    syntax AssertTestMethod ::= "setUp" "(" ")" [klabel(method_AssertTest_setUp)]
    
    syntax AssertTestMethod ::= "testFail_assert_false" "(" ")" [klabel(method_AssertTest_testFail_assert_false)]
    
    syntax AssertTestMethod ::= "testFail_assert_true" "(" ")" [klabel(method_AssertTest_testFail_assert_true)]
    
    syntax AssertTestMethod ::= "test_assert_false" "(" ")" [klabel(method_AssertTest_test_assert_false)]
    
    syntax AssertTestMethod ::= "test_assert_true" "(" ")" [klabel(method_AssertTest_test_assert_true)]
    
    rule  ( AssertTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( AssertTest . testFail_assert_false ( ) => #abiCallData ( "testFail_assert_false" , .TypedArgs ) )
      
    
    rule  ( AssertTest . testFail_assert_true ( ) => #abiCallData ( "testFail_assert_true" , .TypedArgs ) )
      
    
    rule  ( AssertTest . test_assert_false ( ) => #abiCallData ( "test_assert_false" , .TypedArgs ) )
      
    
    rule  ( AssertTest . test_assert_true ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testFail_assert_false" ) => 2057948334 )
      
    
    rule  ( selector ( "testFail_assert_true" ) => 409427266 )
      
    
    rule  ( selector ( "test_assert_false" ) => 1574882301 )
      
    
    rule  ( selector ( "test_assert_true" ) => 906863826 )
      

endmodule

module SNAPSHOTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= SnapshotTestContract
    
    syntax SnapshotTestContract ::= "SnapshotTest" [klabel(contract_SnapshotTest)]
    
    rule  ( #binRuntime ( SnapshotTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610078578063ba414fa6146100b0578063befb3b8a146100c8578063f8ccbf47146100d0578063fa7626d4146100e3575b600080fd5b610076600a6008556014600955565b005b610093737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b86100f0565b60405190151581526020016100a7565b61007661021b565b6000546100b89062010000900460ff1681565b6000546100b89060ff1681565b60008054610100900460ff16156101105750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156102165760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b8284015282518083038401815260608301909352600092909161019e917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610654565b60408051601f19818403018152908290526101b891610685565b6000604051808303816000865af19150503d80600081146101f5576040519150601f19603f3d011682016040523d82523d6000602084013e6101fa565b606091505b509150508080602001905181019061021291906106a1565b9150505b919050565b60007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610286573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102aa91906106ca565b61012c60088190556101906009559091506102c590806103a0565b6009546102d4906101906103a0565b604051631135fc2960e21b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906344d7f0a4906024016020604051808303816000875af1158015610326573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061034a91906106a1565b50610374600860000154600a60405180606001604052806027815260200161075a602791396104cb565b61039d6008600101546014604051806060016040528060278152602001610733602791396104cb565b50565b8082146104c7577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104119060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16104c7610518565b5050565b818314610513577f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838160405161050191906106e3565b60405180910390a161051383836103a0565b505050565b737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106135760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526105b29291602001610654565b60408051601f19818403018152908290526105cc91610685565b6000604051808303816000865af19150503d8060008114610609576040519150601f19603f3d011682016040523d82523d6000602084013e61060e565b606091505b505050505b6000805461ff001916610100179055565b60005b8381101561063f578181015183820152602001610627565b8381111561064e576000848401525b50505050565b6001600160e01b0319831681528151600090610677816004850160208701610624565b919091016004019392505050565b60008251610697818460208701610624565b9190910192915050565b6000602082840312156106b357600080fd5b815180151581146106c357600080fd5b9392505050565b6000602082840312156106dc57600080fd5b5051919050565b60408152600560408201526422b93937b960d91b6060820152608060208201526000825180608084015261071e8160a0850160208701610624565b601f01601f19169190910160a0019291505056fe736e617073686f742072657665727420666f7220736c6f74203120756e7375636365737366756c736e617073686f742072657665727420666f7220736c6f74203020756e7375636365737366756ca2646970667358221220797b6114d8d0f1edc6e92acd2f5857fe8e929df7dd42a7d23d6289ef1655126064736f6c634300080d0033" ) )
      
    
    syntax Field ::= SnapshotTestField
    
    syntax SnapshotTestField ::= "IS_TEST" [symbol(), klabel(field_SnapshotTest_IS_TEST)]
    
    syntax SnapshotTestField ::= "_failed" [symbol(), klabel(field_SnapshotTest__failed)]
    
    syntax SnapshotTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SnapshotTest_IS_SCRIPT)]
    
    syntax SnapshotTestField ::= "stdstore" [symbol(), klabel(field_SnapshotTest_stdstore)]
    
    syntax SnapshotTestField ::= "store" [symbol(), klabel(field_SnapshotTest_store)]
    
    rule  ( #loc ( SnapshotTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( SnapshotTest . _failed ) => 0 )
      
    
    rule  ( #loc ( SnapshotTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( SnapshotTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( SnapshotTest . store ) => 8 )
      
    
    syntax ByteArray ::= SnapshotTestContract "." SnapshotTestMethod [function(), klabel(method_SnapshotTest)]
    
    syntax SnapshotTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_SnapshotTest_IS_SCRIPT)]
    
    syntax SnapshotTestMethod ::= "IS_TEST" "(" ")" [klabel(method_SnapshotTest_IS_TEST)]
    
    syntax SnapshotTestMethod ::= "failed" "(" ")" [klabel(method_SnapshotTest_failed)]
    
    syntax SnapshotTestMethod ::= "setUp" "(" ")" [klabel(method_SnapshotTest_setUp)]
    
    syntax SnapshotTestMethod ::= "testSnapshot" "(" ")" [klabel(method_SnapshotTest_testSnapshot)]
    
    syntax SnapshotTestMethod ::= "vm" "(" ")" [klabel(method_SnapshotTest_vm)]
    
    rule  ( SnapshotTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . testSnapshot ( ) => #abiCallData ( "testSnapshot" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testSnapshot" ) => 3204135818 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module STORE-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= StoreContract
    
    syntax StoreContract ::= "Store" [klabel(contract_Store)]
    
    rule  ( #binRuntime ( Store ) => #parseByteStack ( "0x6080604052600080fdfea264697066735822122035d8e78e0625d898206f5972de53e4ad562a71e952947c155dd520c0d687837264736f6c634300080d0033" ) )
      
    
    syntax Field ::= StoreField
    
    syntax StoreField ::= "testNumber" [symbol(), klabel(field_Store_testNumber)]
    
    rule  ( #loc ( Store . testNumber ) => 0 )
      

endmodule

module STORETEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= StoreTestContract
    
    syntax StoreTestContract ::= "StoreTest" [klabel(contract_StoreTest)]
    
    rule  ( #binRuntime ( StoreTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063480880731161005b57806348088073146100cc578063ba414fa6146100d4578063f8ccbf47146100ec578063fa7626d4146100ff57600080fd5b806309840bb5146100825780630a9254e41461008c5780633a76846314610094575b600080fd5b61008a61010c565b005b61008a6101b7565b6100af737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008a610266565b6100dc610383565b60405190151581526020016100c3565b6000546100dc9062010000900460ff1681565b6000546100dc9060ff1681565b6008546040516365bc948160e01b81526001600160a01b0390911660048201526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d906365bc9481906024016000604051808303816000875af115801561016f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101979190810190610799565b915091506101a7825160016104ae565b6101b3815160016104ae565b5050565b6040805163266cf10960e01b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d9163266cf10991600480830192600092919082900301818387803b15801561020357600080fd5b505af1158015610217573d6000803e3d6000fd5b50505050604051610227906106dc565b604051809103906000f080158015610243573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b6008546040516370ca10bb60e01b81526001600160a01b03909116600482015260006024820152617a696044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906370ca10bb90606401600060405180830381600087803b1580156102ce57600080fd5b505af11580156102e2573d6000803e3d6000fd5b5050600854604051630667f9d760e41b81526001600160a01b0390911660048201526000602482018190529250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063667f9d70906044016020604051808303816000875af115801561034e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037291906107fd565b905061038081617a696104ae565b50565b60008054610100900460ff16156103a35750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156104a95760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610431917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610851565b60408051601f198184030181529082905261044b91610875565b6000604051808303816000865af19150503d8060008114610488576040519150601f19603f3d011682016040523d82523d6000602084013e61048d565b606091505b50915050808060200190518101906104a59190610888565b9150505b919050565b8082146101b3577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161051f9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16101b3737109709ecfa91a80626ff3989d68f67f5b1dd12d3b156106cb5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f198184030181529082905261066a9291602001610851565b60408051601f198184030181529082905261068491610875565b6000604051808303816000865af19150503d80600081146106c1576040519150601f19603f3d011682016040523d82523d6000602084013e6106c6565b606091505b505050505b6000805461ff001916610100179055565b6062806108ab83390190565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261070f57600080fd5b8151602067ffffffffffffffff8083111561072c5761072c6106e8565b8260051b604051601f19603f83011681018181108482111715610751576107516106e8565b60405293845285810183019383810192508785111561076f57600080fd5b83870191505b8482101561078e57815183529183019190830190610775565b979650505050505050565b600080604083850312156107ac57600080fd5b825167ffffffffffffffff808211156107c457600080fd5b6107d0868387016106fe565b935060208501519150808211156107e657600080fd5b506107f3858286016106fe565b9150509250929050565b60006020828403121561080f57600080fd5b5051919050565b6000815160005b81811015610837576020818501810151868301520161081d565b81811115610846576000828601525b509290920192915050565b6001600160e01b031983168152600061086d6004830184610816565b949350505050565b60006108818284610816565b9392505050565b60006020828403121561089a57600080fd5b8151801515811461088157600080fdfe6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea264697066735822122035d8e78e0625d898206f5972de53e4ad562a71e952947c155dd520c0d687837264736f6c634300080d0033a264697066735822122048ecf2596cbb19dc5ff6d227e2b66f60359d3668fcdcbfd167f066dc720e5c3964736f6c634300080d0033" ) )
      
    
    syntax Field ::= StoreTestField
    
    syntax StoreTestField ::= "IS_TEST" [symbol(), klabel(field_StoreTest_IS_TEST)]
    
    syntax StoreTestField ::= "_failed" [symbol(), klabel(field_StoreTest__failed)]
    
    syntax StoreTestField ::= "IS_SCRIPT" [symbol(), klabel(field_StoreTest_IS_SCRIPT)]
    
    syntax StoreTestField ::= "stdstore" [symbol(), klabel(field_StoreTest_stdstore)]
    
    syntax StoreTestField ::= "myStore" [symbol(), klabel(field_StoreTest_myStore)]
    
    rule  ( #loc ( StoreTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( StoreTest . _failed ) => 0 )
      
    
    rule  ( #loc ( StoreTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( StoreTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( StoreTest . myStore ) => 8 )
      
    
    syntax ByteArray ::= StoreTestContract "." StoreTestMethod [function(), klabel(method_StoreTest)]
    
    syntax StoreTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_StoreTest_IS_SCRIPT)]
    
    syntax StoreTestMethod ::= "IS_TEST" "(" ")" [klabel(method_StoreTest_IS_TEST)]
    
    syntax StoreTestMethod ::= "failed" "(" ")" [klabel(method_StoreTest_failed)]
    
    syntax StoreTestMethod ::= "setUp" "(" ")" [klabel(method_StoreTest_setUp)]
    
    syntax StoreTestMethod ::= "testAccesses" "(" ")" [klabel(method_StoreTest_testAccesses)]
    
    syntax StoreTestMethod ::= "testStoreLoad" "(" ")" [klabel(method_StoreTest_testStoreLoad)]
    
    syntax StoreTestMethod ::= "vm" "(" ")" [klabel(method_StoreTest_vm)]
    
    rule  ( StoreTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( StoreTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( StoreTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( StoreTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( StoreTest . testAccesses ( ) => #abiCallData ( "testAccesses" , .TypedArgs ) )
      
    
    rule  ( StoreTest . testStoreLoad ( ) => #abiCallData ( "testStoreLoad" , .TypedArgs ) )
      
    
    rule  ( StoreTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testAccesses" ) => 159648693 )
      
    
    rule  ( selector ( "testStoreLoad" ) => 1208516723 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module TOSTRINGTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= ToStringTestContract
    
    syntax ToStringTestContract ::= "ToStringTest" [klabel(contract_ToStringTest)]
    
    rule  ( #binRuntime ( ToStringTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806353538af91161006657806353538af9146100fd578063ba414fa614610105578063f0cb13fb1461011d578063f8ccbf4714610125578063fa7626d41461013857600080fd5b806305e65172146100a35780630c35d2ac146100ad578063302ab09d146100b55780633a768463146100bd578063416c8c83146100f5575b600080fd5b6100ab610145565b005b6100ab6101f2565b6100ab610295565b6100d8737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab61034c565b6100ab610497565b61010d610565565b60405190151581526020016100ec565b6100ab610690565b60005461010d9062010000900460ff1681565b60005461010d9060ff1681565b60405163348051d760e11b81526104d26004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024016000604051808303816000875af115801561019e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101c691908101906109c1565b90506101ee604051806040016040528060048152602001630c4c8ccd60e21b81525082610737565b5050565b604051631623433d60e31b8152600060048201819052908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063b11a19e8906024016000604051808303816000875af1158015610249573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027191908101906109c1565b90506101ee604051806080016040528060428152602001610bb66042913982610737565b604051632b65311f60e11b815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906356ca623e906024016000604051808303816000875af1158015610300573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261032891908101906109c1565b90506101ee6040518060600160405280602a8152602001610bf8602a913982610737565b6040516338ee73ed60e11b815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da906024016000604051808303816000875af11580156103a1573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103c991908101906109c1565b90506103f1604051806040016040528060048152602001637472756560e01b81525082610737565b6040516338ee73ed60e11b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da906024016000604051808303816000875af1158015610443573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261046b91908101906109c1565b90506104946040518060400160405280600581526020016466616c736560d81b81525082610737565b50565b60408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516371aad10d60e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371aad10d906104fa908590600401610a9a565b6000604051808303816000875af1158015610519573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054191908101906109c1565b90506101ee6040518060600160405280602a8152602001610b8c602a913982610737565b60008054610100900460ff16156105855750600054610100900460ff1690565b6000737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561068b5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b82840152825180830384018152606083019093526000929091610613917f667f9d70ca411d70ead50d8d5c22070dafc36ad75f3dcf5e7237b22ade9aecc491608001610ab4565b60408051601f198184030181529082905261062d91610ae5565b6000604051808303816000865af19150503d806000811461066a576040519150601f19603f3d011682016040523d82523d6000602084013e61066f565b606091505b50915050808060200190518101906106879190610b01565b9150505b919050565b604051635191620760e11b81526104d1196004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063a322c40e906024016000604051808303816000875af11580156106ea573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261071291908101906109c1565b90506101ee604051806040016040528060058152602001640b4c4c8ccd60da1b815250825b806040516020016107489190610ae5565b604051602081830303815290604052805190602001208260405160200161076f9190610ae5565b60405160208183030381529060405280519060200120146101ee577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516107f69060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838160405161082d9190610b23565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516108649190610b57565b60405180910390a16101ee737109709ecfa91a80626ff3989d68f67f5b1dd12d3b1561096a5760408051737109709ecfa91a80626ff3989d68f67f5b1dd12d602082018190526519985a5b195960d21b9282019290925260016060820152600091907f70ca10bbd0dbfd9020a9f4b13402c16cb120705e0d1c0aeab10fa353ae586fc49060800160408051601f19818403018152908290526109099291602001610ab4565b60408051601f198184030181529082905261092391610ae5565b6000604051808303816000865af19150503d8060008114610960576040519150601f19603f3d011682016040523d82523d6000602084013e610965565b606091505b505050505b6000805461ff001916610100179055565b634e487b7160e01b600052604160045260246000fd5b60005b838110156109ac578181015183820152602001610994565b838111156109bb576000848401525b50505050565b6000602082840312156109d357600080fd5b815167ffffffffffffffff808211156109eb57600080fd5b818401915084601f8301126109ff57600080fd5b815181811115610a1157610a1161097b565b604051601f8201601f19908116603f01168101908382118183101715610a3957610a3961097b565b81604052828152876020848701011115610a5257600080fd5b610a63836020830160208801610991565b979650505050505050565b60008151808452610a86816020860160208601610991565b601f01601f19169290920160200192915050565b602081526000610aad6020830184610a6e565b9392505050565b6001600160e01b0319831681528151600090610ad7816004850160208701610991565b919091016004019392505050565b60008251610af7818460208701610991565b9190910192915050565b600060208284031215610b1357600080fd5b81518015158114610aad57600080fd5b60408152600a6040820152690808115e1c1958dd195960b21b6060820152608060208201526000610aad6080830184610a6e565b60408152600a604082015269080808081058dd1d585b60b21b6060820152608060208201526000610aad6080830184610a6e56fe307837313039373039656366613931613830363236666633393839643638663637663562316464313264307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030307845413637346664446537313466643937396465334564463046353641413937313642383938656338a26469706673582212209f33c54c520dd76f00f78bf2f51efe73f89c61629d459f3aed1b9ebcc6bb613764736f6c634300080d0033" ) )
      
    
    syntax Field ::= ToStringTestField
    
    syntax ToStringTestField ::= "IS_TEST" [symbol(), klabel(field_ToStringTest_IS_TEST)]
    
    syntax ToStringTestField ::= "_failed" [symbol(), klabel(field_ToStringTest__failed)]
    
    syntax ToStringTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ToStringTest_IS_SCRIPT)]
    
    syntax ToStringTestField ::= "stdstore" [symbol(), klabel(field_ToStringTest_stdstore)]
    
    rule  ( #loc ( ToStringTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( ToStringTest . _failed ) => 0 )
      
    
    rule  ( #loc ( ToStringTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( ToStringTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= ToStringTestContract "." ToStringTestMethod [function(), klabel(method_ToStringTest)]
    
    syntax ToStringTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_ToStringTest_IS_SCRIPT)]
    
    syntax ToStringTestMethod ::= "IS_TEST" "(" ")" [klabel(method_ToStringTest_IS_TEST)]
    
    syntax ToStringTestMethod ::= "failed" "(" ")" [klabel(method_ToStringTest_failed)]
    
    syntax ToStringTestMethod ::= "testAddressToString" "(" ")" [klabel(method_ToStringTest_testAddressToString)]
    
    syntax ToStringTestMethod ::= "testBoolToString" "(" ")" [klabel(method_ToStringTest_testBoolToString)]
    
    syntax ToStringTestMethod ::= "testBytes32ToString" "(" ")" [klabel(method_ToStringTest_testBytes32ToString)]
    
    syntax ToStringTestMethod ::= "testBytesToString" "(" ")" [klabel(method_ToStringTest_testBytesToString)]
    
    syntax ToStringTestMethod ::= "testIntToString" "(" ")" [klabel(method_ToStringTest_testIntToString)]
    
    syntax ToStringTestMethod ::= "testUint256ToString" "(" ")" [klabel(method_ToStringTest_testUint256ToString)]
    
    syntax ToStringTestMethod ::= "vm" "(" ")" [klabel(method_ToStringTest_vm)]
    
    rule  ( ToStringTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testAddressToString ( ) => #abiCallData ( "testAddressToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testBoolToString ( ) => #abiCallData ( "testBoolToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testBytes32ToString ( ) => #abiCallData ( "testBytes32ToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testBytesToString ( ) => #abiCallData ( "testBytesToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testIntToString ( ) => #abiCallData ( "testIntToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testUint256ToString ( ) => #abiCallData ( "testUint256ToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testAddressToString" ) => 808104093 )
      
    
    rule  ( selector ( "testBoolToString" ) => 1097632899 )
      
    
    rule  ( selector ( "testBytes32ToString" ) => 204853932 )
      
    
    rule  ( selector ( "testBytesToString" ) => 1397983993 )
      
    
    rule  ( selector ( "testIntToString" ) => 4039840763 )
      
    
    rule  ( selector ( "testUint256ToString" ) => 98980210 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module TOKENTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= TokenTestContract
    
    syntax TokenTestContract ::= "TokenTest" [klabel(contract_TokenTest)]
    
    rule  ( #binRuntime ( TokenTest ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060325760003560e01c80630a9254e4146037578063663bc990146037575b600080fd5b00fea2646970667358221220bdc96006d4c6e9282b111d89e4770905b31a8067ee4190d3cb4238c48110cbbe64736f6c634300080d0033" ) )
      
    
    syntax ByteArray ::= TokenTestContract "." TokenTestMethod [function(), klabel(method_TokenTest)]
    
    syntax TokenTestMethod ::= "setUp" "(" ")" [klabel(method_TokenTest_setUp)]
    
    syntax TokenTestMethod ::= "test_1" "(" ")" [klabel(method_TokenTest_test_1)]
    
    rule  ( TokenTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( TokenTest . test_1 ( ) => #abiCallData ( "test_1" , .TypedArgs ) )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "test_1" ) => 1715194256 )
      

endmodule

module VERIFICATION
    imports public ASSUMETEST-BIN-RUNTIME
    imports public BLOCKPARAMSTEST-BIN-RUNTIME
    imports public BROADCASTTEST-BIN-RUNTIME
    imports public CONTRACTTEST-BIN-RUNTIME
    imports public CONTRACTBTEST-BIN-RUNTIME
    imports public DEALTEST-BIN-RUNTIME
    imports public TOKEN-BIN-RUNTIME
    imports public EMITCONTRACTTEST-BIN-RUNTIME
    imports public ENVTEST-BIN-RUNTIME
    imports public ETCHTEST-BIN-RUNTIME
    imports public FFITEST-BIN-RUNTIME
    imports public FILESTEST-BIN-RUNTIME
    imports public FORKTEST-BIN-RUNTIME
    imports public GETCODETEST-BIN-RUNTIME
    imports public LOOPSTEST-BIN-RUNTIME
    imports public MOCKCALLTEST-BIN-RUNTIME
    imports public NONCETEST-BIN-RUNTIME
    imports public OWNERUPONLYTEST-BIN-RUNTIME
    imports public PRANKTEST-BIN-RUNTIME
    imports public RECORDLOGSTEST-BIN-RUNTIME
    imports public SAFETEST-BIN-RUNTIME
    imports public SETUPTEST-BIN-RUNTIME
    imports public SIGNTEST-BIN-RUNTIME
    imports public ASSERTTEST-BIN-RUNTIME
    imports public SNAPSHOTTEST-BIN-RUNTIME
    imports public STORE-BIN-RUNTIME
    imports public STORETEST-BIN-RUNTIME
    imports public TOSTRINGTEST-BIN-RUNTIME
    imports public TOKENTEST-BIN-RUNTIME
    imports public INT-SIMPLIFICATION
    
    

endmodule

module SPEC
    imports public ASSUMETEST-BIN-RUNTIME-SPEC
    imports public DEALTEST-BIN-RUNTIME-SPEC
    imports public ASSERTTEST-BIN-RUNTIME-SPEC
    
    

endmodule

module ASSUMETEST-BIN-RUNTIME-SPEC
    imports public INT-SIMPLIFICATION
    imports public VERIFICATION
    imports public ASSUMETEST-BIN-RUNTIME
    
    claim [test-assume-true]: <kevm>
           <k>
             ( #execute => #halt )
             ~> _CONTINUATION
           </k>
           <exit-code>
             ( _EXITCODE_CELL => ?_EXIT_CODE_CELL_c89e25d9 )
           </exit-code>
           <mode>
             ( NORMAL => ?_MODE_CELL_c89e25d9 )
           </mode>
           <schedule>
             ( LONDON => ?_SCHEDULE_CELL_c89e25d9 )
           </schedule>
           <ethereum>
             <evm>
               <output>
                 ( _OUTPUT_CELL => ?_OUTPUT_CELL_c89e25d9 )
               </output>
               <statusCode>
                 ( _STATUSCODE => ?STATUSCODE_FINAL )
               </statusCode>
               <endPC>
                 ( _ENDPC_CELL => ?_ENDPC_CELL_c89e25d9 )
               </endPC>
               <callStack>
                 ( .List => ?_CALLSTACK_CELL_c89e25d9 )
               </callStack>
               <interimStates>
                 ( _INTERIMSTATES_CELL => ?_INTERIMSTATES_CELL_c89e25d9 )
               </interimStates>
               <touchedAccounts>
                 ( _TOUCHEDACCOUNTS_CELL => ?_TOUCHEDACCOUNTS_CELL_c89e25d9 )
               </touchedAccounts>
               <callState>
                 <program>
                   ( #binRuntime ( AssumeTest ) => ?_PROGRAM_CELL_c89e25d9 )
                 </program>
                 <jumpDests>
                   ( #computeValidJumpDests ( #binRuntime ( AssumeTest ) ) => ?_JUMPDESTS_CELL_c89e25d9 )
                 </jumpDests>
                 <id>
                   1032069922050249630382865877677304880282300743300
                 </id>
                 <caller>
                   ( _CALLER_ID => ?_CALLER_CELL_c89e25d9 )
                 </caller>
                 <callData>
                   ( AssumeTest . test_assume_true ( _VV0_a_3c5818c8 , _VV1_b_3c5818c8 ) => ?_CALLDATA_CELL_c89e25d9 )
                 </callData>
                 <callValue>
                   ( 0 => ?_CALLVALUE_CELL_c89e25d9 )
                 </callValue>
                 <wordStack>
                   ( .WordStack => ?_WORDSTACK_CELL_c89e25d9 )
                 </wordStack>
                 <localMem>
                   ( _LOCAL_MEM => ?_LOCALMEM_CELL_c89e25d9 )
                 </localMem>
                 <pc>
                   ( 0 => ?_PC_CELL_c89e25d9 )
                 </pc>
                 <gas>
                   ( #gas ( _VGAS ) => ?_GAS_CELL_c89e25d9 )
                 </gas>
                 <memoryUsed>
                   ( 0 => ?_MEMORYUSED_CELL_c89e25d9 )
                 </memoryUsed>
                 <callGas>
                   ( _CALLGAS_CELL => ?_CALLGAS_CELL_c89e25d9 )
                 </callGas>
                 <static>
                   ( false => ?_STATIC_CELL_c89e25d9 )
                 </static>
                 <callDepth>
                   ( 0 => ?_CALLDEPTH_CELL_c89e25d9 )
                 </callDepth>
               </callState>
               <substate>
                 <selfDestruct>
                   ( _SELFDESTRUCT_CELL => ?_SELFDESTRUCT_CELL_c89e25d9 )
                 </selfDestruct>
                 <log>
                   ( _LOG_CELL => ?_LOG_CELL_c89e25d9 )
                 </log>
                 <refund>
                   ( _REFUND_CELL => ?_REFUND_CELL_c89e25d9 )
                 </refund>
                 <accessedAccounts>
                   ( _ACCESSEDACCOUNTS_CELL => ?_ACCESSEDACCOUNTS_CELL_c89e25d9 )
                 </accessedAccounts>
                 <accessedStorage>
                   ( .Map => ?_ACCESSEDSTORAGE_CELL_c89e25d9 )
                 </accessedStorage>
               </substate>
               <gasPrice>
                 ( _GASPRICE_CELL => ?_GASPRICE_CELL_c89e25d9 )
               </gasPrice>
               <origin>
                 ( _ORIGIN_ID => ?_ORIGIN_CELL_c89e25d9 )
               </origin>
               <blockhashes>
                 ( _BLOCKHASHES_CELL => ?_BLOCKHASHES_CELL_c89e25d9 )
               </blockhashes>
               <block>
                 <previousHash>
                   ( _PREVIOUSHASH_CELL => ?_PREVIOUSHASH_CELL_c89e25d9 )
                 </previousHash>
                 <ommersHash>
                   ( _OMMERSHASH_CELL => ?_OMMERSHASH_CELL_c89e25d9 )
                 </ommersHash>
                 <coinbase>
                   ( _COINBASE_CELL => ?_COINBASE_CELL_c89e25d9 )
                 </coinbase>
                 <stateRoot>
                   ( _STATEROOT_CELL => ?_STATEROOT_CELL_c89e25d9 )
                 </stateRoot>
                 <transactionsRoot>
                   ( _TRANSACTIONSROOT_CELL => ?_TRANSACTIONSROOT_CELL_c89e25d9 )
                 </transactionsRoot>
                 <receiptsRoot>
                   ( _RECEIPTSROOT_CELL => ?_RECEIPTSROOT_CELL_c89e25d9 )
                 </receiptsRoot>
                 <logsBloom>
                   ( _LOGSBLOOM_CELL => ?_LOGSBLOOM_CELL_c89e25d9 )
                 </logsBloom>
                 <difficulty>
                   ( _DIFFICULTY_CELL => ?_DIFFICULTY_CELL_c89e25d9 )
                 </difficulty>
                 <number>
                   ( _NUMBER_CELL => ?_NUMBER_CELL_c89e25d9 )
                 </number>
                 <gasLimit>
                   ( _GASLIMIT_CELL => ?_GASLIMIT_CELL_c89e25d9 )
                 </gasLimit>
                 <gasUsed>
                   ( _GASUSED_CELL => ?_GASUSED_CELL_c89e25d9 )
                 </gasUsed>
                 <timestamp>
                   ( _TIMESTAMP_CELL => ?_TIMESTAMP_CELL_c89e25d9 )
                 </timestamp>
                 <extraData>
                   ( _EXTRADATA_CELL => ?_EXTRADATA_CELL_c89e25d9 )
                 </extraData>
                 <mixHash>
                   ( _MIXHASH_CELL => ?_MIXHASH_CELL_c89e25d9 )
                 </mixHash>
                 <blockNonce>
                   ( _BLOCKNONCE_CELL => ?_BLOCKNONCE_CELL_c89e25d9 )
                 </blockNonce>
                 <baseFee>
                   ( _BASEFEE_CELL => ?_BASEFEE_CELL_c89e25d9 )
                 </baseFee>
                 <ommerBlockHeaders>
                   ( _OMMERBLOCKHEADERS_CELL => ?_OMMERBLOCKHEADERS_CELL_c89e25d9 )
                 </ommerBlockHeaders>
               </block>
             </evm>
             <network>
               <chainID>
                 ( _CHAINID_CELL => ?_CHAINID_CELL_c89e25d9 )
               </chainID>
               <activeAccounts>
                 ( ( SetItem ( 1032069922050249630382865877677304880282300743300 ) ( SetItem ( 645326474426547203313410069153905908525362434349 ) ( SetItem ( 137122462167341575662000267002353578582749290296 ) SetItem ( 120209876281281145568259943 ) ) ) ) => ?_ACTIVEACCOUNTS_CELL_c89e25d9 )
               </activeAccounts>
               <accounts>
                 ( <account>
                   <acctID>
                     1032069922050249630382865877677304880282300743300
                   </acctID>
                   <balance>
                     ( 0 => ?_ACCT_BALANCE )
                   </balance>
                   <code>
                     #binRuntime ( AssumeTest )
                   </code>
                   <storage>
                     ( _ACCT_STORAGE => ?_ACCT_STORAGE_FINAL )
                   </storage>
                   <nonce>
                     ( 0 => ?_ACCT_NONCE )
                   </nonce>
                   ...
                 </account>
                 ( <account>
                   <acctID>
                     137122462167341575662000267002353578582749290296
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     645326474426547203313410069153905908525362434349
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     b"\x00"
                   </code>
                   <storage>
                     ( CHEATCODE_STORAGE => ?CHEATCODE_STORAGE_FINAL )
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     120209876281281145568259943
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( .Bag => ?_ACCOUNTS_FINAL ) ) ) ) )
               </accounts>
               <txOrder>
                 ( _TXORDER_CELL => ?_TXORDER_CELL_c89e25d9 )
               </txOrder>
               <txPending>
                 ( _TXPENDING_CELL => ?_TXPENDING_CELL_c89e25d9 )
               </txPending>
               <messages>
                 ( _MESSAGES_CELL => ?_MESSAGES_CELL_c89e25d9 )
               </messages>
             </network>
           </ethereum>
         </kevm>
      requires #lookup ( CHEATCODE_STORAGE , #loc ( FoundryCheat . Failed ) ) ==Int 0
       ensures foundry_success  ( ?STATUSCODE_FINAL , #lookup ( ?CHEATCODE_STORAGE_FINAL , #loc ( FoundryCheat . Failed ) ) )
      [label(test-assume-true)]

endmodule

module DEALTEST-BIN-RUNTIME-SPEC
    imports public INT-SIMPLIFICATION
    imports public VERIFICATION
    imports public DEALTEST-BIN-RUNTIME
    
    claim [testDeal]: <kevm>
           <k>
             ( #execute => #halt )
             ~> _CONTINUATION
           </k>
           <exit-code>
             ( _EXITCODE_CELL => ?_EXIT_CODE_CELL_c89e25d9 )
           </exit-code>
           <mode>
             ( NORMAL => ?_MODE_CELL_c89e25d9 )
           </mode>
           <schedule>
             ( LONDON => ?_SCHEDULE_CELL_c89e25d9 )
           </schedule>
           <ethereum>
             <evm>
               <output>
                 ( _OUTPUT_CELL => ?_OUTPUT_CELL_c89e25d9 )
               </output>
               <statusCode>
                 ( _STATUSCODE => ?STATUSCODE_FINAL )
               </statusCode>
               <endPC>
                 ( _ENDPC_CELL => ?_ENDPC_CELL_c89e25d9 )
               </endPC>
               <callStack>
                 ( .List => ?_CALLSTACK_CELL_c89e25d9 )
               </callStack>
               <interimStates>
                 ( _INTERIMSTATES_CELL => ?_INTERIMSTATES_CELL_c89e25d9 )
               </interimStates>
               <touchedAccounts>
                 ( _TOUCHEDACCOUNTS_CELL => ?_TOUCHEDACCOUNTS_CELL_c89e25d9 )
               </touchedAccounts>
               <callState>
                 <program>
                   ( #binRuntime ( DealTest ) => ?_PROGRAM_CELL_c89e25d9 )
                 </program>
                 <jumpDests>
                   ( #computeValidJumpDests ( #binRuntime ( DealTest ) ) => ?_JUMPDESTS_CELL_c89e25d9 )
                 </jumpDests>
                 <id>
                   1032069922050249630382865877677304880282300743300
                 </id>
                 <caller>
                   ( _CALLER_ID => ?_CALLER_CELL_c89e25d9 )
                 </caller>
                 <callData>
                   ( DealTest . testDeal ( _VV0_value_3c5818c8 ) => ?_CALLDATA_CELL_c89e25d9 )
                 </callData>
                 <callValue>
                   ( 0 => ?_CALLVALUE_CELL_c89e25d9 )
                 </callValue>
                 <wordStack>
                   ( .WordStack => ?_WORDSTACK_CELL_c89e25d9 )
                 </wordStack>
                 <localMem>
                   ( _LOCAL_MEM => ?_LOCALMEM_CELL_c89e25d9 )
                 </localMem>
                 <pc>
                   ( 0 => ?_PC_CELL_c89e25d9 )
                 </pc>
                 <gas>
                   ( #gas ( _VGAS ) => ?_GAS_CELL_c89e25d9 )
                 </gas>
                 <memoryUsed>
                   ( 0 => ?_MEMORYUSED_CELL_c89e25d9 )
                 </memoryUsed>
                 <callGas>
                   ( _CALLGAS_CELL => ?_CALLGAS_CELL_c89e25d9 )
                 </callGas>
                 <static>
                   ( false => ?_STATIC_CELL_c89e25d9 )
                 </static>
                 <callDepth>
                   ( 0 => ?_CALLDEPTH_CELL_c89e25d9 )
                 </callDepth>
               </callState>
               <substate>
                 <selfDestruct>
                   ( _SELFDESTRUCT_CELL => ?_SELFDESTRUCT_CELL_c89e25d9 )
                 </selfDestruct>
                 <log>
                   ( _LOG_CELL => ?_LOG_CELL_c89e25d9 )
                 </log>
                 <refund>
                   ( _REFUND_CELL => ?_REFUND_CELL_c89e25d9 )
                 </refund>
                 <accessedAccounts>
                   ( _ACCESSEDACCOUNTS_CELL => ?_ACCESSEDACCOUNTS_CELL_c89e25d9 )
                 </accessedAccounts>
                 <accessedStorage>
                   ( .Map => ?_ACCESSEDSTORAGE_CELL_c89e25d9 )
                 </accessedStorage>
               </substate>
               <gasPrice>
                 ( _GASPRICE_CELL => ?_GASPRICE_CELL_c89e25d9 )
               </gasPrice>
               <origin>
                 ( _ORIGIN_ID => ?_ORIGIN_CELL_c89e25d9 )
               </origin>
               <blockhashes>
                 ( _BLOCKHASHES_CELL => ?_BLOCKHASHES_CELL_c89e25d9 )
               </blockhashes>
               <block>
                 <previousHash>
                   ( _PREVIOUSHASH_CELL => ?_PREVIOUSHASH_CELL_c89e25d9 )
                 </previousHash>
                 <ommersHash>
                   ( _OMMERSHASH_CELL => ?_OMMERSHASH_CELL_c89e25d9 )
                 </ommersHash>
                 <coinbase>
                   ( _COINBASE_CELL => ?_COINBASE_CELL_c89e25d9 )
                 </coinbase>
                 <stateRoot>
                   ( _STATEROOT_CELL => ?_STATEROOT_CELL_c89e25d9 )
                 </stateRoot>
                 <transactionsRoot>
                   ( _TRANSACTIONSROOT_CELL => ?_TRANSACTIONSROOT_CELL_c89e25d9 )
                 </transactionsRoot>
                 <receiptsRoot>
                   ( _RECEIPTSROOT_CELL => ?_RECEIPTSROOT_CELL_c89e25d9 )
                 </receiptsRoot>
                 <logsBloom>
                   ( _LOGSBLOOM_CELL => ?_LOGSBLOOM_CELL_c89e25d9 )
                 </logsBloom>
                 <difficulty>
                   ( _DIFFICULTY_CELL => ?_DIFFICULTY_CELL_c89e25d9 )
                 </difficulty>
                 <number>
                   ( _NUMBER_CELL => ?_NUMBER_CELL_c89e25d9 )
                 </number>
                 <gasLimit>
                   ( _GASLIMIT_CELL => ?_GASLIMIT_CELL_c89e25d9 )
                 </gasLimit>
                 <gasUsed>
                   ( _GASUSED_CELL => ?_GASUSED_CELL_c89e25d9 )
                 </gasUsed>
                 <timestamp>
                   ( _TIMESTAMP_CELL => ?_TIMESTAMP_CELL_c89e25d9 )
                 </timestamp>
                 <extraData>
                   ( _EXTRADATA_CELL => ?_EXTRADATA_CELL_c89e25d9 )
                 </extraData>
                 <mixHash>
                   ( _MIXHASH_CELL => ?_MIXHASH_CELL_c89e25d9 )
                 </mixHash>
                 <blockNonce>
                   ( _BLOCKNONCE_CELL => ?_BLOCKNONCE_CELL_c89e25d9 )
                 </blockNonce>
                 <baseFee>
                   ( _BASEFEE_CELL => ?_BASEFEE_CELL_c89e25d9 )
                 </baseFee>
                 <ommerBlockHeaders>
                   ( _OMMERBLOCKHEADERS_CELL => ?_OMMERBLOCKHEADERS_CELL_c89e25d9 )
                 </ommerBlockHeaders>
               </block>
             </evm>
             <network>
               <chainID>
                 ( _CHAINID_CELL => ?_CHAINID_CELL_c89e25d9 )
               </chainID>
               <activeAccounts>
                 ( ( SetItem ( 1032069922050249630382865877677304880282300743300 ) ( SetItem ( 645326474426547203313410069153905908525362434349 ) ( SetItem ( 137122462167341575662000267002353578582749290296 ) SetItem ( 120209876281281145568259943 ) ) ) ) => ?_ACTIVEACCOUNTS_CELL_c89e25d9 )
               </activeAccounts>
               <accounts>
                 ( <account>
                   <acctID>
                     1032069922050249630382865877677304880282300743300
                   </acctID>
                   <balance>
                     ( 0 => ?_ACCT_BALANCE )
                   </balance>
                   <code>
                     #binRuntime ( DealTest )
                   </code>
                   <storage>
                     ( _ACCT_STORAGE => ?_ACCT_STORAGE_FINAL )
                   </storage>
                   <nonce>
                     ( 0 => ?_ACCT_NONCE )
                   </nonce>
                   ...
                 </account>
                 ( <account>
                   <acctID>
                     137122462167341575662000267002353578582749290296
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     645326474426547203313410069153905908525362434349
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     b"\x00"
                   </code>
                   <storage>
                     ( CHEATCODE_STORAGE => ?CHEATCODE_STORAGE_FINAL )
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     120209876281281145568259943
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( .Bag => ?_ACCOUNTS_FINAL ) ) ) ) )
               </accounts>
               <txOrder>
                 ( _TXORDER_CELL => ?_TXORDER_CELL_c89e25d9 )
               </txOrder>
               <txPending>
                 ( _TXPENDING_CELL => ?_TXPENDING_CELL_c89e25d9 )
               </txPending>
               <messages>
                 ( _MESSAGES_CELL => ?_MESSAGES_CELL_c89e25d9 )
               </messages>
             </network>
           </ethereum>
         </kevm>
      requires #lookup ( CHEATCODE_STORAGE , #loc ( FoundryCheat . Failed ) ) ==Int 0
       ensures foundry_success  ( ?STATUSCODE_FINAL , #lookup ( ?CHEATCODE_STORAGE_FINAL , #loc ( FoundryCheat . Failed ) ) )
      [label(testDeal)]

endmodule

module ASSERTTEST-BIN-RUNTIME-SPEC
    imports public INT-SIMPLIFICATION
    imports public VERIFICATION
    imports public ASSERTTEST-BIN-RUNTIME
    
    claim [test-assert-true]: <kevm>
           <k>
             ( #execute => #halt )
             ~> _CONTINUATION
           </k>
           <exit-code>
             ( _EXITCODE_CELL => ?_EXIT_CODE_CELL_c89e25d9 )
           </exit-code>
           <mode>
             ( NORMAL => ?_MODE_CELL_c89e25d9 )
           </mode>
           <schedule>
             ( LONDON => ?_SCHEDULE_CELL_c89e25d9 )
           </schedule>
           <ethereum>
             <evm>
               <output>
                 ( _OUTPUT_CELL => ?_OUTPUT_CELL_c89e25d9 )
               </output>
               <statusCode>
                 ( _STATUSCODE => ?STATUSCODE_FINAL )
               </statusCode>
               <endPC>
                 ( _ENDPC_CELL => ?_ENDPC_CELL_c89e25d9 )
               </endPC>
               <callStack>
                 ( .List => ?_CALLSTACK_CELL_c89e25d9 )
               </callStack>
               <interimStates>
                 ( _INTERIMSTATES_CELL => ?_INTERIMSTATES_CELL_c89e25d9 )
               </interimStates>
               <touchedAccounts>
                 ( _TOUCHEDACCOUNTS_CELL => ?_TOUCHEDACCOUNTS_CELL_c89e25d9 )
               </touchedAccounts>
               <callState>
                 <program>
                   ( #binRuntime ( AssertTest ) => ?_PROGRAM_CELL_c89e25d9 )
                 </program>
                 <jumpDests>
                   ( #computeValidJumpDests ( #binRuntime ( AssertTest ) ) => ?_JUMPDESTS_CELL_c89e25d9 )
                 </jumpDests>
                 <id>
                   1032069922050249630382865877677304880282300743300
                 </id>
                 <caller>
                   ( _CALLER_ID => ?_CALLER_CELL_c89e25d9 )
                 </caller>
                 <callData>
                   ( AssertTest . test_assert_true ( ) => ?_CALLDATA_CELL_c89e25d9 )
                 </callData>
                 <callValue>
                   ( 0 => ?_CALLVALUE_CELL_c89e25d9 )
                 </callValue>
                 <wordStack>
                   ( .WordStack => ?_WORDSTACK_CELL_c89e25d9 )
                 </wordStack>
                 <localMem>
                   ( _LOCAL_MEM => ?_LOCALMEM_CELL_c89e25d9 )
                 </localMem>
                 <pc>
                   ( 0 => ?_PC_CELL_c89e25d9 )
                 </pc>
                 <gas>
                   ( #gas ( _VGAS ) => ?_GAS_CELL_c89e25d9 )
                 </gas>
                 <memoryUsed>
                   ( 0 => ?_MEMORYUSED_CELL_c89e25d9 )
                 </memoryUsed>
                 <callGas>
                   ( _CALLGAS_CELL => ?_CALLGAS_CELL_c89e25d9 )
                 </callGas>
                 <static>
                   ( false => ?_STATIC_CELL_c89e25d9 )
                 </static>
                 <callDepth>
                   ( 0 => ?_CALLDEPTH_CELL_c89e25d9 )
                 </callDepth>
               </callState>
               <substate>
                 <selfDestruct>
                   ( _SELFDESTRUCT_CELL => ?_SELFDESTRUCT_CELL_c89e25d9 )
                 </selfDestruct>
                 <log>
                   ( _LOG_CELL => ?_LOG_CELL_c89e25d9 )
                 </log>
                 <refund>
                   ( _REFUND_CELL => ?_REFUND_CELL_c89e25d9 )
                 </refund>
                 <accessedAccounts>
                   ( _ACCESSEDACCOUNTS_CELL => ?_ACCESSEDACCOUNTS_CELL_c89e25d9 )
                 </accessedAccounts>
                 <accessedStorage>
                   ( .Map => ?_ACCESSEDSTORAGE_CELL_c89e25d9 )
                 </accessedStorage>
               </substate>
               <gasPrice>
                 ( _GASPRICE_CELL => ?_GASPRICE_CELL_c89e25d9 )
               </gasPrice>
               <origin>
                 ( _ORIGIN_ID => ?_ORIGIN_CELL_c89e25d9 )
               </origin>
               <blockhashes>
                 ( _BLOCKHASHES_CELL => ?_BLOCKHASHES_CELL_c89e25d9 )
               </blockhashes>
               <block>
                 <previousHash>
                   ( _PREVIOUSHASH_CELL => ?_PREVIOUSHASH_CELL_c89e25d9 )
                 </previousHash>
                 <ommersHash>
                   ( _OMMERSHASH_CELL => ?_OMMERSHASH_CELL_c89e25d9 )
                 </ommersHash>
                 <coinbase>
                   ( _COINBASE_CELL => ?_COINBASE_CELL_c89e25d9 )
                 </coinbase>
                 <stateRoot>
                   ( _STATEROOT_CELL => ?_STATEROOT_CELL_c89e25d9 )
                 </stateRoot>
                 <transactionsRoot>
                   ( _TRANSACTIONSROOT_CELL => ?_TRANSACTIONSROOT_CELL_c89e25d9 )
                 </transactionsRoot>
                 <receiptsRoot>
                   ( _RECEIPTSROOT_CELL => ?_RECEIPTSROOT_CELL_c89e25d9 )
                 </receiptsRoot>
                 <logsBloom>
                   ( _LOGSBLOOM_CELL => ?_LOGSBLOOM_CELL_c89e25d9 )
                 </logsBloom>
                 <difficulty>
                   ( _DIFFICULTY_CELL => ?_DIFFICULTY_CELL_c89e25d9 )
                 </difficulty>
                 <number>
                   ( _NUMBER_CELL => ?_NUMBER_CELL_c89e25d9 )
                 </number>
                 <gasLimit>
                   ( _GASLIMIT_CELL => ?_GASLIMIT_CELL_c89e25d9 )
                 </gasLimit>
                 <gasUsed>
                   ( _GASUSED_CELL => ?_GASUSED_CELL_c89e25d9 )
                 </gasUsed>
                 <timestamp>
                   ( _TIMESTAMP_CELL => ?_TIMESTAMP_CELL_c89e25d9 )
                 </timestamp>
                 <extraData>
                   ( _EXTRADATA_CELL => ?_EXTRADATA_CELL_c89e25d9 )
                 </extraData>
                 <mixHash>
                   ( _MIXHASH_CELL => ?_MIXHASH_CELL_c89e25d9 )
                 </mixHash>
                 <blockNonce>
                   ( _BLOCKNONCE_CELL => ?_BLOCKNONCE_CELL_c89e25d9 )
                 </blockNonce>
                 <baseFee>
                   ( _BASEFEE_CELL => ?_BASEFEE_CELL_c89e25d9 )
                 </baseFee>
                 <ommerBlockHeaders>
                   ( _OMMERBLOCKHEADERS_CELL => ?_OMMERBLOCKHEADERS_CELL_c89e25d9 )
                 </ommerBlockHeaders>
               </block>
             </evm>
             <network>
               <chainID>
                 ( _CHAINID_CELL => ?_CHAINID_CELL_c89e25d9 )
               </chainID>
               <activeAccounts>
                 ( ( SetItem ( 1032069922050249630382865877677304880282300743300 ) ( SetItem ( 645326474426547203313410069153905908525362434349 ) ( SetItem ( 137122462167341575662000267002353578582749290296 ) SetItem ( 120209876281281145568259943 ) ) ) ) => ?_ACTIVEACCOUNTS_CELL_c89e25d9 )
               </activeAccounts>
               <accounts>
                 ( <account>
                   <acctID>
                     1032069922050249630382865877677304880282300743300
                   </acctID>
                   <balance>
                     ( 0 => ?_ACCT_BALANCE )
                   </balance>
                   <code>
                     #binRuntime ( AssertTest )
                   </code>
                   <storage>
                     ( _ACCT_STORAGE => ?_ACCT_STORAGE_FINAL )
                   </storage>
                   <nonce>
                     ( 0 => ?_ACCT_NONCE )
                   </nonce>
                   ...
                 </account>
                 ( <account>
                   <acctID>
                     137122462167341575662000267002353578582749290296
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     645326474426547203313410069153905908525362434349
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     b"\x00"
                   </code>
                   <storage>
                     ( CHEATCODE_STORAGE => ?CHEATCODE_STORAGE_FINAL )
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     120209876281281145568259943
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( .Bag => ?_ACCOUNTS_FINAL ) ) ) ) )
               </accounts>
               <txOrder>
                 ( _TXORDER_CELL => ?_TXORDER_CELL_c89e25d9 )
               </txOrder>
               <txPending>
                 ( _TXPENDING_CELL => ?_TXPENDING_CELL_c89e25d9 )
               </txPending>
               <messages>
                 ( _MESSAGES_CELL => ?_MESSAGES_CELL_c89e25d9 )
               </messages>
             </network>
           </ethereum>
         </kevm>
      requires #lookup ( CHEATCODE_STORAGE , #loc ( FoundryCheat . Failed ) ) ==Int 0
       ensures foundry_success  ( ?STATUSCODE_FINAL , #lookup ( ?CHEATCODE_STORAGE_FINAL , #loc ( FoundryCheat . Failed ) ) )
      [label(test-assert-true)]

endmodule
