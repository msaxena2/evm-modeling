requires "edsl.md"
requires "lemmas/int-simplification.k"
requires "lemmas/lemmas.k"
requires "lemmas/int-simplification.k"

module BLOCKPARAMSTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= BlockParamsTestContract
    
    syntax BlockParamsTestContract ::= "BlockParamsTest" [klabel(contract_BlockParamsTest)]
    
    rule  ( #binRuntime ( BlockParamsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100935760003560e01c806385017cac1161006657806385017cac1461010b578063ba414fa614610113578063e46f59bb14610135578063f8ccbf4714610148578063fa7626d41461015b57600080fd5b80631d06e4361461009857806328f82645146100ad5780633a768463146100c057806374b41d6a146100f8575b600080fd5b6100ab6100a636600461059e565b610168565b005b6100ab6100bb36600461059e565b6101da565b6100db737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab61010636600461059e565b610249565b6100ab6102b8565b60005461012590610100900460ff1681565b60405190151581526020016100ef565b6100ab61014336600461059e565b610340565b6000546101259062010000900460ff1681565b6000546101259060ff1681565b604051632024eee960e11b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90634049ddd290602401600060405180830381600087803b1580156101b557600080fd5b505af11580156101c9573d6000803e3d6000fd5b505050506101d746826103ab565b50565b60405163039b37ab60e41b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906339b37ab090602401600060405180830381600087803b15801561022757600080fd5b505af115801561023b573d6000803e3d6000fd5b505050506101d748826103ab565b6040516372eb5f8160e11b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e5d6bf0290602401600060405180830381600087803b15801561029657600080fd5b505af11580156102aa573d6000803e3d6000fd5b505050506101d742826103ab565b6040516001622df0eb60e21b0319815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ff483c5490602401600060405180830381600087803b15801561031e57600080fd5b505af1158015610332573d6000803e3d6000fd5b505050506101d741826104aa565b6040516301f7b4f360e41b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d90631f7b4f3090602401600060405180830381600087803b15801561038d57600080fd5b505af11580156103a1573d6000803e3d6000fd5b505050506101d743825b8082146104a6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161041c9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88160405161045391906105b7565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405161048a91906105ef565b60405180910390a16104a66000805461ff001916610100179055565b5050565b806001600160a01b0316826001600160a01b0316146104a6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516105309060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f816040516105679190610619565b60405180910390a17f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f8260405161048a919061065d565b6000602082840312156105b057600080fd5b5035919050565b6040815260006105e160408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b6040815260006105e160408301600a815269080808081058dd1d585b60b21b602082015260400190565b60408152600061064360408301600a8152690808115e1c1958dd195960b21b602082015260400190565b6001600160a01b0393909316602092909201919091525090565b60408152600061064360408301600a815269080808081058dd1d585b60b21b60208201526040019056fea2646970667358221220ce2f894582cac1405aca78d088c49e045ae2e07ac1aab130ac51d8bf949cc68b64736f6c634300080f0033" ) )
      
    
    syntax Field ::= BlockParamsTestField
    
    syntax BlockParamsTestField ::= "IS_TEST" [symbol(), klabel(field_BlockParamsTest_IS_TEST)]
    
    syntax BlockParamsTestField ::= "failed" [symbol(), klabel(field_BlockParamsTest_failed)]
    
    syntax BlockParamsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BlockParamsTest_IS_SCRIPT)]
    
    syntax BlockParamsTestField ::= "stdstore" [symbol(), klabel(field_BlockParamsTest_stdstore)]
    
    rule  ( #loc ( BlockParamsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( BlockParamsTest . failed ) => 0 )
      
    
    rule  ( #loc ( BlockParamsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( BlockParamsTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= BlockParamsTestContract "." BlockParamsTestMethod [function(), klabel(method_BlockParamsTest)]
    
    syntax BlockParamsTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_BlockParamsTest_IS_SCRIPT)]
    
    syntax BlockParamsTestMethod ::= "IS_TEST" "(" ")" [klabel(method_BlockParamsTest_IS_TEST)]
    
    syntax BlockParamsTestMethod ::= "failed" "(" ")" [klabel(method_BlockParamsTest_failed)]
    
    syntax BlockParamsTestMethod ::= "testChainId" "(" Int ")" [klabel(method_BlockParamsTest_testChainId)]
    
    syntax BlockParamsTestMethod ::= "testCoinBase" "(" ")" [klabel(method_BlockParamsTest_testCoinBase)]
    
    syntax BlockParamsTestMethod ::= "testFee" "(" Int ")" [klabel(method_BlockParamsTest_testFee)]
    
    syntax BlockParamsTestMethod ::= "testRoll" "(" Int ")" [klabel(method_BlockParamsTest_testRoll)]
    
    syntax BlockParamsTestMethod ::= "testWarp" "(" Int ")" [klabel(method_BlockParamsTest_testWarp)]
    
    syntax BlockParamsTestMethod ::= "vm" "(" ")" [klabel(method_BlockParamsTest_vm)]
    
    rule  ( BlockParamsTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( BlockParamsTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( BlockParamsTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( BlockParamsTest . testChainId ( V0_newChainId ) => #abiCallData ( "testChainId" , #uint256 ( V0_newChainId ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newChainId )
      
    
    rule  ( BlockParamsTest . testCoinBase ( ) => #abiCallData ( "testCoinBase" , .TypedArgs ) )
      
    
    rule  ( BlockParamsTest . testFee ( V0_newFee ) => #abiCallData ( "testFee" , #uint256 ( V0_newFee ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newFee )
      
    
    rule  ( BlockParamsTest . testRoll ( V0_newHeight ) => #abiCallData ( "testRoll" , #uint256 ( V0_newHeight ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_newHeight )
      
    
    rule  ( BlockParamsTest . testWarp ( V0_time ) => #abiCallData ( "testWarp" , #uint256 ( V0_time ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_time )
      
    
    rule  ( BlockParamsTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testChainId" ) => 486990902 )
      
    
    rule  ( selector ( "testCoinBase" ) => 2231467180 )
      
    
    rule  ( selector ( "testFee" ) => 687351365 )
      
    
    rule  ( selector ( "testRoll" ) => 3832502715 )
      
    
    rule  ( selector ( "testWarp" ) => 1957961066 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module BROADCASTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= BroadcastTestContract
    
    syntax BroadcastTestContract ::= "BroadcastTest" [klabel(contract_BroadcastTest)]
    
    rule  ( #binRuntime ( BroadcastTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa614610124578063f8ccbf4714610146578063fa7626d414610159578063fd959e421461016657600080fd5b80630a9254e41461008d578063354b2735146100dc5780633a768463146100e4578063715f1d5c1461011c575b600080fd5b6100da600880546001600160a01b031990811673ea674fdde714fd979de3edf0f56aa9716b898ec81790915560098054909116737109709ecfa91a80626ff3989d68f67f5b1dd12d179055565b005b6100da61016e565b6100ff737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100da610370565b60005461013690610100900460ff1681565b6040519015158152602001610113565b6000546101369062010000900460ff1681565b6000546101369060ff1681565b6100da6105e4565b60085460405163e6962cdb60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e6962cdb90602401600060405180830381600087803b1580156101c757600080fd5b505af11580156101db573d6000803e3d6000fd5b505050506000600a6040516101ef90610895565b908152602001604051809103906000f080158015610211573d6000803e3d6000fd5b5060405163afe29f7160e01b81526004818101529091506000906001600160a01b0383169063afe29f71906024016020604051808303816000875af115801561025e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028291906108a2565b905061028f81600061075e565b60095460405163e6962cdb60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e6962cdb90602401600060405180830381600087803b1580156102e857600080fd5b505af11580156102fc573d6000803e3d6000fd5b505060405163afe29f7160e01b8152600560048201526001600160a01b038516925063afe29f7191506024016020604051808303816000875af1158015610347573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061036b91906108a2565b505050565b604080516302bf260160e61b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d9163afc9804091600480830192600092919082900301818387803b1580156103bc57600080fd5b505af11580156103d0573d6000803e3d6000fd5b50505050600060056040516103e490610895565b908152602001604051809103906000f080158015610406573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600060048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610451573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061047591906108a2565b5060408051637fb5297f60e01b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d91637fb5297f91600480830192600092919082900301818387803b1580156104c257600080fd5b505af11580156104d6573d6000803e3d6000fd5b50505050600060146040516104ea90610895565b908152602001604051809103906000f08015801561050c573d6000803e3d6000fd5b5060405163afe29f7160e01b8152601960048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af1158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b91906108a2565b5060408051633b756e9b60e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d916376eadd3691600480830192600092919082900301818387803b1580156105c857600080fd5b505af11580156105dc573d6000803e3d6000fd5b505050505050565b600854604051637fec2a8d60e01b81526001600160a01b039091166004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90637fec2a8d90602401600060405180830381600087803b15801561063d57600080fd5b505af1158015610651573d6000803e3d6000fd5b505050506000600a60405161066590610895565b908152602001604051809103906000f080158015610687573d6000803e3d6000fd5b5060405163afe29f7160e01b8152600160048201529091506001600160a01b0382169063afe29f71906024016020604051808303816000875af11580156106d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106f691906108a2565b5060408051633b756e9b60e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d916376eadd3691600480830192600092919082900301818387803b15801561074357600080fd5b505af1158015610757573d6000803e3d6000fd5b5050505050565b808214610891577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516107cf9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16108916000805461ff001916610100179055565b5050565b6101c9806108bc83390190565b6000602082840312156108b457600080fd5b505191905056fe60806040526000805460ff1916600117905534801561001d57600080fd5b506040516101c93803806101c983398101604081905261003c91610044565b60015561005d565b60006020828403121561005657600080fd5b5051919050565b61015d8061006c6000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80630d1972f314610051578063afe29f711461006d578063ba414fa614610080578063fa7626d4146100a2575b600080fd5b61005a60015481565b6040519081526020015b60405180910390f35b61005a61007b36600461010e565b6100af565b60005461009290610100900460ff1681565b6040519015158152602001610064565b6000546100929060ff1681565b600181905560405160009081907f0b2e13ff20ac7b474198655583edf70dedd2c1dc980e329c4fbb2fc0748b796b90610100906020808252600490820152636865726560e01b604082015260600190565b60405180910390a192915050565b60006020828403121561012057600080fd5b503591905056fea2646970667358221220fa15045781117024c56b5c63627cb447acc6aa35bd52d68e341c2edbe0d16fbe64736f6c634300080f0033a2646970667358221220707610ce1431cdadf9e836b2aba399f2925267d0e8c935b044f39ffbf3f8b16e64736f6c634300080f0033" ) )
      
    
    syntax Field ::= BroadcastTestField
    
    syntax BroadcastTestField ::= "IS_TEST" [symbol(), klabel(field_BroadcastTest_IS_TEST)]
    
    syntax BroadcastTestField ::= "failed" [symbol(), klabel(field_BroadcastTest_failed)]
    
    syntax BroadcastTestField ::= "IS_SCRIPT" [symbol(), klabel(field_BroadcastTest_IS_SCRIPT)]
    
    syntax BroadcastTestField ::= "stdstore" [symbol(), klabel(field_BroadcastTest_stdstore)]
    
    syntax BroadcastTestField ::= "ACCOUNT_A" [symbol(), klabel(field_BroadcastTest_ACCOUNT_A)]
    
    syntax BroadcastTestField ::= "ACCOUNT_B" [symbol(), klabel(field_BroadcastTest_ACCOUNT_B)]
    
    rule  ( #loc ( BroadcastTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( BroadcastTest . failed ) => 0 )
      
    
    rule  ( #loc ( BroadcastTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( BroadcastTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( BroadcastTest . ACCOUNT_A ) => 8 )
      
    
    rule  ( #loc ( BroadcastTest . ACCOUNT_B ) => 9 )
      
    
    syntax ByteArray ::= BroadcastTestContract "." BroadcastTestMethod [function(), klabel(method_BroadcastTest)]
    
    syntax BroadcastTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_BroadcastTest_IS_SCRIPT)]
    
    syntax BroadcastTestMethod ::= "IS_TEST" "(" ")" [klabel(method_BroadcastTest_IS_TEST)]
    
    syntax BroadcastTestMethod ::= "deployNoArgs" "(" ")" [klabel(method_BroadcastTest_deployNoArgs)]
    
    syntax BroadcastTestMethod ::= "deployOther" "(" ")" [klabel(method_BroadcastTest_deployOther)]
    
    syntax BroadcastTestMethod ::= "failed" "(" ")" [klabel(method_BroadcastTest_failed)]
    
    syntax BroadcastTestMethod ::= "setUp" "(" ")" [klabel(method_BroadcastTest_setUp)]
    
    syntax BroadcastTestMethod ::= "testDeploy" "(" ")" [klabel(method_BroadcastTest_testDeploy)]
    
    syntax BroadcastTestMethod ::= "vm" "(" ")" [klabel(method_BroadcastTest_vm)]
    
    rule  ( BroadcastTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . deployNoArgs ( ) => #abiCallData ( "deployNoArgs" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . deployOther ( ) => #abiCallData ( "deployOther" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . testDeploy ( ) => #abiCallData ( "testDeploy" , .TypedArgs ) )
      
    
    rule  ( BroadcastTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "deployNoArgs" ) => 1902058844 )
      
    
    rule  ( selector ( "deployOther" ) => 4254441026 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testDeploy" ) => 894117685 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module CONTRACTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= ContractTestContract
    
    syntax ContractTestContract ::= "ContractTest" [klabel(contract_ContractTest)]
    
    rule  ( #binRuntime ( ContractTest ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b5060043610605a5760003560e01c80630a9254e414605f5780633a7684631460615780633f5a4a2a14605f578063ba414fa6146098578063f8ccbf471460b8578063fa7626d41460ca575b600080fd5b005b607b737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b60005460a990610100900460ff1681565b6040519015158152602001608f565b60005460a99062010000900460ff1681565b60005460a99060ff168156fea26469706673582212200402b5fcb8d3d63165242473487290e08b7908d7f3287b64c59a6005a767c96a64736f6c634300080f0033" ) )
      
    
    syntax Field ::= ContractTestField
    
    syntax ContractTestField ::= "IS_TEST" [symbol(), klabel(field_ContractTest_IS_TEST)]
    
    syntax ContractTestField ::= "failed" [symbol(), klabel(field_ContractTest_failed)]
    
    syntax ContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractTest_IS_SCRIPT)]
    
    syntax ContractTestField ::= "stdstore" [symbol(), klabel(field_ContractTest_stdstore)]
    
    rule  ( #loc ( ContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( ContractTest . failed ) => 0 )
      
    
    rule  ( #loc ( ContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( ContractTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= ContractTestContract "." ContractTestMethod [function(), klabel(method_ContractTest)]
    
    syntax ContractTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_ContractTest_IS_SCRIPT)]
    
    syntax ContractTestMethod ::= "IS_TEST" "(" ")" [klabel(method_ContractTest_IS_TEST)]
    
    syntax ContractTestMethod ::= "failed" "(" ")" [klabel(method_ContractTest_failed)]
    
    syntax ContractTestMethod ::= "setUp" "(" ")" [klabel(method_ContractTest_setUp)]
    
    syntax ContractTestMethod ::= "testExample" "(" ")" [klabel(method_ContractTest_testExample)]
    
    syntax ContractTestMethod ::= "vm" "(" ")" [klabel(method_ContractTest_vm)]
    
    rule  ( ContractTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( ContractTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( ContractTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( ContractTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( ContractTest . testExample ( ) => #abiCallData ( "testExample" , .TypedArgs ) )
      
    
    rule  ( ContractTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testExample" ) => 1062881834 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module CONTRACTBTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= ContractBTestContract
    
    syntax ContractBTestContract ::= "ContractBTest" [klabel(contract_ContractBTest)]
    
    rule  ( #binRuntime ( ContractBTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80633ce7a75c1161005b5780633ce7a75c146100e1578063ba414fa6146100e9578063f8ccbf471461010b578063fa7626d41461011e57600080fd5b80630a9254e41461008d5780632f6b04ac146100995780633790444c146100a15780633a768463146100a9575b600080fd5b610097602a600855565b005b61009761012b565b61009761013a565b6100c4737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100976101f8565b6000546100fb90610100900460ff1681565b60405190151581526020016100d8565b6000546100fb9062010000900460ff1681565b6000546100fb9060ff1681565b610138600854602a61020b565b565b60405160116024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063f28dceb39060440160408051601f198184030181529181526020820180516001600160e01b0316634e487b7160e01b1790525160e083901b6001600160e01b03191681526101ac9190600401610342565b600060405180830381600087803b1580156101c657600080fd5b505af11580156101da573d6000803e3d6000fd5b50505050602b600860008282546101f19190610397565b9091555050565b602b600860008282546101f19190610397565b80821461033e577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161027c9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161033e6000805461ff001916610100179055565b5050565b600060208083528351808285015260005b8181101561036f57858101830151858201604001528201610353565b81811115610381576000604083870101525b50601f01601f1916929092016040019392505050565b6000828210156103b757634e487b7160e01b600052601160045260246000fd5b50039056fea2646970667358221220e7ce169bd336dd4eb9b341dd7ad4e1a6264dbe9e805ebb88f435df8eddf7396a64736f6c634300080f0033" ) )
      
    
    syntax Field ::= ContractBTestField
    
    syntax ContractBTestField ::= "IS_TEST" [symbol(), klabel(field_ContractBTest_IS_TEST)]
    
    syntax ContractBTestField ::= "failed" [symbol(), klabel(field_ContractBTest_failed)]
    
    syntax ContractBTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ContractBTest_IS_SCRIPT)]
    
    syntax ContractBTestField ::= "stdstore" [symbol(), klabel(field_ContractBTest_stdstore)]
    
    syntax ContractBTestField ::= "testNumber" [symbol(), klabel(field_ContractBTest_testNumber)]
    
    rule  ( #loc ( ContractBTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( ContractBTest . failed ) => 0 )
      
    
    rule  ( #loc ( ContractBTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( ContractBTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( ContractBTest . testNumber ) => 8 )
      
    
    syntax ByteArray ::= ContractBTestContract "." ContractBTestMethod [function(), klabel(method_ContractBTest)]
    
    syntax ContractBTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_ContractBTest_IS_SCRIPT)]
    
    syntax ContractBTestMethod ::= "IS_TEST" "(" ")" [klabel(method_ContractBTest_IS_TEST)]
    
    syntax ContractBTestMethod ::= "failed" "(" ")" [klabel(method_ContractBTest_failed)]
    
    syntax ContractBTestMethod ::= "setUp" "(" ")" [klabel(method_ContractBTest_setUp)]
    
    syntax ContractBTestMethod ::= "testCannotSubtract43" "(" ")" [klabel(method_ContractBTest_testCannotSubtract43)]
    
    syntax ContractBTestMethod ::= "testFailSubtract43" "(" ")" [klabel(method_ContractBTest_testFailSubtract43)]
    
    syntax ContractBTestMethod ::= "testNumberIs42" "(" ")" [klabel(method_ContractBTest_testNumberIs42)]
    
    syntax ContractBTestMethod ::= "vm" "(" ")" [klabel(method_ContractBTest_vm)]
    
    rule  ( ContractBTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . testCannotSubtract43 ( ) => #abiCallData ( "testCannotSubtract43" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . testFailSubtract43 ( ) => #abiCallData ( "testFailSubtract43" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . testNumberIs42 ( ) => #abiCallData ( "testNumberIs42" , .TypedArgs ) )
      
    
    rule  ( ContractBTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testCannotSubtract43" ) => 932201548 )
      
    
    rule  ( selector ( "testFailSubtract43" ) => 1021814620 )
      
    
    rule  ( selector ( "testNumberIs42" ) => 795542700 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module DEALTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= DealTestContract
    
    syntax DealTestContract ::= "DealTest" [klabel(contract_DealTest)]
    
    rule  ( #binRuntime ( DealTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100575760003560e01c80633a7684631461005c578063950b054e14610094578063ba414fa6146100a9578063f8ccbf47146100cb578063fa7626d4146100de575b600080fd5b610077737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100a76100a23660046102e4565b6100eb565b005b6000546100bb90610100900460ff1681565b604051901515815260200161008b565b6000546100bb9062010000900460ff1681565b6000546100bb9060ff1681565b60006040516100f9906102d8565b604051809103906000f080158015610115573d6000803e3d6000fd5b5060405163c88a5e6d60e01b81526001600160a01b038216600482015260248101849052909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c88a5e6d90604401600060405180830381600087803b15801561017557600080fd5b505af1158015610189573d6000803e3d6000fd5b505050506101a1816001600160a01b031631836101a5565b5050565b8082146101a1577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516102169060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16101a16000805461ff001916610100179055565b605c806102fe83390190565b6000602082840312156102f657600080fd5b503591905056fe6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220ee966e1cf263af59099887b05060b3fdc2f95b840119b33c4ce5657fd4d4799e64736f6c634300080f0033a26469706673582212205969a5c66d035609f12335999dde557b96df5525313b6a1bb92d2e677c7bd2b064736f6c634300080f0033" ) )
      
    
    syntax Field ::= DealTestField
    
    syntax DealTestField ::= "IS_TEST" [symbol(), klabel(field_DealTest_IS_TEST)]
    
    syntax DealTestField ::= "failed" [symbol(), klabel(field_DealTest_failed)]
    
    syntax DealTestField ::= "IS_SCRIPT" [symbol(), klabel(field_DealTest_IS_SCRIPT)]
    
    syntax DealTestField ::= "stdstore" [symbol(), klabel(field_DealTest_stdstore)]
    
    rule  ( #loc ( DealTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( DealTest . failed ) => 0 )
      
    
    rule  ( #loc ( DealTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( DealTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= DealTestContract "." DealTestMethod [function(), klabel(method_DealTest)]
    
    syntax DealTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_DealTest_IS_SCRIPT)]
    
    syntax DealTestMethod ::= "IS_TEST" "(" ")" [klabel(method_DealTest_IS_TEST)]
    
    syntax DealTestMethod ::= "failed" "(" ")" [klabel(method_DealTest_failed)]
    
    syntax DealTestMethod ::= "testDeal" "(" Int ")" [klabel(method_DealTest_testDeal)]
    
    syntax DealTestMethod ::= "vm" "(" ")" [klabel(method_DealTest_vm)]
    
    rule  ( DealTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( DealTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( DealTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( DealTest . testDeal ( V0_value ) => #abiCallData ( "testDeal" , #uint256 ( V0_value ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_value )
      
    
    rule  ( DealTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testDeal" ) => 2500527438 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module TOKEN-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= TokenContract
    
    syntax TokenContract ::= "Token" [klabel(contract_Token)]
    
    rule  ( #binRuntime ( Token ) => #parseByteStack ( "0x6080604052600080fdfea2646970667358221220ee966e1cf263af59099887b05060b3fdc2f95b840119b33c4ce5657fd4d4799e64736f6c634300080f0033" ) )
      

endmodule

module EMITCONTRACTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= EmitContractTestContract
    
    syntax EmitContractTestContract ::= "EmitContractTest" [klabel(contract_EmitContractTest)]
    
    rule  ( #binRuntime ( EmitContractTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063e3d959391161005b578063e3d95939146100e6578063f8ccbf47146100ee578063fa7626d414610101578063fd047e0d1461010e57600080fd5b80633a768463146100825780638e30cd39146100ba578063ba414fa6146100c4575b600080fd5b61009d737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100c2610116565b005b6000546100d690610100900460ff1681565b60405190151581526020016100b1565b6100c261024f565b6000546100d69062010000900460ff1681565b6000546100d69060ff1681565b6100c26102d9565b6000604051610124906103b9565b604051809103906000f080158015610140573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201819052600060448301526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c2906084015b600060405180830381600087803b1580156101a757600080fd5b505af11580156101bb573d6000803e3d6000fd5b505060405161053980825292503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020015b60405180910390a3806001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561023457600080fd5b505af1158015610248573d6000803e3d6000fd5b5050505050565b600060405161025d906103b9565b604051809103906000f080158015610279573d6000803e3d6000fd5b506040516381bad6f360e01b8152600160048201819052602482018190526000604483015260648201526001600160a01b0382166084820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d906381bad6f39060a40161018d565b60006040516102e7906103b9565b604051809103906000f080158015610303573d6000803e3d6000fd5b5060405163248e63e160e11b815260016004820181905260248201526000604482018190526064820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063491cc7c290608401600060405180830381600087803b15801561036957600080fd5b505af115801561037d573d6000803e3d6000fd5b505060405161053a815261053992503091507fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef906020016101f1565b60c4806103c68339019056fe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea26469706673582212206c4248677d044577ac40673fb8632a689fe92f28c9d31507e0939c26099d08c364736f6c634300080f0033a2646970667358221220d3dd47439a6efd5293cd502daed66f72104fa842d06a707e8d5771df990856e164736f6c634300080f0033" ) )
      
    
    syntax Field ::= EmitContractTestField
    
    syntax EmitContractTestField ::= "IS_TEST" [symbol(), klabel(field_EmitContractTest_IS_TEST)]
    
    syntax EmitContractTestField ::= "failed" [symbol(), klabel(field_EmitContractTest_failed)]
    
    syntax EmitContractTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EmitContractTest_IS_SCRIPT)]
    
    syntax EmitContractTestField ::= "stdstore" [symbol(), klabel(field_EmitContractTest_stdstore)]
    
    rule  ( #loc ( EmitContractTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( EmitContractTest . failed ) => 0 )
      
    
    rule  ( #loc ( EmitContractTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( EmitContractTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= EmitContractTestContract "." EmitContractTestMethod [function(), klabel(method_EmitContractTest)]
    
    syntax EmitContractTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_EmitContractTest_IS_SCRIPT)]
    
    syntax EmitContractTestMethod ::= "IS_TEST" "(" ")" [klabel(method_EmitContractTest_IS_TEST)]
    
    syntax EmitContractTestMethod ::= "failed" "(" ")" [klabel(method_EmitContractTest_failed)]
    
    syntax EmitContractTestMethod ::= "testExpectEmit" "(" ")" [klabel(method_EmitContractTest_testExpectEmit)]
    
    syntax EmitContractTestMethod ::= "testExpectEmitCheckEmitter" "(" ")" [klabel(method_EmitContractTest_testExpectEmitCheckEmitter)]
    
    syntax EmitContractTestMethod ::= "testExpectEmitDoNotCheckData" "(" ")" [klabel(method_EmitContractTest_testExpectEmitDoNotCheckData)]
    
    syntax EmitContractTestMethod ::= "vm" "(" ")" [klabel(method_EmitContractTest_vm)]
    
    rule  ( EmitContractTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . testExpectEmit ( ) => #abiCallData ( "testExpectEmit" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . testExpectEmitCheckEmitter ( ) => #abiCallData ( "testExpectEmitCheckEmitter" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . testExpectEmitDoNotCheckData ( ) => #abiCallData ( "testExpectEmitDoNotCheckData" , .TypedArgs ) )
      
    
    rule  ( EmitContractTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testExpectEmit" ) => 2385562937 )
      
    
    rule  ( selector ( "testExpectEmitCheckEmitter" ) => 3822672185 )
      
    
    rule  ( selector ( "testExpectEmitDoNotCheckData" ) => 4244930061 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module ENVTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= EnvTestContract
    
    syntax EnvTestContract ::= "EnvTest" [klabel(contract_EnvTest)]
    
    rule  ( #binRuntime ( EnvTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106101215760003560e01c80636c627094116100ad578063ba414fa611610071578063ba414fa6146101ba578063c45db9c5146101dc578063d5d09187146101e4578063f8ccbf47146101ec578063fa7626d4146101ff57600080fd5b80636c627094146101925780637b290a421461019a5780637cebe429146101a25780639a96435d146101aa578063aaa3bd3b146101b257600080fd5b80633a768463116100f45780633a768463146101405780633b4996ff14610172578063416c9f6a1461017a57806355151e531461018257806355c7785a1461018a57600080fd5b80630a9254e4146101265780631a9ca1b61461012857806320e3be7f14610130578063354e99c814610138575b600080fd5b005b61012661020c565b610126610349565b610126610502565b6101556000805160206120f283398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b610126610635565b610126610750565b6101266108ab565b6101266109d3565b610126610b30565b610126610c0d565b610126610cef565b610126610e99565b61012661113c565b6000546101cc90610100900460ff1681565b6040519015158152602001610169565b610126611285565b610126611417565b6000546101cc9062010000900460ff1681565b6000546101cc9060ff1681565b600060405180604001604052806009815260200168494e545f56414c554560b81b815250905060006040518060800160405280604e8152602001612247604e9139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee90610283908590859060040161197b565b600060405180830381600087803b15801561029d57600080fd5b505af11580156102b1573d6000803e3d6000fd5b505060405163892a0c6160e01b8152600160ff1b9250600091506000805160206120f28339815191529063892a0c61906102ef9087906004016119a9565b6020604051808303816000875af115801561030e573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061033291906119c3565b9050818114610343576103436119dc565b50505050565b60006040518060400160405280600b81526020016a55494e545f56414c55455360a81b8152509050600060405180608001604052806044815260200161229560449139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee906103c2908590859060040161197b565b600060405180830381600087803b1580156103dc57600080fd5b505af11580156103f0573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602080830191909152825180840184526000808252918101829052925163f3dec09960e01b81529194509192506000805160206120f28339815191529063f3dec09990610457908890879060040161197b565b6000604051808303816000875af1158015610476573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261049e9190810190611a5d565b9050816040516020016104b19190611af3565b60405160208183030381529060405280519060200120816040516020016104d89190611b27565b60405160208183030381529060405280519060200120146104fb576104fb6119dc565b5050505050565b604080518082018252600a815269424f4f4c5f56414c554560b01b602080830191909152825180840184526004808252637472756560e01b928201929092529251631eac91f760e11b81529192916000805160206120f283398151915291633d5923ee9161057491869186910161197b565b600060405180830381600087803b15801561058e57600080fd5b505af11580156105a2573d6000803e3d6000fd5b5050604051637ed1ec7d60e01b815260019250600091506000805160206120f283398151915290637ed1ec7d906105dd9087906004016119a9565b6020604051808303816000875af11580156105fc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106209190611b72565b905081151581151514610343576103436119dc565b60006040518060400160405280600a815260200169494e545f56414c55455360b01b815250905060006040518060c00160405280608781526020016121c060879139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee906106ad908590859060040161197b565b600060405180830381600087803b1580156106c757600080fd5b505af11580156106db573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452600160ff1b81526001600160ff1b03918101919091529151630421811560e41b81529093509091506000906000805160206120f283398151915290634218115090610457908890879060040161197b565b604080518082018252600c81526b535452494e475f56414c554560a01b60208083019190915282518084018452600d81526c68656c6c6f2c20776f726c642160981b918101919091529151631eac91f760e11b81529091906000805160206120f283398151915290633d5923ee906107ce908590859060040161197b565b600060405180830381600087803b1580156107e857600080fd5b505af11580156107fc573d6000803e3d6000fd5b5050604080518082018252600d81526c68656c6c6f2c20776f726c642160981b6020820152905163f877cb1960e01b8152909250600091506000805160206120f28339815191529063f877cb19906108589087906004016119a9565b6000604051808303816000875af1158015610877573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261089f9190810190611bf9565b9050610343818361165d565b60006040518060400160405280600e81526020016d425954455333325f56414c55455360901b815250905060006040518060600160405280602f8152602001612112602f9139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee90610927908590859060040161197b565b600060405180830381600087803b15801561094157600080fd5b505af1158015610955573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b60208083019190915282518084018452737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b815260009181018290529251635af231c160e01b81529194509192506000805160206120f283398151915290635af231c190610457908890879060040161197b565b60006040518060400160405280600b81526020016a42595445535f56414c554560a81b815250905060006040518060600160405280602a8152602001612196602a9139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee90610a4c908590859060040161197b565b600060405180830381600087803b158015610a6657600080fd5b505af1158015610a7a573d6000803e3d6000fd5b505060408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516326bdd78360e11b8152909250600091506000805160206120f283398151915290634d7baf0690610add9087906004016119a9565b6000604051808303816000875af1158015610afc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610b249190810190611bf9565b905061034381836117aa565b604080518082018252600d81526c425954455333325f56414c554560981b602080830191909152825180840184526004808252630307830360e41b928201929092529251631eac91f760e11b81529192916000805160206120f283398151915291633d5923ee91610ba591869186910161197b565b600060405180830381600087803b158015610bbf57600080fd5b505af1158015610bd3573d6000803e3d6000fd5b5050604051634bca482160e11b8152600092508291506000805160206120f2833981519152906397949042906102ef9087906004016119a9565b60006040518060400160405280600a81526020016955494e545f56414c554560b01b815250905060006040518060800160405280604e81526020016122d9604e9139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee90610c85908590859060040161197b565b600060405180830381600087803b158015610c9f57600080fd5b505af1158015610cb3573d6000803e3d6000fd5b505060405163c1978d1f60e01b81526000199250600091506000805160206120f28339815191529063c1978d1f906102ef9087906004016119a9565b604080518082018252600b81526a424f4f4c5f56414c55455360a81b602080830191909152825180840184526015815274747275652c66616c73652c747275652c66616c736560581b918101919091529151631eac91f760e11b81529091906000805160206120f283398151915290633d5923ee90610d74908590859060040161197b565b600060405180830381600087803b158015610d8e57600080fd5b505af1158015610da2573d6000803e3d6000fd5b50506040805180820182526001808252600b60fa1b602080840191909152835160808101855282815260009181018290528085019290925260608201819052925163aaaddeaf60e01b815291945092506000805160206120f28339815191529063aaaddeaf90610e18908890879060040161197b565b6000604051808303816000875af1158015610e37573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e5f9190810190611c2e565b905081604051602001610e729190611cbb565b60405160208183030381529060405280519060200120816040516020016104d89190611cf1565b60006040518060400160405280600c81526020016b42595445535f56414c55455360a01b815250905060006040518060600160405280602f8152602001612112602f9139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee90610f13908590859060040161197b565b600060405180830381600087803b158015610f2d57600080fd5b505af1158015610f41573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602082015281516002808252606082019093529093506000925090816020015b6060815260200190600190039081610f75579050509050604051806040016040528060148152602001737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b81525081600081518110610fcc57610fcc611d1d565b602002602001018190525060405180604001604052806001815260200160008152508160018151811061100157611001611d1d565b602090810291909101015260405163ddc2651b60e01b81526000906000805160206120f28339815191529063ddc2651b90611042908890879060040161197b565b6000604051808303816000875af1158015611061573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526110899190810190611d33565b905060005b8251811015611134578281815181106110a9576110a9611d1d565b60200260200101516040516020016110c19190611de4565b604051602081830303815290604052805190602001208282815181106110e9576110e9611d1d565b60200260200101516040516020016111019190611de4565b6040516020818303038152906040528051906020012014611124576111246119dc565b61112d81611e00565b905061108e565b505050505050565b60006040518060400160405280600d81526020016c414444524553535f56414c554560981b815250905060006040518060600160405280602a8152602001612196602a9139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee906111b7908590859060040161197b565b600060405180830381600087803b1580156111d157600080fd5b505af11580156111e5573d6000803e3d6000fd5b505060405163350d56bf60e01b81526000805160206120f2833981519152925060009150829063350d56bf9061121f9087906004016119a9565b6020604051808303816000875af115801561123e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112629190611e3e565b9050816001600160a01b0316816001600160a01b031614610343576103436119dc565b60006040518060400160405280600e81526020016d414444524553535f56414c55455360901b8152509050600060405180608001604052806055815260200161214160559139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee90611301908590859060040161197b565b600060405180830381600087803b15801561131b57600080fd5b505af115801561132f573d6000803e3d6000fd5b505060408051808201825260018152600b60fa1b602080830191909152825180840184526000805160206120f283398151915280825260009282018390529351635698dcfd60e11b81529295509350919063ad31b9fa90611396908890879060040161197b565b6000604051808303816000875af11580156113b5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113dd9190810190611e59565b9050816040516020016113f09190611ee6565b60405160208183030381529060405280519060200120816040516020016104d89190611f14565b60006040518060400160405280600d81526020016c535452494e475f56414c55455360981b815250905060006040518060600160405280603881526020016120ba60389139604051631eac91f760e11b81529091506000805160206120f283398151915290633d5923ee90611492908590859060040161197b565b600060405180830381600087803b1580156114ac57600080fd5b505af11580156114c0573d6000803e3d6000fd5b505050506000604051806040016040528060018152602001601f60fa1b8152509050600060405180604001604052806040518060400160405280600d81526020016c68656c6c6f2c20776f726c642160981b81525081526020016040518060600160405280602a8152602001612196602a913990526040516314b02bc960e01b81529091506000906000805160206120f2833981519152906314b02bc99061156e908890879060040161197b565b6000604051808303816000875af115801561158d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526115b59190810190611f47565b905060005b6002811015611134578281600281106115d5576115d5611d1d565b60200201516040516020016115ea9190611de4565b6040516020818303038152906040528051906020012082828151811061161257611612611d1d565b602002602001015160405160200161162a9190611de4565b604051602081830303815290604052805190602001201461164d5761164d6119dc565b61165681611e00565b90506115ba565b8060405160200161166e9190611de4565b60405160208183030381529060405280519060200120826040516020016116959190611de4565b60405160208183030381529060405280519060200120146117a6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161171c9060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516117539190611feb565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838160405161178a919061201e565b60405180910390a16117a66000805461ff001916610100179055565b5050565b6117a682826117b98282611896565b6117a6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516118289060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188260405161185f9190612051565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf188160405161178a9190612085565b8051825160019190036119195760005b8351811015611913578281815181106118c1576118c1611d1d565b602001015160f81c60f81b6001600160f81b0319168482815181106118e8576118e8611d1d565b01602001516001600160f81b0319161461190157600091505b8061190b81611e00565b9150506118a6565b5061191d565b5060005b92915050565b60005b8381101561193e578181015183820152602001611926565b838111156103435750506000910152565b60008151808452611967816020860160208601611923565b601f01601f19169290920160200192915050565b60408152600061198e604083018561194f565b82810360208401526119a0818561194f565b95945050505050565b6020815260006119bc602083018461194f565b9392505050565b6000602082840312156119d557600080fd5b5051919050565b634e487b7160e01b600052600160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715611a3157611a316119f2565b604052919050565b600067ffffffffffffffff821115611a5357611a536119f2565b5060051b60200190565b60006020808385031215611a7057600080fd5b825167ffffffffffffffff811115611a8757600080fd5b8301601f81018513611a9857600080fd5b8051611aab611aa682611a39565b611a08565b81815260059190911b82018301908381019087831115611aca57600080fd5b928401925b82841015611ae857835182529284019290840190611acf565b979650505050505050565b60008183825b6002811015611b18578151835260209283019290910190600101611af9565b50505060408201905092915050565b815160009082906020808601845b83811015611b5157815185529382019390820190600101611b35565b50929695505050505050565b80518015158114611b6d57600080fd5b919050565b600060208284031215611b8457600080fd5b6119bc82611b5d565b600082601f830112611b9e57600080fd5b815167ffffffffffffffff811115611bb857611bb86119f2565b611bcb601f8201601f1916602001611a08565b818152846020838601011115611be057600080fd5b611bf1826020830160208701611923565b949350505050565b600060208284031215611c0b57600080fd5b815167ffffffffffffffff811115611c2257600080fd5b611bf184828501611b8d565b60006020808385031215611c4157600080fd5b825167ffffffffffffffff811115611c5857600080fd5b8301601f81018513611c6957600080fd5b8051611c77611aa682611a39565b81815260059190911b82018301908381019087831115611c9657600080fd5b928401925b82841015611ae857611cac84611b5d565b82529284019290840190611c9b565b60008183825b6004811015611ce25781511515835260209283019290910190600101611cc1565b50505060808201905092915050565b815160009082906020808601845b83811015611b51578151151585529382019390820190600101611cff565b634e487b7160e01b600052603260045260246000fd5b60006020808385031215611d4657600080fd5b825167ffffffffffffffff80821115611d5e57600080fd5b818501915085601f830112611d7257600080fd5b8151611d80611aa682611a39565b81815260059190911b83018401908481019088831115611d9f57600080fd5b8585015b83811015611dd757805185811115611dbb5760008081fd5b611dc98b89838a0101611b8d565b845250918601918601611da3565b5098975050505050505050565b60008251611df6818460208701611923565b9190910192915050565b600060018201611e2057634e487b7160e01b600052601160045260246000fd5b5060010190565b80516001600160a01b0381168114611b6d57600080fd5b600060208284031215611e5057600080fd5b6119bc82611e27565b60006020808385031215611e6c57600080fd5b825167ffffffffffffffff811115611e8357600080fd5b8301601f81018513611e9457600080fd5b8051611ea2611aa682611a39565b81815260059190911b82018301908381019087831115611ec157600080fd5b928401925b82841015611ae857611ed784611e27565b82529284019290840190611ec6565b60008183825b6002811015611b185781516001600160a01b0316835260209283019290910190600101611eec565b815160009082906020808601845b83811015611b515781516001600160a01b031685529382019390820190600101611f22565b60006020808385031215611f5a57600080fd5b825167ffffffffffffffff80821115611f7257600080fd5b818501915085601f830112611f8657600080fd5b8151611f94611aa682611a39565b81815260059190911b83018401908481019088831115611fb357600080fd5b8585015b83811015611dd757805185811115611fcf5760008081fd5b611fdd8b89838a0101611b8d565b845250918601918601611fb7565b604081526009604082015268202056616c7565206160b81b60608201526080602082015260006119bc608083018461194f565b60408152600960408201526810102b30b63ab2903160b91b60608201526080602082015260006119bc608083018461194f565b60408152600a6040820152690808115e1c1958dd195960b21b60608201526080602082015260006119bc608083018461194f565b60408152600a604082015269080808081058dd1d585b60b21b60608201526080602082015260006119bc608083018461194f56fe68656c6c6f2c20776f726c64217c3078373130393730394543666139316138303632366646333938394436386636374635623144443132440000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12d3078373130393730394543666139316138303632366646333938394436386636374635623144443132442c307830303078373130393730394543666139316138303632366646333938394436386636374635623144443132442c3078303030303030303030303030303030303030303030303030303030303030303030303030303030303078373130393730394543666139316138303632366646333938394436386636374635623144443132442d3078383030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030302c2b3078374646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646464646462d3537383936303434363138363538303937373131373835343932353034333433393533393236363334393932333332383230323832303139373238373932303033393536353634383139393638302c307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030313135373932303839323337333136313935343233353730393835303038363837393037383533323639393834363635363430353634303339343537353834303037393133313239363339393335a2646970667358221220e85dd9685f36a4f291bb42a51e6fa942acaf059713370eef2b0a5f2c111cb24864736f6c634300080f0033" ) )
      
    
    syntax Field ::= EnvTestField
    
    syntax EnvTestField ::= "IS_TEST" [symbol(), klabel(field_EnvTest_IS_TEST)]
    
    syntax EnvTestField ::= "failed" [symbol(), klabel(field_EnvTest_failed)]
    
    syntax EnvTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EnvTest_IS_SCRIPT)]
    
    syntax EnvTestField ::= "stdstore" [symbol(), klabel(field_EnvTest_stdstore)]
    
    rule  ( #loc ( EnvTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( EnvTest . failed ) => 0 )
      
    
    rule  ( #loc ( EnvTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( EnvTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= EnvTestContract "." EnvTestMethod [function(), klabel(method_EnvTest)]
    
    syntax EnvTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_EnvTest_IS_SCRIPT)]
    
    syntax EnvTestMethod ::= "IS_TEST" "(" ")" [klabel(method_EnvTest_IS_TEST)]
    
    syntax EnvTestMethod ::= "failed" "(" ")" [klabel(method_EnvTest_failed)]
    
    syntax EnvTestMethod ::= "setUp" "(" ")" [klabel(method_EnvTest_setUp)]
    
    syntax EnvTestMethod ::= "testEnvAddress" "(" ")" [klabel(method_EnvTest_testEnvAddress)]
    
    syntax EnvTestMethod ::= "testEnvAddresseArray" "(" ")" [klabel(method_EnvTest_testEnvAddresseArray)]
    
    syntax EnvTestMethod ::= "testEnvBool" "(" ")" [klabel(method_EnvTest_testEnvBool)]
    
    syntax EnvTestMethod ::= "testEnvBoolArray" "(" ")" [klabel(method_EnvTest_testEnvBoolArray)]
    
    syntax EnvTestMethod ::= "testEnvBytes" "(" ")" [klabel(method_EnvTest_testEnvBytes)]
    
    syntax EnvTestMethod ::= "testEnvBytes32" "(" ")" [klabel(method_EnvTest_testEnvBytes32)]
    
    syntax EnvTestMethod ::= "testEnvBytes32Array" "(" ")" [klabel(method_EnvTest_testEnvBytes32Array)]
    
    syntax EnvTestMethod ::= "testEnvBytesArray" "(" ")" [klabel(method_EnvTest_testEnvBytesArray)]
    
    syntax EnvTestMethod ::= "testEnvInt" "(" ")" [klabel(method_EnvTest_testEnvInt)]
    
    syntax EnvTestMethod ::= "testEnvIntArray" "(" ")" [klabel(method_EnvTest_testEnvIntArray)]
    
    syntax EnvTestMethod ::= "testEnvString" "(" ")" [klabel(method_EnvTest_testEnvString)]
    
    syntax EnvTestMethod ::= "testEnvStringArray" "(" ")" [klabel(method_EnvTest_testEnvStringArray)]
    
    syntax EnvTestMethod ::= "testEnvUInt" "(" ")" [klabel(method_EnvTest_testEnvUInt)]
    
    syntax EnvTestMethod ::= "testEnvUIntArray" "(" ")" [klabel(method_EnvTest_testEnvUIntArray)]
    
    syntax EnvTestMethod ::= "vm" "(" ")" [klabel(method_EnvTest_vm)]
    
    rule  ( EnvTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( EnvTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( EnvTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( EnvTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvAddress ( ) => #abiCallData ( "testEnvAddress" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvAddresseArray ( ) => #abiCallData ( "testEnvAddresseArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBool ( ) => #abiCallData ( "testEnvBool" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBoolArray ( ) => #abiCallData ( "testEnvBoolArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBytes ( ) => #abiCallData ( "testEnvBytes" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBytes32 ( ) => #abiCallData ( "testEnvBytes32" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBytes32Array ( ) => #abiCallData ( "testEnvBytes32Array" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvBytesArray ( ) => #abiCallData ( "testEnvBytesArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvInt ( ) => #abiCallData ( "testEnvInt" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvIntArray ( ) => #abiCallData ( "testEnvIntArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvString ( ) => #abiCallData ( "testEnvString" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvStringArray ( ) => #abiCallData ( "testEnvStringArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvUInt ( ) => #abiCallData ( "testEnvUInt" , .TypedArgs ) )
      
    
    rule  ( EnvTest . testEnvUIntArray ( ) => #abiCallData ( "testEnvUIntArray" , .TypedArgs ) )
      
    
    rule  ( EnvTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testEnvAddress" ) => 2862857531 )
      
    
    rule  ( selector ( "testEnvAddresseArray" ) => 3294476741 )
      
    
    rule  ( selector ( "testEnvBool" ) => 894343624 )
      
    
    rule  ( selector ( "testEnvBoolArray" ) => 2095834153 )
      
    
    rule  ( selector ( "testEnvBytes" ) => 1439135834 )
      
    
    rule  ( selector ( "testEnvBytes32" ) => 1818390676 )
      
    
    rule  ( selector ( "testEnvBytes32Array" ) => 1427447379 )
      
    
    rule  ( selector ( "testEnvBytesArray" ) => 2593538909 )
      
    
    rule  ( selector ( "testEnvInt" ) => 446472630 )
      
    
    rule  ( selector ( "testEnvIntArray" ) => 994678527 )
      
    
    rule  ( selector ( "testEnvString" ) => 1097637738 )
      
    
    rule  ( selector ( "testEnvStringArray" ) => 3587215751 )
      
    
    rule  ( selector ( "testEnvUInt" ) => 2066287170 )
      
    
    rule  ( selector ( "testEnvUIntArray" ) => 551796351 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module ETCHTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= EtchTestContract
    
    syntax EtchTestContract ::= "EtchTest" [klabel(contract_EtchTest)]
    
    rule  ( #binRuntime ( EtchTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780631a9f8ff7146100715780633a76846314610079578063ba414fa6146100b1578063f8ccbf47146100d3578063fa7626d4146100e6575b600080fd5b61006f6100f3565b005b61006f61013e565b610094737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546100c390610100900460ff1681565b60405190151581526020016100a8565b6000546100c39062010000900460ff1681565b6000546100c39060ff1681565b6040516100ff906103a5565b604051809103906000f08015801561011b573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b600854604080516001600160a01b03909216803b838101602090810190935280845260009392909184918401903c604051635a6b63c160e11b8152909150600190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063b4d6c782906101ab90849086906004016103ff565b600060405180830381600087803b1580156101c557600080fd5b505af11580156101d9573d6000803e3d6000fd5b5050505061020c816001600160a01b0316803b806020016040519081016040528181526000908060200190933c83610210565b5050565b61020c828261021f8282610318565b61020c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161028e9060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18826040516102c5919061042b565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516102fc9190610466565b60405180910390a161020c6000805461ff001916610100179055565b80518251600191900361039b5760005b8351811015610395578281815181106103435761034361049a565b602001015160f81c60f81b6001600160f81b03191684828151811061036a5761036a61049a565b01602001516001600160f81b0319161461038357600091505b8061038d816104b0565b915050610328565b5061039f565b5060005b92915050565b61019c806104d883390190565b6000815180845260005b818110156103d8576020818501810151868301820152016103bc565b818111156103ea576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0383168152604060208201819052600090610423908301846103b2565b949350505050565b60408152600a6040820152690808115e1c1958dd195960b21b606082015260806020820152600061045f60808301846103b2565b9392505050565b60408152600a604082015269080808081058dd1d585b60b21b606082015260806020820152600061045f60808301846103b2565b634e487b7160e01b600052603260045260246000fd5b6000600182016104d057634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5061017c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063a9059cbb14610030575b600080fd5b61004361003e3660046100c9565b610045565b005b610050338383610054565b5050565b6001600160a01b038316600090815260016020526040902054610078908290610117565b6001600160a01b0380851660009081526001602052604080822093909355908416815220546100a890829061012e565b6001600160a01b039092166000908152600160205260409020919091555050565b600080604083850312156100dc57600080fd5b82356001600160a01b03811681146100f357600080fd5b946020939093013593505050565b634e487b7160e01b600052601160045260246000fd5b60008282101561012957610129610101565b500390565b6000821982111561014157610141610101565b50019056fea264697066735822122048864431c66eb7c7df9c0a1dd3bd6b68c716849468902aaf955481bf85c8f94064736f6c634300080f0033a264697066735822122093bd4731c389a4200baf2c817d4413af0ef1dd4271b8fcf38ed60cd1c747fd4e64736f6c634300080f0033" ) )
      
    
    syntax Field ::= EtchTestField
    
    syntax EtchTestField ::= "IS_TEST" [symbol(), klabel(field_EtchTest_IS_TEST)]
    
    syntax EtchTestField ::= "failed" [symbol(), klabel(field_EtchTest_failed)]
    
    syntax EtchTestField ::= "IS_SCRIPT" [symbol(), klabel(field_EtchTest_IS_SCRIPT)]
    
    syntax EtchTestField ::= "stdstore" [symbol(), klabel(field_EtchTest_stdstore)]
    
    syntax EtchTestField ::= "awesomeContract" [symbol(), klabel(field_EtchTest_awesomeContract)]
    
    rule  ( #loc ( EtchTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( EtchTest . failed ) => 0 )
      
    
    rule  ( #loc ( EtchTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( EtchTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( EtchTest . awesomeContract ) => 8 )
      
    
    syntax ByteArray ::= EtchTestContract "." EtchTestMethod [function(), klabel(method_EtchTest)]
    
    syntax EtchTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_EtchTest_IS_SCRIPT)]
    
    syntax EtchTestMethod ::= "IS_TEST" "(" ")" [klabel(method_EtchTest_IS_TEST)]
    
    syntax EtchTestMethod ::= "failed" "(" ")" [klabel(method_EtchTest_failed)]
    
    syntax EtchTestMethod ::= "setUp" "(" ")" [klabel(method_EtchTest_setUp)]
    
    syntax EtchTestMethod ::= "testEtch" "(" ")" [klabel(method_EtchTest_testEtch)]
    
    syntax EtchTestMethod ::= "vm" "(" ")" [klabel(method_EtchTest_vm)]
    
    rule  ( EtchTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( EtchTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( EtchTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( EtchTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( EtchTest . testEtch ( ) => #abiCallData ( "testEtch" , .TypedArgs ) )
      
    
    rule  ( EtchTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testEtch" ) => 446664695 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module FFITEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= FfiTestContract
    
    syntax FfiTestContract ::= "FfiTest" [klabel(contract_FfiTest)]
    
    rule  ( #binRuntime ( FfiTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100925760003560e01c8063a2f6dab511610066578063a2f6dab5146100e9578063ba414fa6146100f1578063f5eaa12614610113578063f8ccbf471461011b578063fa7626d41461012e57600080fd5b80623e1314146100975780630a9254e4146100a15780633a768463146100a9578063900127c6146100e1575b600080fd5b61009f61013b565b005b61009f610376565b6100c4737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61009f610424565b61009f6105d1565b60005461010390610100900460ff1681565b60405190151581526020016100d8565b61009f610677565b6000546101039062010000900460ff1681565b6000546101039060ff1681565b60408051600380825260808201909252600091816020015b6060815260200190600190039081610153579050509050604051806040016040528060048152602001636563686f60e01b8152508160008151811061019a5761019a610946565b60200260200101819052506040518060400160405280600281526020016116b760f11b815250816001815181106101d3576101d3610946565b602090810291909101810191909152604051737109709ecfa91a80626ff3989d68f67f5b1dd12d916371aad10d916102229101602080825260029082015261676d60f01b604082015260600190565b6040516020818303038152906040526040518263ffffffff1660e01b815260040161024d91906109b8565b6000604051808303816000875af115801561026c573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102949190810190610a46565b816002815181106102a7576102a7610946565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906389160467906102ec908590600401610a97565b6000604051808303816000875af115801561030b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103339190810190610a46565b905060008180602001905181019061034b9190610a46565b90506103718160405180604001604052806002815260200161676d60f01b8152506107e3565b505050565b600060405180604001604052806003815260200162464f4f60e81b8152509050600060405180610100016040528060c28152602001610baa60c29139604051631eac91f760e11b8152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90633d5923ee906103ee9085908590600401610af9565b600060405180830381600087803b15801561040857600080fd5b505af115801561041c573d6000803e3d6000fd5b505050505050565b60408051600380825260808201909252600091816020015b606081526020019060019003908161043c579050509050604051806040016040528060048152602001630c4c2e6d60e31b8152508160008151811061048357610483610946565b6020026020010181905250604051806040016040528060028152602001612d6360f01b815250816001815181106104bc576104bc610946565b60200260200101819052506040518060400160405280600c81526020016b6563686f202d6e2024464f4f60a01b815250816002815181106104ff576104ff610946565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90638916046790610544908590600401610a97565b6000604051808303816000875af1158015610563573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261058b9190810190610a46565b90506000818060200190518101906105a39190610a46565b9050610371816040518060400160405280600a815260200169393ab73a34b6b2ab30b960b11b8152506107e3565b60408051600280825260608201909252600091816020015b60608152602001906001900390816105e9579050509050604051806040016040528060048152602001630c4c2e6d60e31b8152508160008151811061063057610630610946565b60200260200101819052506040518060400160405280601081526020016f0e8cae6e85edaf2e6c6e4d2e0e85ce6d60831b815250816001815181106104ff576104ff610946565b60408051600280825260608201909252600091816020015b606081526020019060019003908161068f579050509050604051806040016040528060048152602001630c4c2e6d60e31b815250816000815181106106d6576106d6610946565b60200260200101819052506040518060400160405280600e81526020016d0e8cae6e85ee6c6e4d2e0e85ce6d60931b8152508160018151811061071b5761071b610946565b6020908102919091010152604051638916046760e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90638916046790610760908590600401610a97565b6000604051808303816000875af115801561077f573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526107a79190810190610a46565b90506000818060200190518101906107bf9190610a46565b905061037181604051806040016040528060048152602001637472756560e01b8152505b806040516020016107f49190610b27565b604051602081830303815290604052805190602001208260405160200161081b9190610b27565b604051602081830303815290604052805190602001201461092c577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516108a29060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516108d99190610b43565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516109109190610b76565b60405180910390a161092c6000805461ff001916610100179055565b5050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60005b8381101561097757818101518382015260200161095f565b83811115610986576000848401525b50505050565b600081518084526109a481602086016020860161095c565b601f01601f19169290920160200192915050565b6020815260006109cb602083018461098c565b9392505050565b600067ffffffffffffffff808411156109ed576109ed610930565b604051601f8501601f19908116603f01168101908282118183101715610a1557610a15610930565b81604052809350858152868686011115610a2e57600080fd5b610a3c86602083018761095c565b5050509392505050565b600060208284031215610a5857600080fd5b815167ffffffffffffffff811115610a6f57600080fd5b8201601f81018413610a8057600080fd5b610a8f848251602084016109d2565b949350505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b82811015610aec57603f19888603018452610ada85835161098c565b94509285019290850190600101610abe565b5092979650505050505050565b604081526000610b0c604083018561098c565b8281036020840152610b1e818561098c565b95945050505050565b60008251610b3981846020870161095c565b9190910192915050565b604081526009604082015268202056616c7565206160b81b60608201526080602082015260006109cb608083018461098c565b60408152600960408201526810102b30b63ab2903160b91b60608201526080602082015260006109cb608083018461098c56fe3078303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303032303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030306137323735366537343639366436353536363137323030303030303030303030303030303030303030303030303030303030303030303030303030303030303030a2646970667358221220fdde81704d2036b4e13a6ebe4b860110a3c0e9a8ed6e65cee43f68efafa089e964736f6c634300080f0033" ) )
      
    
    syntax Field ::= FfiTestField
    
    syntax FfiTestField ::= "IS_TEST" [symbol(), klabel(field_FfiTest_IS_TEST)]
    
    syntax FfiTestField ::= "failed" [symbol(), klabel(field_FfiTest_failed)]
    
    syntax FfiTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FfiTest_IS_SCRIPT)]
    
    syntax FfiTestField ::= "stdstore" [symbol(), klabel(field_FfiTest_stdstore)]
    
    rule  ( #loc ( FfiTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( FfiTest . failed ) => 0 )
      
    
    rule  ( #loc ( FfiTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( FfiTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= FfiTestContract "." FfiTestMethod [function(), klabel(method_FfiTest)]
    
    syntax FfiTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_FfiTest_IS_SCRIPT)]
    
    syntax FfiTestMethod ::= "IS_TEST" "(" ")" [klabel(method_FfiTest_IS_TEST)]
    
    syntax FfiTestMethod ::= "failed" "(" ")" [klabel(method_FfiTest_failed)]
    
    syntax FfiTestMethod ::= "setUp" "(" ")" [klabel(method_FfiTest_setUp)]
    
    syntax FfiTestMethod ::= "testFFIFOO" "(" ")" [klabel(method_FfiTest_testFFIFOO)]
    
    syntax FfiTestMethod ::= "testFFIScript" "(" ")" [klabel(method_FfiTest_testFFIScript)]
    
    syntax FfiTestMethod ::= "testFFIScript2" "(" ")" [klabel(method_FfiTest_testFFIScript2)]
    
    syntax FfiTestMethod ::= "testffi" "(" ")" [klabel(method_FfiTest_testffi)]
    
    syntax FfiTestMethod ::= "vm" "(" ")" [klabel(method_FfiTest_vm)]
    
    rule  ( FfiTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( FfiTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( FfiTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( FfiTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( FfiTest . testFFIFOO ( ) => #abiCallData ( "testFFIFOO" , .TypedArgs ) )
      
    
    rule  ( FfiTest . testFFIScript ( ) => #abiCallData ( "testFFIScript" , .TypedArgs ) )
      
    
    rule  ( FfiTest . testFFIScript2 ( ) => #abiCallData ( "testFFIScript2" , .TypedArgs ) )
      
    
    rule  ( FfiTest . testffi ( ) => #abiCallData ( "testffi" , .TypedArgs ) )
      
    
    rule  ( FfiTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testFFIFOO" ) => 2415994822 )
      
    
    rule  ( selector ( "testFFIScript" ) => 2734086837 )
      
    
    rule  ( selector ( "testFFIScript2" ) => 4125794598 )
      
    
    rule  ( selector ( "testffi" ) => 4068116 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module FILESTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= FilesTestContract
    
    syntax FilesTestContract ::= "FilesTest" [klabel(contract_FilesTest)]
    
    rule  ( #binRuntime ( FilesTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063ba414fa61161005b578063ba414fa6146100c6578063e7515e59146100e8578063f8ccbf47146100f0578063fa7626d41461010357600080fd5b80633a76846314610082578063a5be8246146100b4578063b52803ed146100be575b600080fd5b610097600080516020610b0083398151915281565b6040516001600160a01b0390911681526020015b60405180910390f35b6100bc610110565b005b6100bc6102ca565b6000546100d890610100900460ff1681565b60405190151581526020016100ab565b6100bc61055a565b6000546100d89062010000900460ff1681565b6000546100d89060ff1681565b6040516360f9bb1160e01b8152600090600080516020610b00833981519152906360f9bb119061014290600401610803565b6000604051808303816000875af1158015610161573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101899190810190610872565b60405163897e0a9760e01b8152909150600080516020610b008339815191529063897e0a97906101bd90849060040161094b565b600060405180830381600087803b1580156101d757600080fd5b505af11580156101eb573d6000803e3d6000fd5b505060405163f1afe04d60e01b8152600080516020610b00833981519152925063f1afe04d915061021e90600401610999565b600060405180830381600087803b15801561023857600080fd5b505af115801561024c573d6000803e3d6000fd5b50506040516360f9bb1160e01b8152600080516020610b0083398151915292506360f9bb11915061027f90600401610999565b6000604051808303816000875af115801561029e573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102c69190810190610872565b5050565b604051630e1eaae560e31b8152600090600080516020610b00833981519152906370f55728906102fc90600401610803565b6000604051808303816000875af115801561031b573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103439190810190610872565b60405163619d897f60e01b8152909150600080516020610b008339815191529063619d897f906103779084906004016109d3565b600060405180830381600087803b15801561039157600080fd5b505af11580156103a5573d6000803e3d6000fd5b5050604051630e1eaae560e31b8152600080516020610b0083398151915292506370f5572891506103d890600401610803565b6000604051808303816000875af11580156103f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261041f9190810190610872565b905061044e816040518060400160405280600b81526020016a666f722074657374696e6760a81b8152506106ba565b6040516348c3241f60e01b8152600080516020610b00833981519152906348c3241f9061047d90600401610803565b600060405180830381600087803b15801561049757600080fd5b505af11580156104ab573d6000803e3d6000fd5b5050604051630e1eaae560e31b8152600080516020610b0083398151915292506370f5572891506104de90600401610803565b6000604051808303816000875af11580156104fd573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105259190810190610872565b9050610557816040518060400160405280600e81526020016d5468697320697320612066696c6560901b8152506106ba565b50565b6040516360f9bb1160e01b8152600090600080516020610b00833981519152906360f9bb119061058c90600401610803565b6000604051808303816000875af11580156105ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d39190810190610872565b60405163897e0a9760e01b8152909150600080516020610b008339815191529063897e0a9790610607908490600401610a17565b600060405180830381600087803b15801561062157600080fd5b505af1158015610635573d6000803e3d6000fd5b50506040516360f9bb1160e01b815260009250600080516020610b0083398151915291506360f9bb119061066b90600401610a4a565b6000604051808303816000875af115801561068a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526106b29190810190610872565b90506102c682825b806040516020016106cb9190610a7d565b60405160208183030381529060405280519060200120826040516020016106f29190610a7d565b60405160208183030381529060405280519060200120146102c6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516107799060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826040516107b09190610a99565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516107e79190610acc565b60405180910390a16102c66000805461ff001916610100179055565b6020808252600f908201526e0b8bdd195cdd0bd99a5b194b9d1e1d608a1b604082015260600190565b634e487b7160e01b600052604160045260246000fd5b60005b8381101561085d578181015183820152602001610845565b8381111561086c576000848401525b50505050565b60006020828403121561088457600080fd5b815167ffffffffffffffff8082111561089c57600080fd5b818401915084601f8301126108b057600080fd5b8151818111156108c2576108c261082c565b604051601f8201601f19908116603f011681019083821181831017156108ea576108ea61082c565b8160405282815287602084870101111561090357600080fd5b610914836020830160208801610842565b979650505050505050565b60008151808452610937816020860160208601610842565b601f01601f19169290920160200192915050565b60408152600061097f6040830160148152730b8bdd195cdd0bd99a5b1958dbdc1e4c8b9d1e1d60621b602082015260400190565b8281036020840152610991818561091f565b949350505050565b6020815260006109cd6020830160148152730b8bdd195cdd0bd99a5b1958dbdc1e4c8b9d1e1d60621b602082015260400190565b92915050565b6040815260136040820152720b8bdd195cdd0bd99a5b195b1a5b994b9d1e1d606a1b6060820152608060208201526000610a10608083018461091f565b9392505050565b60408152600061097f6040830160138152720b8bdd195cdd0bd99a5b1958dbdc1e4b9d1e1d606a1b602082015260400190565b6020815260006109cd6020830160138152720b8bdd195cdd0bd99a5b1958dbdc1e4b9d1e1d606a1b602082015260400190565b60008251610a8f818460208701610842565b9190910192915050565b604081526009604082015268202056616c7565206160b81b6060820152608060208201526000610a10608083018461091f565b60408152600960408201526810102b30b63ab2903160b91b6060820152608060208201526000610a10608083018461091f56fe0000000000000000000000007109709ecfa91a80626ff3989d68f67f5b1dd12da26469706673582212201fa054e6a9cecad508c0af70922e77a4b8e02bcb126b588b6f3bafa050a6cd6064736f6c634300080f0033" ) )
      
    
    syntax Field ::= FilesTestField
    
    syntax FilesTestField ::= "IS_TEST" [symbol(), klabel(field_FilesTest_IS_TEST)]
    
    syntax FilesTestField ::= "failed" [symbol(), klabel(field_FilesTest_failed)]
    
    syntax FilesTestField ::= "IS_SCRIPT" [symbol(), klabel(field_FilesTest_IS_SCRIPT)]
    
    syntax FilesTestField ::= "stdstore" [symbol(), klabel(field_FilesTest_stdstore)]
    
    rule  ( #loc ( FilesTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( FilesTest . failed ) => 0 )
      
    
    rule  ( #loc ( FilesTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( FilesTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= FilesTestContract "." FilesTestMethod [function(), klabel(method_FilesTest)]
    
    syntax FilesTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_FilesTest_IS_SCRIPT)]
    
    syntax FilesTestMethod ::= "IS_TEST" "(" ")" [klabel(method_FilesTest_IS_TEST)]
    
    syntax FilesTestMethod ::= "failed" "(" ")" [klabel(method_FilesTest_failed)]
    
    syntax FilesTestMethod ::= "testFailRemoveFile" "(" ")" [klabel(method_FilesTest_testFailRemoveFile)]
    
    syntax FilesTestMethod ::= "testReadWriteFile" "(" ")" [klabel(method_FilesTest_testReadWriteFile)]
    
    syntax FilesTestMethod ::= "testReadWriteLine" "(" ")" [klabel(method_FilesTest_testReadWriteLine)]
    
    syntax FilesTestMethod ::= "vm" "(" ")" [klabel(method_FilesTest_vm)]
    
    rule  ( FilesTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( FilesTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( FilesTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( FilesTest . testFailRemoveFile ( ) => #abiCallData ( "testFailRemoveFile" , .TypedArgs ) )
      
    
    rule  ( FilesTest . testReadWriteFile ( ) => #abiCallData ( "testReadWriteFile" , .TypedArgs ) )
      
    
    rule  ( FilesTest . testReadWriteLine ( ) => #abiCallData ( "testReadWriteLine" , .TypedArgs ) )
      
    
    rule  ( FilesTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testFailRemoveFile" ) => 2780725830 )
      
    
    rule  ( selector ( "testReadWriteFile" ) => 3880869465 )
      
    
    rule  ( selector ( "testReadWriteLine" ) => 3039298541 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module FORKTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= ForkTestContract
    
    syntax ForkTestContract ::= "ForkTest" [klabel(contract_ForkTest)]
    
    rule  ( #binRuntime ( ForkTest ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060465760003560e01c80633a76846314604b578063ba414fa6146082578063f8ccbf471460a2578063fa7626d41460b4575b600080fd5b6065737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b600054609390610100900460ff1681565b60405190151581526020016079565b60005460939062010000900460ff1681565b60005460939060ff168156fea264697066735822122043e1a47ebc9242f3088c2e3878e1399d0ac74a197c6e40b8a006cc36f8071c3564736f6c634300080f0033" ) )
      
    
    syntax Field ::= ForkTestField
    
    syntax ForkTestField ::= "IS_TEST" [symbol(), klabel(field_ForkTest_IS_TEST)]
    
    syntax ForkTestField ::= "failed" [symbol(), klabel(field_ForkTest_failed)]
    
    syntax ForkTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ForkTest_IS_SCRIPT)]
    
    syntax ForkTestField ::= "stdstore" [symbol(), klabel(field_ForkTest_stdstore)]
    
    rule  ( #loc ( ForkTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( ForkTest . failed ) => 0 )
      
    
    rule  ( #loc ( ForkTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( ForkTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= ForkTestContract "." ForkTestMethod [function(), klabel(method_ForkTest)]
    
    syntax ForkTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_ForkTest_IS_SCRIPT)]
    
    syntax ForkTestMethod ::= "IS_TEST" "(" ")" [klabel(method_ForkTest_IS_TEST)]
    
    syntax ForkTestMethod ::= "failed" "(" ")" [klabel(method_ForkTest_failed)]
    
    syntax ForkTestMethod ::= "vm" "(" ")" [klabel(method_ForkTest_vm)]
    
    rule  ( ForkTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( ForkTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( ForkTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( ForkTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module GETCODETEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= GetCodeTestContract
    
    syntax GetCodeTestContract ::= "GetCodeTest" [klabel(contract_GetCodeTest)]
    
    rule  ( #binRuntime ( GetCodeTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610071578063ba414fa6146100a9578063e8d3529f146100cb578063f8ccbf47146100d3578063fa7626d4146100e6575b600080fd5b61006f6100f3565b005b61008c737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546100bb90610100900460ff1681565b60405190151581526020016100a0565b61006f610151565b6000546100bb9062010000900460ff1681565b6000546100bb9060ff1681565b6104d2604051610102906104c0565b6001600160a01b039091168152602001604051809103906000f08015801561012e573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b604080516104d260208201526000910160408051808303601f190181528282526318caf8e360e31b83526104d260048401526024830191909152600e60448301526d6578616d706c654164647265737360901b60648301529150737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c657c71890608401600060405180830381600087803b1580156101e457600080fd5b505af11580156101f8573d6000803e3d6000fd5b5050604051638d1cc92560e01b815260206004820152601360248201527226bcaa37b5b2b71739b7b61d26bcaa37b5b2b760691b604482015260009250737109709ecfa91a80626ff3989d68f67f5b1dd12d9150638d1cc925906064016000604051808303816000875af1158015610274573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261029c9190810190610513565b826040516020016102ae9291906105c0565b604051602081830303815290604052905060008151602083016000f0600854604080516001600160a01b03909216803b83810160209081019093528084529394506103279391600091908401903c826001600160a01b0316803b806020016040519081016040528181526000908060200190933c61032c565b505050565b6103368282610433565b61042f577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103a59060208082526023908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b62797460408201526265735d60e81b606082015260800190565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18826040516103dc919061061b565b60405180910390a17fd26e16cad4548705e4c9e2d94f98ee91c289085ee425594fd5635fa2964ccf18816040516104139190610656565b60405180910390a161042f6000805461ff001916610100179055565b5050565b8051825160019190036104b65760005b83518110156104b05782818151811061045e5761045e61068a565b602001015160f81c60f81b6001600160f81b0319168482815181106104855761048561068a565b01602001516001600160f81b0319161461049e57600091505b806104a8816106a0565b915050610443565b506104ba565b5060005b92915050565b61027a806106c883390190565b634e487b7160e01b600052604160045260246000fd5b60005b838110156104fe5781810151838201526020016104e6565b8381111561050d576000848401525b50505050565b60006020828403121561052557600080fd5b815167ffffffffffffffff8082111561053d57600080fd5b818401915084601f83011261055157600080fd5b815181811115610563576105636104cd565b604051601f8201601f19908116603f0116810190838211818310171561058b5761058b6104cd565b816040528281528760208487010111156105a457600080fd5b6105b58360208301602088016104e3565b979650505050505050565b600083516105d28184602088016104e3565b8351908301906105e68183602088016104e3565b01949350505050565b600081518084526106078160208601602086016104e3565b601f01601f19169290920160200192915050565b60408152600a6040820152690808115e1c1958dd195960b21b606082015260806020820152600061064f60808301846105ef565b9392505050565b60408152600a604082015269080808081058dd1d585b60b21b606082015260806020820152600061064f60808301846105ef565b634e487b7160e01b600052603260045260246000fd5b6000600182016106c057634e487b7160e01b600052601160045260246000fd5b506001019056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212205467ff8282354bb78a009d0a0d9124078291cf6771a8122b450561f6f98d4c5e64736f6c634300080f0033a264697066735822122076ff82e570891442c1ce287d519eb4c5d3253d5580ce01c28536e73379d014e464736f6c634300080f0033" ) )
      
    
    syntax Field ::= GetCodeTestField
    
    syntax GetCodeTestField ::= "IS_TEST" [symbol(), klabel(field_GetCodeTest_IS_TEST)]
    
    syntax GetCodeTestField ::= "failed" [symbol(), klabel(field_GetCodeTest_failed)]
    
    syntax GetCodeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_GetCodeTest_IS_SCRIPT)]
    
    syntax GetCodeTestField ::= "stdstore" [symbol(), klabel(field_GetCodeTest_stdstore)]
    
    syntax GetCodeTestField ::= "myToken" [symbol(), klabel(field_GetCodeTest_myToken)]
    
    rule  ( #loc ( GetCodeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( GetCodeTest . failed ) => 0 )
      
    
    rule  ( #loc ( GetCodeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( GetCodeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( GetCodeTest . myToken ) => 8 )
      
    
    syntax ByteArray ::= GetCodeTestContract "." GetCodeTestMethod [function(), klabel(method_GetCodeTest)]
    
    syntax GetCodeTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_GetCodeTest_IS_SCRIPT)]
    
    syntax GetCodeTestMethod ::= "IS_TEST" "(" ")" [klabel(method_GetCodeTest_IS_TEST)]
    
    syntax GetCodeTestMethod ::= "failed" "(" ")" [klabel(method_GetCodeTest_failed)]
    
    syntax GetCodeTestMethod ::= "setUp" "(" ")" [klabel(method_GetCodeTest_setUp)]
    
    syntax GetCodeTestMethod ::= "testGetCode" "(" ")" [klabel(method_GetCodeTest_testGetCode)]
    
    syntax GetCodeTestMethod ::= "vm" "(" ")" [klabel(method_GetCodeTest_vm)]
    
    rule  ( GetCodeTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . testGetCode ( ) => #abiCallData ( "testGetCode" , .TypedArgs ) )
      
    
    rule  ( GetCodeTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testGetCode" ) => 3906163359 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module LOOPSTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= LoopsTestContract
    
    syntax LoopsTestContract ::= "LoopsTest" [klabel(contract_LoopsTest)]
    
    rule  ( #binRuntime ( LoopsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061010b5760003560e01c80635de22f07116100a2578063a118e10211610071578063a118e10214610208578063ba414fa61461021b578063d313940d1461023d578063f8ccbf4714610250578063fa7626d41461026357600080fd5b80635de22f07146101bc5780636d5d39df146101cf578063887e4fdb146101e25780638fe34aed146101f557600080fd5b806330476e27116100de57806330476e271461014b5780633a7684631461015e5780634e94ce571461019657806351cdc192146101a957600080fd5b806306ac1530146101105780630a9254e4146101235780630de4eb1614610125578063181f88ec14610138575b600080fd5b61012361011e366004610f69565b610270565b005b610123610133366004610f8b565b6102c9565b610123610146366004610f8b565b610327565b610123610159366004610f8b565b610344565b610179737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6101236101a4366004610f8b565b6103a8565b6101236101b7366004610fba565b61044e565b6101236101ca366004610fba565b6104ae565b6101236101dd366004610f69565b610504565b6101236101f0366004610f8b565b61050f565b610123610203366004610fba565b6105a9565b610123610216366004610f69565b610623565b60005461022d90610100900460ff1681565b604051901515815260200161018d565b61012361024b366004610fba565b61068d565b60005461022d9062010000900460ff1681565b60005461022d9060ff1681565b600061027b83610707565b905061029281158061028d5750600184115b610758565b6102c460028310806102a45750838310155b806102ad575081155b8061028d57506102bd838561108e565b1515610758565b505050565b60006102d4826107d8565b905060006102e2828361081e565b90506000838211156102ff576102f884836110b8565b905061030c565b61030983836110b8565b90505b61032161031a6064866110cf565b8210610758565b50505050565b61034161033382610707565b61033c8361085f565b6108b0565b50565b600061034f82610707565b9050808061035d5750600282105b15610366575050565b60025b828110156103995761037b818461108e565b60000361038757505050565b80610391816110e3565b915050610369565b506103a46000610758565b5050565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b1580156103f857600080fd5b505af115801561040c573d6000803e3d6000fd5b505050506000600282600161042191906110fc565b61042b9084611114565b61043591906110cf565b9050600061044283610a39565b90506102c48282610a6b565b600061045982610b4a565b9050600160005b83518110801561046d5750815b156104a45783818151811061048457610484611133565b60200260200101518310159150808061049c906110e3565b915050610460565b506102c481610758565b60006104b982610ba9565b9050600160005b8351811080156104cd5750815b156104a4578381815181106104e4576104e4611133565b6020026020010151831015915080806104fc906110e3565b9150506104c0565b600061027b83610c07565b604051632631f2b160e11b815260648211156004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561055f57600080fd5b505af1158015610573573d6000803e3d6000fd5b505050506000600282600161058891906110fc565b6105929084611114565b61059c91906110cf565b9050600061044283610c3e565b60006105b482610c68565b90506001805b8251811080156105c75750815b156104a4578381815181106105de576105de611133565b6020026020010151846001836105f491906110b8565b8151811061060457610604611133565b602002602001015111159150808061061b906110e3565b9150506105ba565b600061062e83610c94565b905082600003610643576102c4816000610a6b565b61064f61028d82610707565b600061066461065f6001866110b8565b610c94565b905061032181841115806106785750828410155b8061028d575061068784610707565b15610758565b600061069882610cce565b90506001805b8251811080156106ab5750815b156104a4578381815181106106c2576106c2611133565b6020026020010151846001836106d891906110b8565b815181106106e8576106e8611133565b60200260200101511115915080806106ff906110e3565b91505061069e565b6000600282101561071a57506000919050565b60025b8281101561074f5761072f818461108e565b1561073d5750600092915050565b80610747816110e3565b91505061071d565b50600192915050565b80610341577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516107bc9060208082526017908201527f4572726f723a20417373657274696f6e204661696c6564000000000000000000604082015260600190565b60405180910390a16103416000805461ff001916610100179055565b6000816000036107ea57506000919050565b815b80915060026108046107fe8584610cf0565b83610d13565b61080e91906110cf565b90508181036107ec575b50919050565b6000670de0b6b3a764000061084e6108368585610d73565b6108496002670de0b6b3a76400006110cf565b610d13565b61085891906110cf565b9392505050565b6000600282101561087257506000919050565b60025b6108806002846110cf565b811161074f57610890818461108e565b1561089e5750600092915050565b806108a8816110e3565b915050610875565b801515821515146103a4577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516109259060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b626f6f6040820152616c5d60f01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf358381610976576040518060400160405280600581526020016466616c736560d81b815250610994565b604051806040016040528060048152602001637472756560e01b8152505b6040516109a19190611196565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583826109f2576040518060400160405280600581526020016466616c736560d81b815250610a10565b604051806040016040528060048152602001637472756560e01b8152505b604051610a1d91906111da565b60405180910390a16103a46000805461ff001916610100179055565b600080805b83811015610a6457610a5081836110fc565b915080610a5c816110e3565b915050610a3e565b5092915050565b8082146103a4577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f50604051610adc9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a881604051610b139190611204565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a882604051610a1d919061123c565b60008060015b8351811015610a645781848281518110610b6c57610b6c611133565b60200260200101511115610b9757838181518110610b8c57610b8c611133565b602002602001015191505b80610ba1816110e3565b915050610b50565b600080805b8351811015610a645781848281518110610bca57610bca611133565b60200260200101511115610bf557838181518110610bea57610bea611133565b602002602001015191505b80610bff816110e3565b915050610bae565b600060025b8281101561074f57610c1e818461108e565b15610c2c5750600092915050565b80610c36816110e3565b915050610c0c565b600080805b838111610a6457610c5481836110fc565b915080610c60816110e3565b915050610c43565b60606001825111610c77575090565b610c9082600060018551610c8b91906110b8565b610dda565b5090565b6000805b828110156108185781610caa816110e3565b925050610cb682610707565b15610cc95780610cc5816110e3565b9150505b610c98565b60606001825111610cdd575090565b610c90826001808551610c8b91906110b8565b60008161084e610d0885670de0b6b3a7640000610d73565b6108496002866110cf565b600082610d2083826110fc565b9150811015610d6d5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6164642d6f766572666c6f7760601b60448201526064015b60405180910390fd5b92915050565b6000811580610d9757508282610d898183611114565b9250610d9590836110cf565b145b610d6d5760405162461bcd60e51b815260206004820152601460248201527364732d6d6174682d6d756c2d6f766572666c6f7760601b6044820152606401610d64565b808210610de657505050565b81816000856002610df785856110b8565b610e0191906110cf565b610e0b90876110fc565b81518110610e1b57610e1b611133565b602002602001015190505b818311610f3b575b80868481518110610e4157610e41611133565b60200260200101511015610e615782610e59816110e3565b935050610e2e565b858281518110610e7357610e73611133565b602002602001015181108015610e895750600082115b15610ea05781610e9881611266565b925050610e61565b818311610f3657858281518110610eb957610eb9611133565b6020026020010151868481518110610ed357610ed3611133565b6020026020010151878581518110610eed57610eed611133565b60200260200101888581518110610f0657610f06611133565b60209081029190910101919091525282610f1f816110e3565b9350508115610f365781610f3281611266565b9250505b610e26565b81851015610f4e57610f4e868684610dda565b83831015610f6157610f61868486610dda565b505050505050565b60008060408385031215610f7c57600080fd5b50508035926020909101359150565b600060208284031215610f9d57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b60006020808385031215610fcd57600080fd5b823567ffffffffffffffff80821115610fe557600080fd5b818501915085601f830112610ff957600080fd5b81358181111561100b5761100b610fa4565b8060051b604051601f19603f8301168101818110858211171561103057611030610fa4565b60405291825284820192508381018501918883111561104e57600080fd5b938501935b8285101561106c57843584529385019392850192611053565b98975050505050505050565b634e487b7160e01b600052601260045260246000fd5b60008261109d5761109d611078565b500690565b634e487b7160e01b600052601160045260246000fd5b6000828210156110ca576110ca6110a2565b500390565b6000826110de576110de611078565b500490565b6000600182016110f5576110f56110a2565b5060010190565b6000821982111561110f5761110f6110a2565b500190565b600081600019048311821515161561112e5761112e6110a2565b500290565b634e487b7160e01b600052603260045260246000fd5b6000815180845260005b8181101561116f57602081850181015186830182015201611153565b81811115611181576000602083870101525b50601f01601f19169290920160200192915050565b6040815260006111c060408301600a8152690808115e1c1958dd195960b21b602082015260400190565b82810360208401526111d28185611149565b949350505050565b6040815260006111c060408301600a815269080808081058dd1d585b60b21b602082015260400190565b60408152600061122e60408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b60408152600061122e60408301600a815269080808081058dd1d585b60b21b602082015260400190565b600081611275576112756110a2565b50600019019056fea2646970667358221220a1aedfc29d99b5e24b812e11e10d6e13883e4aee5244d9e30a6d3941e2638d8a64736f6c634300080f0033" ) )
      
    
    syntax Field ::= LoopsTestField
    
    syntax LoopsTestField ::= "IS_TEST" [symbol(), klabel(field_LoopsTest_IS_TEST)]
    
    syntax LoopsTestField ::= "failed" [symbol(), klabel(field_LoopsTest_failed)]
    
    syntax LoopsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_LoopsTest_IS_SCRIPT)]
    
    syntax LoopsTestField ::= "stdstore" [symbol(), klabel(field_LoopsTest_stdstore)]
    
    rule  ( #loc ( LoopsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( LoopsTest . failed ) => 0 )
      
    
    rule  ( #loc ( LoopsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( LoopsTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= LoopsTestContract "." LoopsTestMethod [function(), klabel(method_LoopsTest)]
    
    syntax LoopsTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_LoopsTest_IS_SCRIPT)]
    
    syntax LoopsTestMethod ::= "IS_TEST" "(" ")" [klabel(method_LoopsTest_IS_TEST)]
    
    syntax LoopsTestMethod ::= "failed" "(" ")" [klabel(method_LoopsTest_failed)]
    
    syntax LoopsTestMethod ::= "setUp" "(" ")" [klabel(method_LoopsTest_setUp)]
    
    syntax LoopsTestMethod ::= "testIsNotPrime" "(" Int ")" [klabel(method_LoopsTest_testIsNotPrime)]
    
    syntax LoopsTestMethod ::= "testIsPrime" "(" Int "," Int ")" [klabel(method_LoopsTest_testIsPrime)]
    
    syntax LoopsTestMethod ::= "testIsPrimeBroken" "(" Int "," Int ")" [klabel(method_LoopsTest_testIsPrimeBroken)]
    
    syntax LoopsTestMethod ::= "testIsPrimeOpt" "(" Int ")" [klabel(method_LoopsTest_testIsPrimeOpt)]
    
    syntax LoopsTestMethod ::= "testMax" "(" K ")" [klabel(method_LoopsTest_testMax)]
    
    syntax LoopsTestMethod ::= "testMaxBroken" "(" K ")" [klabel(method_LoopsTest_testMaxBroken)]
    
    syntax LoopsTestMethod ::= "testNthPrime" "(" Int "," Int ")" [klabel(method_LoopsTest_testNthPrime)]
    
    syntax LoopsTestMethod ::= "testSort" "(" K ")" [klabel(method_LoopsTest_testSort)]
    
    syntax LoopsTestMethod ::= "testSortBroken" "(" K ")" [klabel(method_LoopsTest_testSortBroken)]
    
    syntax LoopsTestMethod ::= "testSqrt" "(" Int ")" [klabel(method_LoopsTest_testSqrt)]
    
    syntax LoopsTestMethod ::= "testSumToN" "(" Int ")" [klabel(method_LoopsTest_testSumToN)]
    
    syntax LoopsTestMethod ::= "testSumToNBroken" "(" Int ")" [klabel(method_LoopsTest_testSumToNBroken)]
    
    syntax LoopsTestMethod ::= "vm" "(" ")" [klabel(method_LoopsTest_vm)]
    
    rule  ( LoopsTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( LoopsTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( LoopsTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( LoopsTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( LoopsTest . testIsNotPrime ( V0_n ) => #abiCallData ( "testIsNotPrime" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( LoopsTest . testIsPrime ( V0_n , V1_i ) => #abiCallData ( "testIsPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( LoopsTest . testIsPrimeBroken ( V0_n , V1_i ) => #abiCallData ( "testIsPrimeBroken" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( LoopsTest . testIsPrimeOpt ( V0_n ) => #abiCallData ( "testIsPrimeOpt" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( LoopsTest . testNthPrime ( V0_n , V1_i ) => #abiCallData ( "testNthPrime" , #uint256 ( V0_n ) , #uint256 ( V1_i ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_n )
       andBool ( #rangeUInt ( 256 , V1_i )
               ))
      
    
    rule  ( LoopsTest . testSqrt ( V0_x ) => #abiCallData ( "testSqrt" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( LoopsTest . testSumToN ( V0_n ) => #abiCallData ( "testSumToN" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( LoopsTest . testSumToNBroken ( V0_n ) => #abiCallData ( "testSumToNBroken" , #uint256 ( V0_n ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_n )
      
    
    rule  ( LoopsTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testIsNotPrime" ) => 809987623 )
      
    
    rule  ( selector ( "testIsPrime" ) => 111940912 )
      
    
    rule  ( selector ( "testIsPrimeBroken" ) => 1834826207 )
      
    
    rule  ( selector ( "testIsPrimeOpt" ) => 404719852 )
      
    
    rule  ( selector ( "testMax" ) => 1575104263 )
      
    
    rule  ( selector ( "testMaxBroken" ) => 1372438930 )
      
    
    rule  ( selector ( "testNthPrime" ) => 2702762242 )
      
    
    rule  ( selector ( "testSort" ) => 2414037741 )
      
    
    rule  ( selector ( "testSortBroken" ) => 3541275661 )
      
    
    rule  ( selector ( "testSqrt" ) => 233106198 )
      
    
    rule  ( selector ( "testSumToN" ) => 2289979355 )
      
    
    rule  ( selector ( "testSumToNBroken" ) => 1318374999 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module MOCKCALLTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= MockCallTestContract
    
    syntax MockCallTestContract ::= "MockCallTest" [klabel(contract_MockCallTest)]
    
    rule  ( #binRuntime ( MockCallTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa6146100d7578063bb630a5c146100f9578063f8ccbf4714610101578063fa7626d41461011457600080fd5b80630a9254e41461008d57806339188d4e1461008f5780633a76846314610097578063480a6996146100cf575b600080fd5b005b61008d610123565b6100b2737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008d6102c9565b6000546100e990610100900460ff1681565b60405190151581526020016100c6565b61008d610596565b6000546100e99062010000900460ff1681565b6000546100e99060ff1681565b565b6040805160048152602481018252602080820180516001600160e01b03166370a0823160e01b1790528251600a818301528351808203909201825280840193849052632e5884f960e21b909352737109709ecfa91a80626ff3989d68f67f5b1dd12d9263b96213e49261019b9260009260440161080e565b600060405180830381600087803b1580156101b557600080fd5b505af11580156101c9573d6000803e3d6000fd5b50506040516370a0823160e01b81526001600482015261023a9250600091506370a08231906024015b602060405180830381865afa15801561020f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610233919061084e565b600a61067d565b6040516370a0823160e01b815260026004820152610263906000906370a08231906024016101f2565b60408051633fdf4e1560e01b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d91633fdf4e1591600480830192600092919082900301818387803b1580156102af57600080fd5b505af11580156102c3573d6000803e3d6000fd5b50505050565b60006105396040516102da906107b4565b6001600160a01b039091168152602001604051809103906000f080158015610306573d6000803e3d6000fd5b50604051630c11dedd60e01b81526001600482015290915061037c906001600160a01b03831690630c11dedd90600a9060240160206040518083038185885af1158015610357573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610233919061084e565b604051630c11dedd60e01b81526002600482018190526103f4916001600160a01b03841691630c11dedd9160240160206040518083038185885af11580156103c8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906103ed919061084e565b600261067d565b6040805160048152602481018252602080820180516001600160e01b0316630c11dedd60e01b179052825160638183015283518082039092018252808401938490526381409b9160e01b909352737109709ecfa91a80626ff3989d68f67f5b1dd12d926381409b9192610470928692600a929190604401610867565b600060405180830381600087803b15801561048a57600080fd5b505af115801561049e573d6000803e3d6000fd5b5050604051630c11dedd60e01b81526001600482015261051b92506001600160a01b0384169150630c11dedd90600a9060240160206040518083038185885af11580156104ef573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610514919061084e565b606361067d565b604051630c11dedd60e01b8152600260048201819052610593916001600160a01b03841691630c11dedd9160240160206040518083038185885af1158015610567573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061058c919061084e565b600461067d565b50565b6040805160016024808301919091528251808303909101815260449182018352602080820180516001600160e01b03166370a0823160e01b1790528351600a818301528451808203909201825280850194859052632e5884f960e21b909452737109709ecfa91a80626ff3989d68f67f5b1dd12d9363b96213e49361062293600093909290910161080e565b600060405180830381600087803b15801561063c57600080fd5b505af1158015610650573d6000803e3d6000fd5b50506040516370a0823160e01b8152600160048201526101219250600091506370a08231906024016101f2565b8082146107b0577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516106ee9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16107b06000805461ff001916610100179055565b5050565b61027a806108ac83390190565b6000815180845260005b818110156107e7576020818501810151868301820152016107cb565b818111156107f9576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0384168152606060208201819052600090610832908301856107c1565b828103604084015261084481856107c1565b9695505050505050565b60006020828403121561086057600080fd5b5051919050565b60018060a01b038516815283602082015260806040820152600061088e60808301856107c1565b82810360608401526108a081856107c1565b97965050505050505056fe608060405234801561001057600080fd5b5060405161027a38038061027a83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b6101e7806100936000396000f3fe6080604052600436106100435760003560e01c80630c11dedd1461004f57806327e235e31461007557806370a08231146100a2578063fc0c546a146100d857600080fd5b3661004a57005b600080fd5b61006261005d36600461015b565b610110565b6040519081526020015b60405180910390f35b34801561008157600080fd5b5061006261009036600461015b565b60016020526000908152604090205481565b3480156100ae57600080fd5b506100626100bd36600461015b565b6001600160a01b031660009081526001602052604090205490565b3480156100e457600080fd5b506000546100f8906001600160a01b031681565b6040516001600160a01b03909116815260200161006c565b6001600160a01b03811660009081526001602052604081208054349190839061013a90849061018b565b9091555050506001600160a01b031660009081526001602052604090205490565b60006020828403121561016d57600080fd5b81356001600160a01b038116811461018457600080fd5b9392505050565b600082198211156101ac57634e487b7160e01b600052601160045260246000fd5b50019056fea26469706673582212205467ff8282354bb78a009d0a0d9124078291cf6771a8122b450561f6f98d4c5e64736f6c634300080f0033a26469706673582212201b88c47a3ecd6e01c494c4485663febbc39273caea8ce8bbf51a8bbffbfcd07564736f6c634300080f0033" ) )
      
    
    syntax Field ::= MockCallTestField
    
    syntax MockCallTestField ::= "IS_TEST" [symbol(), klabel(field_MockCallTest_IS_TEST)]
    
    syntax MockCallTestField ::= "failed" [symbol(), klabel(field_MockCallTest_failed)]
    
    syntax MockCallTestField ::= "IS_SCRIPT" [symbol(), klabel(field_MockCallTest_IS_SCRIPT)]
    
    syntax MockCallTestField ::= "stdstore" [symbol(), klabel(field_MockCallTest_stdstore)]
    
    rule  ( #loc ( MockCallTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( MockCallTest . failed ) => 0 )
      
    
    rule  ( #loc ( MockCallTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( MockCallTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= MockCallTestContract "." MockCallTestMethod [function(), klabel(method_MockCallTest)]
    
    syntax MockCallTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_MockCallTest_IS_SCRIPT)]
    
    syntax MockCallTestMethod ::= "IS_TEST" "(" ")" [klabel(method_MockCallTest_IS_TEST)]
    
    syntax MockCallTestMethod ::= "failed" "(" ")" [klabel(method_MockCallTest_failed)]
    
    syntax MockCallTestMethod ::= "setUp" "(" ")" [klabel(method_MockCallTest_setUp)]
    
    syntax MockCallTestMethod ::= "testMockCall" "(" ")" [klabel(method_MockCallTest_testMockCall)]
    
    syntax MockCallTestMethod ::= "testMockCallValue" "(" ")" [klabel(method_MockCallTest_testMockCallValue)]
    
    syntax MockCallTestMethod ::= "testMockCalls" "(" ")" [klabel(method_MockCallTest_testMockCalls)]
    
    syntax MockCallTestMethod ::= "vm" "(" ")" [klabel(method_MockCallTest_vm)]
    
    rule  ( MockCallTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . testMockCall ( ) => #abiCallData ( "testMockCall" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . testMockCallValue ( ) => #abiCallData ( "testMockCallValue" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . testMockCalls ( ) => #abiCallData ( "testMockCalls" , .TypedArgs ) )
      
    
    rule  ( MockCallTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testMockCall" ) => 3143830108 )
      
    
    rule  ( selector ( "testMockCallValue" ) => 1208641942 )
      
    
    rule  ( selector ( "testMockCalls" ) => 957910350 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module NONCETEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= NonceTestContract
    
    syntax NonceTestContract ::= "NonceTest" [klabel(contract_NonceTest)]
    
    rule  ( #binRuntime ( NonceTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610069578063ba414fa6146100a1578063d8cfdceb146100c3578063f8ccbf47146100d6578063fa7626d4146100e9575b600080fd5b005b610084737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546100b390610100900460ff1681565b6040519015158152602001610098565b6100676100d136600461043b565b6100f6565b6000546100b39062010000900460ff1681565b6000546100b39060ff1681565b604051632d0335ab60e01b8152306004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90632d0335ab906024016020604051808303816000875af115801561014a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016e919061045f565b604051632631f2b160e11b815267ffffffffffffffff808316908516116004820152909150737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b1580156101cc57600080fd5b505af11580156101e0573d6000803e3d6000fd5b505060405163f8e18b5760e01b815230600482015267ffffffffffffffff85166024820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063f8e18b579150604401600060405180830381600087803b15801561024057600080fd5b505af1158015610254573d6000803e3d6000fd5b5050604051632d0335ab60e01b81523060048201526102eb9250737109709ecfa91a80626ff3989d68f67f5b1dd12d9150632d0335ab906024016020604051808303816000875af11580156102ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102d1919061045f565b67ffffffffffffffff168367ffffffffffffffff166102ef565b5050565b8082146102eb577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103609060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16102eb6000805461ff001916610100179055565b67ffffffffffffffff8116811461043857600080fd5b50565b60006020828403121561044d57600080fd5b813561045881610422565b9392505050565b60006020828403121561047157600080fd5b81516104588161042256fea2646970667358221220948db59c8268e5503b8ed3d9be21b4aae2c808f29a406a4101327812104810ba64736f6c634300080f0033" ) )
      
    
    syntax Field ::= NonceTestField
    
    syntax NonceTestField ::= "IS_TEST" [symbol(), klabel(field_NonceTest_IS_TEST)]
    
    syntax NonceTestField ::= "failed" [symbol(), klabel(field_NonceTest_failed)]
    
    syntax NonceTestField ::= "IS_SCRIPT" [symbol(), klabel(field_NonceTest_IS_SCRIPT)]
    
    syntax NonceTestField ::= "stdstore" [symbol(), klabel(field_NonceTest_stdstore)]
    
    rule  ( #loc ( NonceTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( NonceTest . failed ) => 0 )
      
    
    rule  ( #loc ( NonceTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( NonceTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= NonceTestContract "." NonceTestMethod [function(), klabel(method_NonceTest)]
    
    syntax NonceTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_NonceTest_IS_SCRIPT)]
    
    syntax NonceTestMethod ::= "IS_TEST" "(" ")" [klabel(method_NonceTest_IS_TEST)]
    
    syntax NonceTestMethod ::= "failed" "(" ")" [klabel(method_NonceTest_failed)]
    
    syntax NonceTestMethod ::= "setUp" "(" ")" [klabel(method_NonceTest_setUp)]
    
    syntax NonceTestMethod ::= "testNonce" "(" Int ")" [klabel(method_NonceTest_testNonce)]
    
    syntax NonceTestMethod ::= "vm" "(" ")" [klabel(method_NonceTest_vm)]
    
    rule  ( NonceTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( NonceTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( NonceTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( NonceTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( NonceTest . testNonce ( V0_newNonce ) => #abiCallData ( "testNonce" , #uint64 ( V0_newNonce ) , .TypedArgs ) )
       ensures #rangeUInt ( 64 , V0_newNonce )
      
    
    rule  ( NonceTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testNonce" ) => 3637501163 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module OWNERUPONLYTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= OwnerUpOnlyTestContract
    
    syntax OwnerUpOnlyTestContract ::= "OwnerUpOnlyTest" [klabel(contract_OwnerUpOnlyTest)]
    
    rule  ( #binRuntime ( OwnerUpOnlyTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063ba414fa61161005b578063ba414fa6146100df578063f8ccbf4714610101578063fa7626d414610114578063fd50a0811461012157600080fd5b80630a9254e41461008d5780633a768463146100975780634d9feb35146100cf578063760c01a7146100d7575b600080fd5b610095610129565b005b6100b2737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b610095610174565b6100956102ae565b6000546100f190610100900460ff1681565b60405190151581526020016100c6565b6000546100f19062010000900460ff1681565b6000546100f19060ff1681565b61009561040f565b6040516101359061057e565b604051809103906000f080158015610151573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b604051630618f58760e51b81526282b42960e81b6004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063c31eb0e090602401600060405180830381600087803b1580156101c657600080fd5b505af11580156101da573d6000803e3d6000fd5b505060405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d925063ca669fa791506024015b600060405180830381600087803b15801561022c57600080fd5b505af1158015610240573d6000803e3d6000fd5b50505050600860009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561029457600080fd5b505af11580156102a8573d6000803e3d6000fd5b50505050565b600854604080516306661abd60e01b81529051610324926001600160a01b0316916306661abd9160048083019260209291908290030181865afa1580156102f9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061031d919061058b565b6000610447565b600860009054906101000a90046001600160a01b03166001600160a01b031663d09de08a6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561037457600080fd5b505af1158015610388573d6000803e3d6000fd5b5050505061040d600860009054906101000a90046001600160a01b03166001600160a01b03166306661abd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156103e2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610406919061058b565b6001610447565b565b60405163ca669fa760e01b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ca669fa790602401610212565b80821461057a577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104b89060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a161057a6000805461ff001916610100179055565b5050565b61019b806105a583390190565b60006020828403121561059d57600080fd5b505191905056fe60a060405234801561001057600080fd5b5033608052608051610166610035600039600081816067015260b601526101666000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806306661abd146100465780638da5cb5b14610062578063d09de08a146100a1575b600080fd5b61004f60005481565b6040519081526020015b60405180910390f35b6100897f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610059565b6100a96100ab565b005b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146100f3576040516282b42960e81b815260040160405180910390fd5b60008054908061010283610109565b9190505550565b60006001820161012957634e487b7160e01b600052601160045260246000fd5b506001019056fea2646970667358221220c331e76d3f83a6792a6865f035ddb4d4cc7090d4b0a7fc06f672c290d1b6c52d64736f6c634300080f0033a264697066735822122021ce4e64c72e3ebb8b968b03a4d273162dc3deb5d935cc4c6e47a9e79461864464736f6c634300080f0033" ) )
      
    
    syntax Field ::= OwnerUpOnlyTestField
    
    syntax OwnerUpOnlyTestField ::= "IS_TEST" [symbol(), klabel(field_OwnerUpOnlyTest_IS_TEST)]
    
    syntax OwnerUpOnlyTestField ::= "failed" [symbol(), klabel(field_OwnerUpOnlyTest_failed)]
    
    syntax OwnerUpOnlyTestField ::= "IS_SCRIPT" [symbol(), klabel(field_OwnerUpOnlyTest_IS_SCRIPT)]
    
    syntax OwnerUpOnlyTestField ::= "stdstore" [symbol(), klabel(field_OwnerUpOnlyTest_stdstore)]
    
    syntax OwnerUpOnlyTestField ::= "upOnly" [symbol(), klabel(field_OwnerUpOnlyTest_upOnly)]
    
    rule  ( #loc ( OwnerUpOnlyTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( OwnerUpOnlyTest . failed ) => 0 )
      
    
    rule  ( #loc ( OwnerUpOnlyTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( OwnerUpOnlyTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( OwnerUpOnlyTest . upOnly ) => 8 )
      
    
    syntax ByteArray ::= OwnerUpOnlyTestContract "." OwnerUpOnlyTestMethod [function(), klabel(method_OwnerUpOnlyTest)]
    
    syntax OwnerUpOnlyTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_OwnerUpOnlyTest_IS_SCRIPT)]
    
    syntax OwnerUpOnlyTestMethod ::= "IS_TEST" "(" ")" [klabel(method_OwnerUpOnlyTest_IS_TEST)]
    
    syntax OwnerUpOnlyTestMethod ::= "failed" "(" ")" [klabel(method_OwnerUpOnlyTest_failed)]
    
    syntax OwnerUpOnlyTestMethod ::= "setUp" "(" ")" [klabel(method_OwnerUpOnlyTest_setUp)]
    
    syntax OwnerUpOnlyTestMethod ::= "testFailIncrementAsNotOwner" "(" ")" [klabel(method_OwnerUpOnlyTest_testFailIncrementAsNotOwner)]
    
    syntax OwnerUpOnlyTestMethod ::= "testIncrementAsNotOwner" "(" ")" [klabel(method_OwnerUpOnlyTest_testIncrementAsNotOwner)]
    
    syntax OwnerUpOnlyTestMethod ::= "testIncrementAsOwner" "(" ")" [klabel(method_OwnerUpOnlyTest_testIncrementAsOwner)]
    
    syntax OwnerUpOnlyTestMethod ::= "vm" "(" ")" [klabel(method_OwnerUpOnlyTest_vm)]
    
    rule  ( OwnerUpOnlyTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . testFailIncrementAsNotOwner ( ) => #abiCallData ( "testFailIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . testIncrementAsNotOwner ( ) => #abiCallData ( "testIncrementAsNotOwner" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . testIncrementAsOwner ( ) => #abiCallData ( "testIncrementAsOwner" , .TypedArgs ) )
      
    
    rule  ( OwnerUpOnlyTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testFailIncrementAsNotOwner" ) => 4249919617 )
      
    
    rule  ( selector ( "testIncrementAsNotOwner" ) => 1302326069 )
      
    
    rule  ( selector ( "testIncrementAsOwner" ) => 1980498343 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module PRANKTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= PrankTestContract
    
    syntax PrankTestContract ::= "PrankTest" [klabel(contract_PrankTest)]
    
    rule  ( #binRuntime ( PrankTest ) => #parseByteStack ( "" ) )
      
    
    syntax Field ::= PrankTestField
    
    syntax PrankTestField ::= "IS_TEST" [symbol(), klabel(field_PrankTest_IS_TEST)]
    
    syntax PrankTestField ::= "failed" [symbol(), klabel(field_PrankTest_failed)]
    
    syntax PrankTestField ::= "IS_SCRIPT" [symbol(), klabel(field_PrankTest_IS_SCRIPT)]
    
    syntax PrankTestField ::= "stdstore" [symbol(), klabel(field_PrankTest_stdstore)]
    
    syntax PrankTestField ::= "prankContract" [symbol(), klabel(field_PrankTest_prankContract)]
    
    rule  ( #loc ( PrankTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( PrankTest . failed ) => 0 )
      
    
    rule  ( #loc ( PrankTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( PrankTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( PrankTest . prankContract ) => 8 )
      
    
    syntax ByteArray ::= PrankTestContract "." PrankTestMethod [function(), klabel(method_PrankTest)]
    
    syntax PrankTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_PrankTest_IS_SCRIPT)]
    
    syntax PrankTestMethod ::= "IS_TEST" "(" ")" [klabel(method_PrankTest_IS_TEST)]
    
    syntax PrankTestMethod ::= "failed" "(" ")" [klabel(method_PrankTest_failed)]
    
    syntax PrankTestMethod ::= "setUp" "(" ")" [klabel(method_PrankTest_setUp)]
    
    syntax PrankTestMethod ::= "testAddAsOwner" "(" Int ")" [klabel(method_PrankTest_testAddAsOwner)]
    
    syntax PrankTestMethod ::= "testAddStartPrank" "(" Int ")" [klabel(method_PrankTest_testAddStartPrank)]
    
    syntax PrankTestMethod ::= "testFailAddPrank" "(" Int ")" [klabel(method_PrankTest_testFailAddPrank)]
    
    syntax PrankTestMethod ::= "testSubtractAsTxOrigin" "(" Int "," Int ")" [klabel(method_PrankTest_testSubtractAsTxOrigin)]
    
    syntax PrankTestMethod ::= "testSubtractFail" "(" Int ")" [klabel(method_PrankTest_testSubtractFail)]
    
    syntax PrankTestMethod ::= "testSubtractStartPrank" "(" Int "," Int ")" [klabel(method_PrankTest_testSubtractStartPrank)]
    
    syntax PrankTestMethod ::= "vm" "(" ")" [klabel(method_PrankTest_vm)]
    
    rule  ( PrankTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( PrankTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( PrankTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( PrankTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( PrankTest . testAddAsOwner ( V0_x ) => #abiCallData ( "testAddAsOwner" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( PrankTest . testAddStartPrank ( V0_x ) => #abiCallData ( "testAddStartPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( PrankTest . testFailAddPrank ( V0_x ) => #abiCallData ( "testFailAddPrank" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( PrankTest . testSubtractAsTxOrigin ( V0_addValue , V1_subValue ) => #abiCallData ( "testSubtractAsTxOrigin" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( PrankTest . testSubtractFail ( V0_x ) => #abiCallData ( "testSubtractFail" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( PrankTest . testSubtractStartPrank ( V0_addValue , V1_subValue ) => #abiCallData ( "testSubtractStartPrank" , #uint256 ( V0_addValue ) , #uint256 ( V1_subValue ) , .TypedArgs ) )
       ensures ( #rangeUInt ( 256 , V0_addValue )
       andBool ( #rangeUInt ( 256 , V1_subValue )
               ))
      
    
    rule  ( PrankTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testAddAsOwner" ) => 1600382513 )
      
    
    rule  ( selector ( "testAddStartPrank" ) => 1333759955 )
      
    
    rule  ( selector ( "testFailAddPrank" ) => 948023622 )
      
    
    rule  ( selector ( "testSubtractAsTxOrigin" ) => 3798952319 )
      
    
    rule  ( selector ( "testSubtractFail" ) => 1433390937 )
      
    
    rule  ( selector ( "testSubtractStartPrank" ) => 262874110 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module RECORDLOGSTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= RecordLogsTestContract
    
    syntax RecordLogsTestContract ::= "RecordLogsTest" [klabel(contract_RecordLogsTest)]
    
    rule  ( #binRuntime ( RecordLogsTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610071578063ba414fa6146100a9578063d7f89958146100cb578063f8ccbf47146100d3578063fa7626d4146100e6575b600080fd5b61006f6100f3565b005b61008c737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546100bb90610100900460ff1681565b60405190151581526020016100a0565b61006f6101a2565b6000546100bb9062010000900460ff1681565b6000546100bb9060ff1681565b6040516100ff9061052e565b604051809103906000f08015801561011b573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055604080516320d797a960e11b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d916341af2f5291600480830192600092919082900301818387803b15801561018857600080fd5b505af115801561019c573d6000803e3d6000fd5b50505050565b600860009054906101000a90046001600160a01b03166001600160a01b03166392d0d1536040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156101f257600080fd5b505af1158015610206573d6000803e3d6000fd5b5050505060007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b031663191553a46040518163ffffffff1660e01b81526004016000604051808303816000875af1158015610275573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261029d919081019061065a565b90506102ab8151600161034d565b61030d816000815181106102c1576102c16107bb565b6020026020010151600001516000815181106102df576102df6107bb565b60200260200101517fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef61044c565b61034a81600081518110610323576103236107bb565b60200260200101516020015180602001905181019061034291906107d1565b61053961034d565b50565b808214610448577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103be9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a8816040516103f591906107ea565b60405180910390a17fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a88260405161042c9190610822565b60405180910390a16104486000805461ff001916610100179055565b5050565b808214610448577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516104c09060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b627974604082015264657333325d60d81b606082015260800190565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f99816040516104f791906107ea565b60405180910390a17fafb795c9c61e4fe7468c386f925d7a5429ecad9c0495ddb8d38d690614d32f998260405161042c9190610822565b60c48061084d83390190565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156105735761057361053a565b60405290565b604051601f8201601f1916810167ffffffffffffffff811182821017156105a2576105a261053a565b604052919050565b600067ffffffffffffffff8211156105c4576105c461053a565b5060051b60200190565b600082601f8301126105df57600080fd5b815167ffffffffffffffff8111156105f9576105f961053a565b602061060d601f8301601f19168201610579565b828152858284870101111561062157600080fd5b60005b8381101561063f578581018301518282018401528201610624565b838111156106505760008385840101525b5095945050505050565b6000602080838503121561066d57600080fd5b825167ffffffffffffffff8082111561068557600080fd5b818501915085601f83011261069957600080fd5b81516106ac6106a7826105aa565b610579565b81815260059190911b830184019084810190888311156106cb57600080fd5b8585015b838110156107ae578051858111156106e657600080fd5b86016040818c03601f190112156106fc57600080fd5b610704610550565b888201518781111561071557600080fd5b8201603f81018d1361072657600080fd5b898101516107366106a7826105aa565b81815260059190911b8201604001908b8101908f83111561075657600080fd5b6040840193505b828410156107765783518252928c0192908c019061075d565b845250505060408201518781111561078d57600080fd5b61079b8d8b838601016105ce565b828b0152508452509186019186016106cf565b5098975050505050505050565b634e487b7160e01b600052603260045260246000fd5b6000602082840312156107e357600080fd5b5051919050565b60408152600061081460408301600a8152690808115e1c1958dd195960b21b602082015260400190565b905082602083015292915050565b60408152600061081460408301600a815269080808081058dd1d585b60b21b60208201526040019056fe6080604052348015600f57600080fd5b5060a68061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806392d0d15314602d575b600080fd5b60336035565b005b6040516105398082529033907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a356fea26469706673582212206c4248677d044577ac40673fb8632a689fe92f28c9d31507e0939c26099d08c364736f6c634300080f0033a2646970667358221220bc16a940be2ba7371136f2aa2e40663267831ac96d9dcd4fb444ca6ce7f29c2b64736f6c634300080f0033" ) )
      
    
    syntax Field ::= RecordLogsTestField
    
    syntax RecordLogsTestField ::= "IS_TEST" [symbol(), klabel(field_RecordLogsTest_IS_TEST)]
    
    syntax RecordLogsTestField ::= "failed" [symbol(), klabel(field_RecordLogsTest_failed)]
    
    syntax RecordLogsTestField ::= "IS_SCRIPT" [symbol(), klabel(field_RecordLogsTest_IS_SCRIPT)]
    
    syntax RecordLogsTestField ::= "stdstore" [symbol(), klabel(field_RecordLogsTest_stdstore)]
    
    syntax RecordLogsTestField ::= "emitter" [symbol(), klabel(field_RecordLogsTest_emitter)]
    
    rule  ( #loc ( RecordLogsTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( RecordLogsTest . failed ) => 0 )
      
    
    rule  ( #loc ( RecordLogsTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( RecordLogsTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( RecordLogsTest . emitter ) => 8 )
      
    
    syntax ByteArray ::= RecordLogsTestContract "." RecordLogsTestMethod [function(), klabel(method_RecordLogsTest)]
    
    syntax RecordLogsTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_RecordLogsTest_IS_SCRIPT)]
    
    syntax RecordLogsTestMethod ::= "IS_TEST" "(" ")" [klabel(method_RecordLogsTest_IS_TEST)]
    
    syntax RecordLogsTestMethod ::= "failed" "(" ")" [klabel(method_RecordLogsTest_failed)]
    
    syntax RecordLogsTestMethod ::= "setUp" "(" ")" [klabel(method_RecordLogsTest_setUp)]
    
    syntax RecordLogsTestMethod ::= "testRecordLogs" "(" ")" [klabel(method_RecordLogsTest_testRecordLogs)]
    
    syntax RecordLogsTestMethod ::= "vm" "(" ")" [klabel(method_RecordLogsTest_vm)]
    
    rule  ( RecordLogsTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . testRecordLogs ( ) => #abiCallData ( "testRecordLogs" , .TypedArgs ) )
      
    
    rule  ( RecordLogsTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testRecordLogs" ) => 3623393624 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module SAFETEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= SafeTestContract
    
    syntax SafeTestContract ::= "SafeTest" [klabel(contract_SafeTest)]
    
    rule  ( #binRuntime ( SafeTest ) => #parseByteStack ( "0x6080604052600436106100745760003560e01c8063d0da5a0a1161004e578063d0da5a0a1461010b578063d509b16c1461012b578063f8ccbf4714610140578063fa7626d41461016057600080fd5b80630a9254e4146100805780633a76846314610097578063ba414fa6146100dc57600080fd5b3661007b57005b600080fd5b34801561008c57600080fd5b5061009561017a565b005b3480156100a357600080fd5b506100bf737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156100e857600080fd5b506000546100fb90610100900460ff1681565b60405190151581526020016100d3565b34801561011757600080fd5b506100956101263660046104f9565b6101c5565b34801561013757600080fd5b50610095610302565b34801561014c57600080fd5b506000546100fb9062010000900460ff1681565b34801561016c57600080fd5b506000546100fb9060ff1681565b604051610186906104ed565b604051809103906000f0801580156101a2573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b604051632631f2b160e11b815267016345785d8a00006001600160601b038316116004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d90634c63e56290602401600060405180830381600087803b15801561022457600080fd5b505af1158015610238573d6000803e3d6000fd5b50506008546040516001600160a01b0390911692506001600160601b03841680156108fc029250906000818181858888f1935050505015801561027f573d6000803e3d6000fd5b5060085460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b1580156102c557600080fd5b505af11580156102d9573d6000803e3d6000fd5b504792506102fd91506102f790506001600160601b03851684610529565b826103ba565b505050565b6008546040516001600160a01b0390911690600090670de0b6b3a76400009082818181858883f1935050505015801561033f573d6000803e3d6000fd5b5060085460408051633ccfd60b60e01b8152905147926001600160a01b031691633ccfd60b91600480830192600092919082900301818387803b15801561038557600080fd5b505af1158015610399573d6000803e3d6000fd5b504792506103b691506102f7905083670de0b6b3a7640000610529565b5050565b8082146103b6577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f5060405161042b9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16103b66000805461ff001916610100179055565b60c18061055083390190565b60006020828403121561050b57600080fd5b81356001600160601b038116811461052257600080fd5b9392505050565b6000821982111561054a57634e487b7160e01b600052601160045260246000fd5b50019056fe6080604052348015600f57600080fd5b5060a38061001e6000396000f3fe60806040526004361060205760003560e01c80633ccfd60b14602b57600080fd5b36602657005b600080fd5b348015603657600080fd5b50603d603f565b005b60405133904780156108fc02916000818181858888f19350505050158015606a573d6000803e3d6000fd5b5056fea2646970667358221220791f7062956d87ff9e25c9fa2331e67a21161dfb07b9f20b5621a3f7fdeef64364736f6c634300080f0033a2646970667358221220ec2e0e36b6f8d8d4137b5d5c768222fba48f2a8ce739789947d204dab16ec2b664736f6c634300080f0033" ) )
      
    
    syntax Field ::= SafeTestField
    
    syntax SafeTestField ::= "IS_TEST" [symbol(), klabel(field_SafeTest_IS_TEST)]
    
    syntax SafeTestField ::= "failed" [symbol(), klabel(field_SafeTest_failed)]
    
    syntax SafeTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SafeTest_IS_SCRIPT)]
    
    syntax SafeTestField ::= "stdstore" [symbol(), klabel(field_SafeTest_stdstore)]
    
    syntax SafeTestField ::= "safe" [symbol(), klabel(field_SafeTest_safe)]
    
    rule  ( #loc ( SafeTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( SafeTest . failed ) => 0 )
      
    
    rule  ( #loc ( SafeTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( SafeTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( SafeTest . safe ) => 8 )
      
    
    syntax ByteArray ::= SafeTestContract "." SafeTestMethod [function(), klabel(method_SafeTest)]
    
    syntax SafeTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_SafeTest_IS_SCRIPT)]
    
    syntax SafeTestMethod ::= "IS_TEST" "(" ")" [klabel(method_SafeTest_IS_TEST)]
    
    syntax SafeTestMethod ::= "failed" "(" ")" [klabel(method_SafeTest_failed)]
    
    syntax SafeTestMethod ::= "setUp" "(" ")" [klabel(method_SafeTest_setUp)]
    
    syntax SafeTestMethod ::= "testWithdraw" "(" ")" [klabel(method_SafeTest_testWithdraw)]
    
    syntax SafeTestMethod ::= "testWithdrawFuzz" "(" Int ")" [klabel(method_SafeTest_testWithdrawFuzz)]
    
    syntax SafeTestMethod ::= "vm" "(" ")" [klabel(method_SafeTest_vm)]
    
    rule  ( SafeTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( SafeTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( SafeTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( SafeTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( SafeTest . testWithdraw ( ) => #abiCallData ( "testWithdraw" , .TypedArgs ) )
      
    
    rule  ( SafeTest . testWithdrawFuzz ( V0_amount ) => #abiCallData ( "testWithdrawFuzz" , #uint96 ( V0_amount ) , .TypedArgs ) )
       ensures #rangeUInt ( 96 , V0_amount )
      
    
    rule  ( SafeTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testWithdraw" ) => 3574182252 )
      
    
    rule  ( selector ( "testWithdrawFuzz" ) => 3503970826 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module SETUPTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= SetUpTestContract
    
    syntax SetUpTestContract ::= "SetUpTest" [klabel(contract_SetUpTest)]
    
    rule  ( #binRuntime ( SetUpTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c6a19dd21161005b578063c6a19dd2146100e6578063ec7fe471146100f9578063f8ccbf4714610101578063fa7626d41461011457600080fd5b80630a9254e4146100825780633a7684631461008c578063ba414fa6146100c4575b600080fd5b61008a610121565b005b6100a7737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546100d690610100900460ff1681565b60405190151581526020016100bb565b61008a6100f4366004610298565b610138565b61008a610152565b6000546100d69062010000900460ff1681565b6000546100d69060ff1681565b60088054906000610131836102b1565b9190505550565b6101456008546065610161565b61014f8182610161565b50565b61015f6008546065610161565b565b808214610294577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516101d29060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16102946000805461ff001916610100179055565b5050565b6000602082840312156102aa57600080fd5b5035919050565b6000600182016102d157634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122077ff240cc2165536c7744109461e6cde48e471f4d89e6dde89dd21614001a78664736f6c634300080f0033" ) )
      
    
    syntax Field ::= SetUpTestField
    
    syntax SetUpTestField ::= "IS_TEST" [symbol(), klabel(field_SetUpTest_IS_TEST)]
    
    syntax SetUpTestField ::= "failed" [symbol(), klabel(field_SetUpTest_failed)]
    
    syntax SetUpTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SetUpTest_IS_SCRIPT)]
    
    syntax SetUpTestField ::= "stdstore" [symbol(), klabel(field_SetUpTest_stdstore)]
    
    syntax SetUpTestField ::= "counter" [symbol(), klabel(field_SetUpTest_counter)]
    
    rule  ( #loc ( SetUpTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( SetUpTest . failed ) => 0 )
      
    
    rule  ( #loc ( SetUpTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( SetUpTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( SetUpTest . counter ) => 8 )
      
    
    syntax ByteArray ::= SetUpTestContract "." SetUpTestMethod [function(), klabel(method_SetUpTest)]
    
    syntax SetUpTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_SetUpTest_IS_SCRIPT)]
    
    syntax SetUpTestMethod ::= "IS_TEST" "(" ")" [klabel(method_SetUpTest_IS_TEST)]
    
    syntax SetUpTestMethod ::= "failed" "(" ")" [klabel(method_SetUpTest_failed)]
    
    syntax SetUpTestMethod ::= "setUp" "(" ")" [klabel(method_SetUpTest_setUp)]
    
    syntax SetUpTestMethod ::= "testSetUpCalled" "(" ")" [klabel(method_SetUpTest_testSetUpCalled)]
    
    syntax SetUpTestMethod ::= "testSetUpCalledSymbolic" "(" Int ")" [klabel(method_SetUpTest_testSetUpCalledSymbolic)]
    
    syntax SetUpTestMethod ::= "vm" "(" ")" [klabel(method_SetUpTest_vm)]
    
    rule  ( SetUpTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . testSetUpCalled ( ) => #abiCallData ( "testSetUpCalled" , .TypedArgs ) )
      
    
    rule  ( SetUpTest . testSetUpCalledSymbolic ( V0_x ) => #abiCallData ( "testSetUpCalledSymbolic" , #uint256 ( V0_x ) , .TypedArgs ) )
       ensures #rangeUInt ( 256 , V0_x )
      
    
    rule  ( SetUpTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testSetUpCalled" ) => 3967804529 )
      
    
    rule  ( selector ( "testSetUpCalledSymbolic" ) => 3332480466 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module SIGNTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= SignTestContract
    
    syntax SignTestContract ::= "SignTest" [klabel(contract_SignTest)]
    
    rule  ( #binRuntime ( SignTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610069578063ba414fa6146100a1578063ed8f10df146100c3578063f8ccbf47146100cb578063fa7626d4146100de575b600080fd5b005b610084737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546100b390610100900460ff1681565b6040519015158152602001610098565b6100676100eb565b6000546100b39062010000900460ff1681565b6000546100b39060ff1681565b6040516001625e79b760e01b0319815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063ffa18649906024016020604051808303816000875af1158015610143573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061016791906103ef565b6040516338d07aa960e21b8152600160048201527f385967023fb9520b497ee37da9c1e3d5faac1385800ce4ed07ca32d7893c7bb56024820181905291925060009081908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063e341eaa4906044016060604051808303816000875af11580156101eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061020f919061041f565b925092509250600060018585858560405160008152602001604052604051610253949392919093845260ff9290921660208401526040830152606082015260800190565b6020604051602081039080840390855afa158015610275573d6000803e3d6000fd5b50505060206040510351905061028b8682610293565b505050505050565b806001600160a01b0316826001600160a01b0316146103eb577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103199060208082526025908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b616464604082015264726573735d60d81b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526001600160a01b038316602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526001600160a01b038416602082015290517f9c4e8541ca8f0dc1c413f9108f66d82d3cecb1bddbce437a61caa3175c4cc96f9181900360800190a16103eb6000805461ff001916610100179055565b5050565b60006020828403121561040157600080fd5b81516001600160a01b038116811461041857600080fd5b9392505050565b60008060006060848603121561043457600080fd5b835160ff8116811461044557600080fd5b60208501516040909501519096949550939250505056fea26469706673582212203cef55ff9dc95e16429f74187c41e784e00572acd3b31202f5989e7bf9fc4bed64736f6c634300080f0033" ) )
      
    
    syntax Field ::= SignTestField
    
    syntax SignTestField ::= "IS_TEST" [symbol(), klabel(field_SignTest_IS_TEST)]
    
    syntax SignTestField ::= "failed" [symbol(), klabel(field_SignTest_failed)]
    
    syntax SignTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SignTest_IS_SCRIPT)]
    
    syntax SignTestField ::= "stdstore" [symbol(), klabel(field_SignTest_stdstore)]
    
    rule  ( #loc ( SignTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( SignTest . failed ) => 0 )
      
    
    rule  ( #loc ( SignTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( SignTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= SignTestContract "." SignTestMethod [function(), klabel(method_SignTest)]
    
    syntax SignTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_SignTest_IS_SCRIPT)]
    
    syntax SignTestMethod ::= "IS_TEST" "(" ")" [klabel(method_SignTest_IS_TEST)]
    
    syntax SignTestMethod ::= "failed" "(" ")" [klabel(method_SignTest_failed)]
    
    syntax SignTestMethod ::= "setUp" "(" ")" [klabel(method_SignTest_setUp)]
    
    syntax SignTestMethod ::= "testSign" "(" ")" [klabel(method_SignTest_testSign)]
    
    syntax SignTestMethod ::= "vm" "(" ")" [klabel(method_SignTest_vm)]
    
    rule  ( SignTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( SignTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( SignTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( SignTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( SignTest . testSign ( ) => #abiCallData ( "testSign" , .TypedArgs ) )
      
    
    rule  ( SignTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testSign" ) => 3985576159 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module ASSERTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= AssertTestContract
    
    syntax AssertTestContract ::= "AssertTest" [klabel(contract_AssertTest)]
    
    rule  ( #binRuntime ( AssertTest ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060505760003560e01c80630a9254e414605557806318675d42146055578063360da4d21460555780635ddecbfd1460575780637aa9ccae146057575b600080fd5b005b6055605f565b565b605d634e487b7160e01b600052600160045260246000fdfea2646970667358221220f35055cd4dfabca22610c6548d584b9075e39a37f3ab01bb1b9683b3f03082da64736f6c634300080f0033" ) )
      
    
    syntax ByteArray ::= AssertTestContract "." AssertTestMethod [function(), klabel(method_AssertTest)]
    
    syntax AssertTestMethod ::= "setUp" "(" ")" [klabel(method_AssertTest_setUp)]
    
    syntax AssertTestMethod ::= "testFail_assert_false" "(" ")" [klabel(method_AssertTest_testFail_assert_false)]
    
    syntax AssertTestMethod ::= "testFail_assert_true" "(" ")" [klabel(method_AssertTest_testFail_assert_true)]
    
    syntax AssertTestMethod ::= "test_assert_false" "(" ")" [klabel(method_AssertTest_test_assert_false)]
    
    syntax AssertTestMethod ::= "test_assert_true" "(" ")" [klabel(method_AssertTest_test_assert_true)]
    
    rule  ( AssertTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( AssertTest . testFail_assert_false ( ) => #abiCallData ( "testFail_assert_false" , .TypedArgs ) )
      
    
    rule  ( AssertTest . testFail_assert_true ( ) => #abiCallData ( "testFail_assert_true" , .TypedArgs ) )
      
    
    rule  ( AssertTest . test_assert_false ( ) => #abiCallData ( "test_assert_false" , .TypedArgs ) )
      
    
    rule  ( AssertTest . test_assert_true ( ) => #abiCallData ( "test_assert_true" , .TypedArgs ) )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testFail_assert_false" ) => 2057948334 )
      
    
    rule  ( selector ( "testFail_assert_true" ) => 409427266 )
      
    
    rule  ( selector ( "test_assert_false" ) => 1574882301 )
      
    
    rule  ( selector ( "test_assert_true" ) => 906863826 )
      

endmodule

module SNAPSHOTTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= SnapshotTestContract
    
    syntax SnapshotTestContract ::= "SnapshotTest" [klabel(contract_SnapshotTest)]
    
    rule  ( #binRuntime ( SnapshotTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b50600436106100625760003560e01c80630a9254e4146100675780633a76846314610078578063ba414fa6146100b0578063befb3b8a146100d2578063f8ccbf47146100da578063fa7626d4146100ed575b600080fd5b610076600a6008556014600955565b005b610093737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6000546100c290610100900460ff1681565b60405190151581526020016100a7565b6100766100fa565b6000546100c29062010000900460ff1681565b6000546100c29060ff1681565b60007f885cb69240a935d632d79c317109709ecfa91a80626ff3989d68f67f5b1dd12d60001c60601b60601c6001600160a01b0316639711715a6040518163ffffffff1660e01b81526004016020604051808303816000875af1158015610165573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101899190610403565b61012c60088190556101906009559091506101a4908061027f565b6009546101b39061019061027f565b604051631135fc2960e21b815260048101829052737109709ecfa91a80626ff3989d68f67f5b1dd12d906344d7f0a4906024016020604051808303816000875af1158015610205573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610229919061041c565b50610253600860000154600a6040518060600160405280602781526020016104df602791396103b6565b61027c60086001015460146040518060600160405280602781526020016104b8602791396103b6565b50565b8082146103b2577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516102f09060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16103b26000805461ff001916610100179055565b5050565b8183146103fe577f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf3583816040516103ec9190610445565b60405180910390a16103fe838361027f565b505050565b60006020828403121561041557600080fd5b5051919050565b60006020828403121561042e57600080fd5b8151801515811461043e57600080fd5b9392505050565b60408152600560408201526422b93937b960d91b606082015260006020608081840152835180608085015260005b8181101561048f5785810183015185820160a001528201610473565b818111156104a157600060a083870101525b50601f01601f19169290920160a001939250505056fe736e617073686f742072657665727420666f7220736c6f74203120756e7375636365737366756c736e617073686f742072657665727420666f7220736c6f74203020756e7375636365737366756ca2646970667358221220a3b220282776bd8a9f1c5419b60d28520fed8ec3fe9e4174dc0e9839c474529d64736f6c634300080f0033" ) )
      
    
    syntax Field ::= SnapshotTestField
    
    syntax SnapshotTestField ::= "IS_TEST" [symbol(), klabel(field_SnapshotTest_IS_TEST)]
    
    syntax SnapshotTestField ::= "failed" [symbol(), klabel(field_SnapshotTest_failed)]
    
    syntax SnapshotTestField ::= "IS_SCRIPT" [symbol(), klabel(field_SnapshotTest_IS_SCRIPT)]
    
    syntax SnapshotTestField ::= "stdstore" [symbol(), klabel(field_SnapshotTest_stdstore)]
    
    syntax SnapshotTestField ::= "store" [symbol(), klabel(field_SnapshotTest_store)]
    
    rule  ( #loc ( SnapshotTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( SnapshotTest . failed ) => 0 )
      
    
    rule  ( #loc ( SnapshotTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( SnapshotTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( SnapshotTest . store ) => 8 )
      
    
    syntax ByteArray ::= SnapshotTestContract "." SnapshotTestMethod [function(), klabel(method_SnapshotTest)]
    
    syntax SnapshotTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_SnapshotTest_IS_SCRIPT)]
    
    syntax SnapshotTestMethod ::= "IS_TEST" "(" ")" [klabel(method_SnapshotTest_IS_TEST)]
    
    syntax SnapshotTestMethod ::= "failed" "(" ")" [klabel(method_SnapshotTest_failed)]
    
    syntax SnapshotTestMethod ::= "setUp" "(" ")" [klabel(method_SnapshotTest_setUp)]
    
    syntax SnapshotTestMethod ::= "testSnapshot" "(" ")" [klabel(method_SnapshotTest_testSnapshot)]
    
    syntax SnapshotTestMethod ::= "vm" "(" ")" [klabel(method_SnapshotTest_vm)]
    
    rule  ( SnapshotTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . testSnapshot ( ) => #abiCallData ( "testSnapshot" , .TypedArgs ) )
      
    
    rule  ( SnapshotTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testSnapshot" ) => 3204135818 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module STORE-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= StoreContract
    
    syntax StoreContract ::= "Store" [klabel(contract_Store)]
    
    rule  ( #binRuntime ( Store ) => #parseByteStack ( "0x6080604052600080fdfea26469706673582212203f1be81ff3a3b4e3aec226d832fb95177df676f71eb3dd16db2a2307b248d82464736f6c634300080f0033" ) )
      
    
    syntax Field ::= StoreField
    
    syntax StoreField ::= "testNumber" [symbol(), klabel(field_Store_testNumber)]
    
    rule  ( #loc ( Store . testNumber ) => 0 )
      

endmodule

module STORETEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= StoreTestContract
    
    syntax StoreTestContract ::= "StoreTest" [klabel(contract_StoreTest)]
    
    rule  ( #binRuntime ( StoreTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063480880731161005b57806348088073146100cc578063ba414fa6146100d4578063f8ccbf47146100f6578063fa7626d41461010957600080fd5b806309840bb5146100825780630a9254e41461008c5780633a76846314610094575b600080fd5b61008a610116565b005b61008a6101c1565b6100af737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b61008a610270565b6000546100e690610100900460ff1681565b60405190151581526020016100c3565b6000546100e69062010000900460ff1681565b6000546100e69060ff1681565b6008546040516365bc948160e01b81526001600160a01b0390911660048201526000908190737109709ecfa91a80626ff3989d68f67f5b1dd12d906365bc9481906024016000604051808303816000875af1158015610179573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101a1919081019061057d565b915091506101b18251600161038d565b6101bd8151600161038d565b5050565b6040805163266cf10960e01b81529051737109709ecfa91a80626ff3989d68f67f5b1dd12d9163266cf10991600480830192600092919082900301818387803b15801561020d57600080fd5b505af1158015610221573d6000803e3d6000fd5b50505050604051610231906104c0565b604051809103906000f08015801561024d573d6000803e3d6000fd5b50600880546001600160a01b0319166001600160a01b0392909216919091179055565b6008546040516370ca10bb60e01b81526001600160a01b03909116600482015260006024820152617a696044820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906370ca10bb90606401600060405180830381600087803b1580156102d857600080fd5b505af11580156102ec573d6000803e3d6000fd5b5050600854604051630667f9d760e41b81526001600160a01b0390911660048201526000602482018190529250737109709ecfa91a80626ff3989d68f67f5b1dd12d915063667f9d70906044016020604051808303816000875af1158015610358573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061037c91906105e1565b905061038a81617a6961038d565b50565b8082146101bd577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516103fe9060208082526022908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b75696e604082015261745d60f01b606082015260800190565b60405180910390a160408051818152600a81830152690808115e1c1958dd195960b21b60608201526020810183905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a160408051818152600a8183015269080808081058dd1d585b60b21b60608201526020810184905290517fb2de2fbe801a0df6c0cbddfd448ba3c41d48a040ca35c56c8196ef0fcae721a89181900360800190a16101bd6000805461ff001916610100179055565b6062806105fb83390190565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126104f357600080fd5b8151602067ffffffffffffffff80831115610510576105106104cc565b8260051b604051601f19603f83011681018181108482111715610535576105356104cc565b60405293845285810183019383810192508785111561055357600080fd5b83870191505b8482101561057257815183529183019190830190610559565b979650505050505050565b6000806040838503121561059057600080fd5b825167ffffffffffffffff808211156105a857600080fd5b6105b4868387016104e2565b935060208501519150808211156105ca57600080fd5b506105d7858286016104e2565b9150509250929050565b6000602082840312156105f357600080fd5b505191905056fe6080604052610539600055348015601557600080fd5b50603f8060236000396000f3fe6080604052600080fdfea26469706673582212203f1be81ff3a3b4e3aec226d832fb95177df676f71eb3dd16db2a2307b248d82464736f6c634300080f0033a2646970667358221220fe5f4602e1206e212249b6dffe1b81ef1beb510523e3f2128dec195b8f796d4a64736f6c634300080f0033" ) )
      
    
    syntax Field ::= StoreTestField
    
    syntax StoreTestField ::= "IS_TEST" [symbol(), klabel(field_StoreTest_IS_TEST)]
    
    syntax StoreTestField ::= "failed" [symbol(), klabel(field_StoreTest_failed)]
    
    syntax StoreTestField ::= "IS_SCRIPT" [symbol(), klabel(field_StoreTest_IS_SCRIPT)]
    
    syntax StoreTestField ::= "stdstore" [symbol(), klabel(field_StoreTest_stdstore)]
    
    syntax StoreTestField ::= "myStore" [symbol(), klabel(field_StoreTest_myStore)]
    
    rule  ( #loc ( StoreTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( StoreTest . failed ) => 0 )
      
    
    rule  ( #loc ( StoreTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( StoreTest . stdstore ) => 1 )
      
    
    rule  ( #loc ( StoreTest . myStore ) => 8 )
      
    
    syntax ByteArray ::= StoreTestContract "." StoreTestMethod [function(), klabel(method_StoreTest)]
    
    syntax StoreTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_StoreTest_IS_SCRIPT)]
    
    syntax StoreTestMethod ::= "IS_TEST" "(" ")" [klabel(method_StoreTest_IS_TEST)]
    
    syntax StoreTestMethod ::= "failed" "(" ")" [klabel(method_StoreTest_failed)]
    
    syntax StoreTestMethod ::= "setUp" "(" ")" [klabel(method_StoreTest_setUp)]
    
    syntax StoreTestMethod ::= "testAccesses" "(" ")" [klabel(method_StoreTest_testAccesses)]
    
    syntax StoreTestMethod ::= "testStoreLoad" "(" ")" [klabel(method_StoreTest_testStoreLoad)]
    
    syntax StoreTestMethod ::= "vm" "(" ")" [klabel(method_StoreTest_vm)]
    
    rule  ( StoreTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( StoreTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( StoreTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( StoreTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( StoreTest . testAccesses ( ) => #abiCallData ( "testAccesses" , .TypedArgs ) )
      
    
    rule  ( StoreTest . testStoreLoad ( ) => #abiCallData ( "testStoreLoad" , .TypedArgs ) )
      
    
    rule  ( StoreTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "testAccesses" ) => 159648693 )
      
    
    rule  ( selector ( "testStoreLoad" ) => 1208516723 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module TOSTRINGTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= ToStringTestContract
    
    syntax ToStringTestContract ::= "ToStringTest" [klabel(contract_ToStringTest)]
    
    rule  ( #binRuntime ( ToStringTest ) => #parseByteStack ( "0x608060405234801561001057600080fd5b506004361061009e5760003560e01c806353538af91161006657806353538af9146100fd578063ba414fa614610105578063f0cb13fb14610127578063f8ccbf471461012f578063fa7626d41461014257600080fd5b806305e65172146100a35780630c35d2ac146100ad578063302ab09d146100b55780633a768463146100bd578063416c8c83146100f5575b600080fd5b6100ab61014f565b005b6100ab6101fc565b6100ab61029f565b6100d8737109709ecfa91a80626ff3989d68f67f5b1dd12d81565b6040516001600160a01b0390911681526020015b60405180910390f35b6100ab610356565b6100ab6104a1565b60005461011790610100900460ff1681565b60405190151581526020016100ec565b6100ab61056f565b6000546101179062010000900460ff1681565b6000546101179060ff1681565b60405163348051d760e11b81526104d26004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d90636900a3ae906024016000604051808303816000875af11580156101a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526101d091908101906107a5565b90506101f8604051806040016040528060048152602001630c4c8ccd60e21b81525082610616565b5050565b604051631623433d60e31b8152600060048201819052908190737109709ecfa91a80626ff3989d68f67f5b1dd12d9063b11a19e8906024016000604051808303816000875af1158015610253573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261027b91908101906107a5565b90506101f86040518060800160405280604281526020016109456042913982610616565b604051632b65311f60e11b815273ea674fdde714fd979de3edf0f56aa9716b898ec86004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906356ca623e906024016000604051808303816000875af115801561030a573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261033291908101906107a5565b90506101f86040518060600160405280602a8152602001610987602a913982610616565b6040516338ee73ed60e11b815260016004820152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da906024016000604051808303816000875af11580156103ab573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526103d391908101906107a5565b90506103fb604051806040016040528060048152602001637472756560e01b81525082610616565b6040516338ee73ed60e11b815260006004820152737109709ecfa91a80626ff3989d68f67f5b1dd12d906371dce7da906024016000604051808303816000875af115801561044d573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261047591908101906107a5565b905061049e6040518060400160405280600581526020016466616c736560d81b81525082610616565b50565b60408051808201825260148152737109709ecfa91a80626ff3989d68f67f5b1dd12d60601b602082015290516371aad10d60e01b8152600090737109709ecfa91a80626ff3989d68f67f5b1dd12d906371aad10d9061050490859060040161087e565b6000604051808303816000875af1158015610523573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261054b91908101906107a5565b90506101f86040518060600160405280602a815260200161091b602a913982610616565b604051635191620760e11b81526104d1196004820181905290600090737109709ecfa91a80626ff3989d68f67f5b1dd12d9063a322c40e906024016000604051808303816000875af11580156105c9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105f191908101906107a5565b90506101f8604051806040016040528060058152602001640b4c4c8ccd60da1b815250825b806040516020016106279190610898565b604051602081830303815290604052805190602001208260405160200161064e9190610898565b60405160208183030381529060405280519060200120146101f8577f41304facd9323d75b11bcdd609cb38effffdb05710f7caf0e9b16c6d9d709f506040516106d59060208082526024908201527f4572726f723a2061203d3d2062206e6f7420736174697366696564205b737472604082015263696e675d60e01b606082015260800190565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838260405161070c91906108b4565b60405180910390a17f280f4446b28a1372417dda658d30b95b2992b12ac9c7f378535f29a97acf35838160405161074391906108e7565b60405180910390a16101f86000805461ff001916610100179055565b634e487b7160e01b600052604160045260246000fd5b60005b83811015610790578181015183820152602001610778565b8381111561079f576000848401525b50505050565b6000602082840312156107b757600080fd5b815167ffffffffffffffff808211156107cf57600080fd5b818401915084601f8301126107e357600080fd5b8151818111156107f5576107f561075f565b604051601f8201601f19908116603f0116810190838211818310171561081d5761081d61075f565b8160405282815287602084870101111561083657600080fd5b610847836020830160208801610775565b979650505050505050565b6000815180845261086a816020860160208601610775565b601f01601f19169290920160200192915050565b6020815260006108916020830184610852565b9392505050565b600082516108aa818460208701610775565b9190910192915050565b604081526009604082015268202056616c7565206160b81b60608201526080602082015260006108916080830184610852565b60408152600960408201526810102b30b63ab2903160b91b6060820152608060208201526000610891608083018461085256fe307837313039373039656366613931613830363236666633393839643638663637663562316464313264307830303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030307845413637346664446537313466643937396465334564463046353641413937313642383938656338a264697066735822122019e931168657cc23196877f3c86df01c4ed938b446399fd46ea87b56bb87c7da64736f6c634300080f0033" ) )
      
    
    syntax Field ::= ToStringTestField
    
    syntax ToStringTestField ::= "IS_TEST" [symbol(), klabel(field_ToStringTest_IS_TEST)]
    
    syntax ToStringTestField ::= "failed" [symbol(), klabel(field_ToStringTest_failed)]
    
    syntax ToStringTestField ::= "IS_SCRIPT" [symbol(), klabel(field_ToStringTest_IS_SCRIPT)]
    
    syntax ToStringTestField ::= "stdstore" [symbol(), klabel(field_ToStringTest_stdstore)]
    
    rule  ( #loc ( ToStringTest . IS_TEST ) => 0 )
      
    
    rule  ( #loc ( ToStringTest . failed ) => 0 )
      
    
    rule  ( #loc ( ToStringTest . IS_SCRIPT ) => 0 )
      
    
    rule  ( #loc ( ToStringTest . stdstore ) => 1 )
      
    
    syntax ByteArray ::= ToStringTestContract "." ToStringTestMethod [function(), klabel(method_ToStringTest)]
    
    syntax ToStringTestMethod ::= "IS_SCRIPT" "(" ")" [klabel(method_ToStringTest_IS_SCRIPT)]
    
    syntax ToStringTestMethod ::= "IS_TEST" "(" ")" [klabel(method_ToStringTest_IS_TEST)]
    
    syntax ToStringTestMethod ::= "failed" "(" ")" [klabel(method_ToStringTest_failed)]
    
    syntax ToStringTestMethod ::= "testAddressToString" "(" ")" [klabel(method_ToStringTest_testAddressToString)]
    
    syntax ToStringTestMethod ::= "testBoolToString" "(" ")" [klabel(method_ToStringTest_testBoolToString)]
    
    syntax ToStringTestMethod ::= "testBytes32ToString" "(" ")" [klabel(method_ToStringTest_testBytes32ToString)]
    
    syntax ToStringTestMethod ::= "testBytesToString" "(" ")" [klabel(method_ToStringTest_testBytesToString)]
    
    syntax ToStringTestMethod ::= "testIntToString" "(" ")" [klabel(method_ToStringTest_testIntToString)]
    
    syntax ToStringTestMethod ::= "testUint256ToString" "(" ")" [klabel(method_ToStringTest_testUint256ToString)]
    
    syntax ToStringTestMethod ::= "vm" "(" ")" [klabel(method_ToStringTest_vm)]
    
    rule  ( ToStringTest . IS_SCRIPT ( ) => #abiCallData ( "IS_SCRIPT" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . IS_TEST ( ) => #abiCallData ( "IS_TEST" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . failed ( ) => #abiCallData ( "failed" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testAddressToString ( ) => #abiCallData ( "testAddressToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testBoolToString ( ) => #abiCallData ( "testBoolToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testBytes32ToString ( ) => #abiCallData ( "testBytes32ToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testBytesToString ( ) => #abiCallData ( "testBytesToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testIntToString ( ) => #abiCallData ( "testIntToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . testUint256ToString ( ) => #abiCallData ( "testUint256ToString" , .TypedArgs ) )
      
    
    rule  ( ToStringTest . vm ( ) => #abiCallData ( "vm" , .TypedArgs ) )
      
    
    rule  ( selector ( "IS_SCRIPT" ) => 4174167879 )
      
    
    rule  ( selector ( "IS_TEST" ) => 4202047188 )
      
    
    rule  ( selector ( "failed" ) => 3124842406 )
      
    
    rule  ( selector ( "testAddressToString" ) => 808104093 )
      
    
    rule  ( selector ( "testBoolToString" ) => 1097632899 )
      
    
    rule  ( selector ( "testBytes32ToString" ) => 204853932 )
      
    
    rule  ( selector ( "testBytesToString" ) => 1397983993 )
      
    
    rule  ( selector ( "testIntToString" ) => 4039840763 )
      
    
    rule  ( selector ( "testUint256ToString" ) => 98980210 )
      
    
    rule  ( selector ( "vm" ) => 980845667 )
      

endmodule

module TOKENTEST-BIN-RUNTIME
    imports public EDSL
    imports public INT-SIMPLIFICATION
    imports public LEMMAS
    
    syntax Contract ::= TokenTestContract
    
    syntax TokenTestContract ::= "TokenTest" [klabel(contract_TokenTest)]
    
    rule  ( #binRuntime ( TokenTest ) => #parseByteStack ( "0x6080604052348015600f57600080fd5b506004361060325760003560e01c80630a9254e4146037578063663bc990146037575b600080fd5b00fea2646970667358221220b79133177bc61ed270c32a0f9d2dfd28012161f96f4943cf7511f17aadce8b1d64736f6c634300080f0033" ) )
      
    
    syntax ByteArray ::= TokenTestContract "." TokenTestMethod [function(), klabel(method_TokenTest)]
    
    syntax TokenTestMethod ::= "setUp" "(" ")" [klabel(method_TokenTest_setUp)]
    
    syntax TokenTestMethod ::= "test_1" "(" ")" [klabel(method_TokenTest_test_1)]
    
    rule  ( TokenTest . setUp ( ) => #abiCallData ( "setUp" , .TypedArgs ) )
      
    
    rule  ( TokenTest . test_1 ( ) => #abiCallData ( "test_1" , .TypedArgs ) )
      
    
    rule  ( selector ( "setUp" ) => 177362148 )
      
    
    rule  ( selector ( "test_1" ) => 1715194256 )
      

endmodule

module VERIFICATION
    imports public BLOCKPARAMSTEST-BIN-RUNTIME
    imports public BROADCASTTEST-BIN-RUNTIME
    imports public CONTRACTTEST-BIN-RUNTIME
    imports public CONTRACTBTEST-BIN-RUNTIME
    imports public DEALTEST-BIN-RUNTIME
    imports public TOKEN-BIN-RUNTIME
    imports public EMITCONTRACTTEST-BIN-RUNTIME
    imports public ENVTEST-BIN-RUNTIME
    imports public ETCHTEST-BIN-RUNTIME
    imports public FFITEST-BIN-RUNTIME
    imports public FILESTEST-BIN-RUNTIME
    imports public FORKTEST-BIN-RUNTIME
    imports public GETCODETEST-BIN-RUNTIME
    imports public LOOPSTEST-BIN-RUNTIME
    imports public MOCKCALLTEST-BIN-RUNTIME
    imports public NONCETEST-BIN-RUNTIME
    imports public OWNERUPONLYTEST-BIN-RUNTIME
    imports public PRANKTEST-BIN-RUNTIME
    imports public RECORDLOGSTEST-BIN-RUNTIME
    imports public SAFETEST-BIN-RUNTIME
    imports public SETUPTEST-BIN-RUNTIME
    imports public SIGNTEST-BIN-RUNTIME
    imports public ASSERTTEST-BIN-RUNTIME
    imports public SNAPSHOTTEST-BIN-RUNTIME
    imports public STORE-BIN-RUNTIME
    imports public STORETEST-BIN-RUNTIME
    imports public TOSTRINGTEST-BIN-RUNTIME
    imports public TOKENTEST-BIN-RUNTIME
    imports public INT-SIMPLIFICATION
    
    

endmodule

module SPEC
    imports public DEALTEST-BIN-RUNTIME-SPEC
    imports public ASSERTTEST-BIN-RUNTIME-SPEC
    
    

endmodule

module DEALTEST-BIN-RUNTIME-SPEC
    imports public VERIFICATION
    imports public DEALTEST-BIN-RUNTIME
    
    claim [dealtest-0]: <kevm>
           <k>
             ( #execute => #halt )
             ~> _CONTINUATION
           </k>
           <exit-code>
             ( _EXITCODE_CELL => ?_EXIT_CODE_CELL_c89e25d9 )
           </exit-code>
           <mode>
             ( NORMAL => ?_MODE_CELL_c89e25d9 )
           </mode>
           <schedule>
             ( LONDON => ?_SCHEDULE_CELL_c89e25d9 )
           </schedule>
           <ethereum>
             <evm>
               <output>
                 ( _OUTPUT_CELL => ?_OUTPUT_CELL_c89e25d9 )
               </output>
               <statusCode>
                 ( _STATUSCODE => ?STATUSCODE_FINAL )
               </statusCode>
               <endPC>
                 ( _ENDPC_CELL => ?_ENDPC_CELL_c89e25d9 )
               </endPC>
               <callStack>
                 ( .List => ?_CALLSTACK_CELL_c89e25d9 )
               </callStack>
               <interimStates>
                 ( _INTERIMSTATES_CELL => ?_INTERIMSTATES_CELL_c89e25d9 )
               </interimStates>
               <touchedAccounts>
                 ( _TOUCHEDACCOUNTS_CELL => ?_TOUCHEDACCOUNTS_CELL_c89e25d9 )
               </touchedAccounts>
               <callState>
                 <program>
                   ( #binRuntime ( DealTest ) => ?_PROGRAM_CELL_c89e25d9 )
                 </program>
                 <jumpDests>
                   ( #computeValidJumpDests ( #binRuntime ( DealTest ) ) => ?_JUMPDESTS_CELL_c89e25d9 )
                 </jumpDests>
                 <id>
                   1032069922050249630382865877677304880282300743300
                 </id>
                 <caller>
                   ( _CALLER_ID => ?_CALLER_CELL_c89e25d9 )
                 </caller>
                 <callData>
                   ( DealTest . testDeal ( _VV0_value_3c5818c8 ) => ?_CALLDATA_CELL_c89e25d9 )
                 </callData>
                 <callValue>
                   ( 0 => ?_CALLVALUE_CELL_c89e25d9 )
                 </callValue>
                 <wordStack>
                   ( .WordStack => ?_WORDSTACK_CELL_c89e25d9 )
                 </wordStack>
                 <localMem>
                   ( _LOCAL_MEM => ?_LOCALMEM_CELL_c89e25d9 )
                 </localMem>
                 <pc>
                   ( 0 => ?_PC_CELL_c89e25d9 )
                 </pc>
                 <gas>
                   ( #gas ( _VGAS ) => ?_GAS_CELL_c89e25d9 )
                 </gas>
                 <memoryUsed>
                   ( 0 => ?_MEMORYUSED_CELL_c89e25d9 )
                 </memoryUsed>
                 <callGas>
                   ( _CALLGAS_CELL => ?_CALLGAS_CELL_c89e25d9 )
                 </callGas>
                 <static>
                   ( false => ?_STATIC_CELL_c89e25d9 )
                 </static>
                 <callDepth>
                   ( 0 => ?_CALLDEPTH_CELL_c89e25d9 )
                 </callDepth>
               </callState>
               <substate>
                 <selfDestruct>
                   ( _SELFDESTRUCT_CELL => ?_SELFDESTRUCT_CELL_c89e25d9 )
                 </selfDestruct>
                 <log>
                   ( _LOG_CELL => ?_LOG_CELL_c89e25d9 )
                 </log>
                 <refund>
                   ( _REFUND_CELL => ?_REFUND_CELL_c89e25d9 )
                 </refund>
                 <accessedAccounts>
                   ( _ACCESSEDACCOUNTS_CELL => ?_ACCESSEDACCOUNTS_CELL_c89e25d9 )
                 </accessedAccounts>
                 <accessedStorage>
                   ( .Map => ?_ACCESSEDSTORAGE_CELL_c89e25d9 )
                 </accessedStorage>
               </substate>
               <gasPrice>
                 ( _GASPRICE_CELL => ?_GASPRICE_CELL_c89e25d9 )
               </gasPrice>
               <origin>
                 ( _ORIGIN_ID => ?_ORIGIN_CELL_c89e25d9 )
               </origin>
               <blockhashes>
                 ( _BLOCKHASHES_CELL => ?_BLOCKHASHES_CELL_c89e25d9 )
               </blockhashes>
               <block>
                 <previousHash>
                   ( _PREVIOUSHASH_CELL => ?_PREVIOUSHASH_CELL_c89e25d9 )
                 </previousHash>
                 <ommersHash>
                   ( _OMMERSHASH_CELL => ?_OMMERSHASH_CELL_c89e25d9 )
                 </ommersHash>
                 <coinbase>
                   ( _COINBASE_CELL => ?_COINBASE_CELL_c89e25d9 )
                 </coinbase>
                 <stateRoot>
                   ( _STATEROOT_CELL => ?_STATEROOT_CELL_c89e25d9 )
                 </stateRoot>
                 <transactionsRoot>
                   ( _TRANSACTIONSROOT_CELL => ?_TRANSACTIONSROOT_CELL_c89e25d9 )
                 </transactionsRoot>
                 <receiptsRoot>
                   ( _RECEIPTSROOT_CELL => ?_RECEIPTSROOT_CELL_c89e25d9 )
                 </receiptsRoot>
                 <logsBloom>
                   ( _LOGSBLOOM_CELL => ?_LOGSBLOOM_CELL_c89e25d9 )
                 </logsBloom>
                 <difficulty>
                   ( _DIFFICULTY_CELL => ?_DIFFICULTY_CELL_c89e25d9 )
                 </difficulty>
                 <number>
                   ( _NUMBER_CELL => ?_NUMBER_CELL_c89e25d9 )
                 </number>
                 <gasLimit>
                   ( _GASLIMIT_CELL => ?_GASLIMIT_CELL_c89e25d9 )
                 </gasLimit>
                 <gasUsed>
                   ( _GASUSED_CELL => ?_GASUSED_CELL_c89e25d9 )
                 </gasUsed>
                 <timestamp>
                   ( _TIMESTAMP_CELL => ?_TIMESTAMP_CELL_c89e25d9 )
                 </timestamp>
                 <extraData>
                   ( _EXTRADATA_CELL => ?_EXTRADATA_CELL_c89e25d9 )
                 </extraData>
                 <mixHash>
                   ( _MIXHASH_CELL => ?_MIXHASH_CELL_c89e25d9 )
                 </mixHash>
                 <blockNonce>
                   ( _BLOCKNONCE_CELL => ?_BLOCKNONCE_CELL_c89e25d9 )
                 </blockNonce>
                 <baseFee>
                   ( _BASEFEE_CELL => ?_BASEFEE_CELL_c89e25d9 )
                 </baseFee>
                 <ommerBlockHeaders>
                   ( _OMMERBLOCKHEADERS_CELL => ?_OMMERBLOCKHEADERS_CELL_c89e25d9 )
                 </ommerBlockHeaders>
               </block>
             </evm>
             <network>
               <chainID>
                 ( _CHAINID_CELL => ?_CHAINID_CELL_c89e25d9 )
               </chainID>
               <activeAccounts>
                 ( ( SetItem ( 1032069922050249630382865877677304880282300743300 ) ( SetItem ( 645326474426547203313410069153905908525362434349 ) ( SetItem ( 137122462167341575662000267002353578582749290296 ) SetItem ( 120209876281281145568259943 ) ) ) ) => ?_ACTIVEACCOUNTS_CELL_c89e25d9 )
               </activeAccounts>
               <accounts>
                 ( <account>
                   <acctID>
                     1032069922050249630382865877677304880282300743300
                   </acctID>
                   <balance>
                     ( 0 => ?_ACCT_BALANCE )
                   </balance>
                   <code>
                     #binRuntime ( DealTest )
                   </code>
                   <storage>
                     ( _ACCT_STORAGE => ?_ACCT_STORAGE_FINAL )
                   </storage>
                   <nonce>
                     ( 0 => ?_ACCT_NONCE )
                   </nonce>
                   ...
                 </account>
                 ( <account>
                   <acctID>
                     137122462167341575662000267002353578582749290296
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     645326474426547203313410069153905908525362434349
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     b"\x00"
                   </code>
                   <storage>
                     ( CHEATCODE_STORAGE => ?CHEATCODE_STORAGE_FINAL )
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     120209876281281145568259943
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( .Bag => ?_ACCOUNTS_FINAL ) ) ) ) )
               </accounts>
               <txOrder>
                 ( _TXORDER_CELL => ?_TXORDER_CELL_c89e25d9 )
               </txOrder>
               <txPending>
                 ( _TXPENDING_CELL => ?_TXPENDING_CELL_c89e25d9 )
               </txPending>
               <messages>
                 ( _MESSAGES_CELL => ?_MESSAGES_CELL_c89e25d9 )
               </messages>
             </network>
           </ethereum>
         </kevm>
      requires #lookup ( CHEATCODE_STORAGE , #loc ( FoundryCheat . Failed ) ) ==Int 0
       ensures foundry_success  ( ?STATUSCODE_FINAL , #lookup ( ?CHEATCODE_STORAGE_FINAL , #loc ( FoundryCheat . Failed ) ) )
      [label(dealtest-0)]

endmodule

module ASSERTTEST-BIN-RUNTIME-SPEC
    imports public VERIFICATION
    imports public ASSERTTEST-BIN-RUNTIME
    
    claim [asserttest-0]: <kevm>
           <k>
             ( #execute => #halt )
             ~> _CONTINUATION
           </k>
           <exit-code>
             ( _EXITCODE_CELL => ?_EXIT_CODE_CELL_c89e25d9 )
           </exit-code>
           <mode>
             ( NORMAL => ?_MODE_CELL_c89e25d9 )
           </mode>
           <schedule>
             ( LONDON => ?_SCHEDULE_CELL_c89e25d9 )
           </schedule>
           <ethereum>
             <evm>
               <output>
                 ( _OUTPUT_CELL => ?_OUTPUT_CELL_c89e25d9 )
               </output>
               <statusCode>
                 ( _STATUSCODE => ?STATUSCODE_FINAL )
               </statusCode>
               <endPC>
                 ( _ENDPC_CELL => ?_ENDPC_CELL_c89e25d9 )
               </endPC>
               <callStack>
                 ( .List => ?_CALLSTACK_CELL_c89e25d9 )
               </callStack>
               <interimStates>
                 ( _INTERIMSTATES_CELL => ?_INTERIMSTATES_CELL_c89e25d9 )
               </interimStates>
               <touchedAccounts>
                 ( _TOUCHEDACCOUNTS_CELL => ?_TOUCHEDACCOUNTS_CELL_c89e25d9 )
               </touchedAccounts>
               <callState>
                 <program>
                   ( #binRuntime ( AssertTest ) => ?_PROGRAM_CELL_c89e25d9 )
                 </program>
                 <jumpDests>
                   ( #computeValidJumpDests ( #binRuntime ( AssertTest ) ) => ?_JUMPDESTS_CELL_c89e25d9 )
                 </jumpDests>
                 <id>
                   1032069922050249630382865877677304880282300743300
                 </id>
                 <caller>
                   ( _CALLER_ID => ?_CALLER_CELL_c89e25d9 )
                 </caller>
                 <callData>
                   ( AssertTest . test_assert_true ( ) => ?_CALLDATA_CELL_c89e25d9 )
                 </callData>
                 <callValue>
                   ( 0 => ?_CALLVALUE_CELL_c89e25d9 )
                 </callValue>
                 <wordStack>
                   ( .WordStack => ?_WORDSTACK_CELL_c89e25d9 )
                 </wordStack>
                 <localMem>
                   ( _LOCAL_MEM => ?_LOCALMEM_CELL_c89e25d9 )
                 </localMem>
                 <pc>
                   ( 0 => ?_PC_CELL_c89e25d9 )
                 </pc>
                 <gas>
                   ( #gas ( _VGAS ) => ?_GAS_CELL_c89e25d9 )
                 </gas>
                 <memoryUsed>
                   ( 0 => ?_MEMORYUSED_CELL_c89e25d9 )
                 </memoryUsed>
                 <callGas>
                   ( _CALLGAS_CELL => ?_CALLGAS_CELL_c89e25d9 )
                 </callGas>
                 <static>
                   ( false => ?_STATIC_CELL_c89e25d9 )
                 </static>
                 <callDepth>
                   ( 0 => ?_CALLDEPTH_CELL_c89e25d9 )
                 </callDepth>
               </callState>
               <substate>
                 <selfDestruct>
                   ( _SELFDESTRUCT_CELL => ?_SELFDESTRUCT_CELL_c89e25d9 )
                 </selfDestruct>
                 <log>
                   ( _LOG_CELL => ?_LOG_CELL_c89e25d9 )
                 </log>
                 <refund>
                   ( _REFUND_CELL => ?_REFUND_CELL_c89e25d9 )
                 </refund>
                 <accessedAccounts>
                   ( _ACCESSEDACCOUNTS_CELL => ?_ACCESSEDACCOUNTS_CELL_c89e25d9 )
                 </accessedAccounts>
                 <accessedStorage>
                   ( .Map => ?_ACCESSEDSTORAGE_CELL_c89e25d9 )
                 </accessedStorage>
               </substate>
               <gasPrice>
                 ( _GASPRICE_CELL => ?_GASPRICE_CELL_c89e25d9 )
               </gasPrice>
               <origin>
                 ( _ORIGIN_ID => ?_ORIGIN_CELL_c89e25d9 )
               </origin>
               <blockhashes>
                 ( _BLOCKHASHES_CELL => ?_BLOCKHASHES_CELL_c89e25d9 )
               </blockhashes>
               <block>
                 <previousHash>
                   ( _PREVIOUSHASH_CELL => ?_PREVIOUSHASH_CELL_c89e25d9 )
                 </previousHash>
                 <ommersHash>
                   ( _OMMERSHASH_CELL => ?_OMMERSHASH_CELL_c89e25d9 )
                 </ommersHash>
                 <coinbase>
                   ( _COINBASE_CELL => ?_COINBASE_CELL_c89e25d9 )
                 </coinbase>
                 <stateRoot>
                   ( _STATEROOT_CELL => ?_STATEROOT_CELL_c89e25d9 )
                 </stateRoot>
                 <transactionsRoot>
                   ( _TRANSACTIONSROOT_CELL => ?_TRANSACTIONSROOT_CELL_c89e25d9 )
                 </transactionsRoot>
                 <receiptsRoot>
                   ( _RECEIPTSROOT_CELL => ?_RECEIPTSROOT_CELL_c89e25d9 )
                 </receiptsRoot>
                 <logsBloom>
                   ( _LOGSBLOOM_CELL => ?_LOGSBLOOM_CELL_c89e25d9 )
                 </logsBloom>
                 <difficulty>
                   ( _DIFFICULTY_CELL => ?_DIFFICULTY_CELL_c89e25d9 )
                 </difficulty>
                 <number>
                   ( _NUMBER_CELL => ?_NUMBER_CELL_c89e25d9 )
                 </number>
                 <gasLimit>
                   ( _GASLIMIT_CELL => ?_GASLIMIT_CELL_c89e25d9 )
                 </gasLimit>
                 <gasUsed>
                   ( _GASUSED_CELL => ?_GASUSED_CELL_c89e25d9 )
                 </gasUsed>
                 <timestamp>
                   ( _TIMESTAMP_CELL => ?_TIMESTAMP_CELL_c89e25d9 )
                 </timestamp>
                 <extraData>
                   ( _EXTRADATA_CELL => ?_EXTRADATA_CELL_c89e25d9 )
                 </extraData>
                 <mixHash>
                   ( _MIXHASH_CELL => ?_MIXHASH_CELL_c89e25d9 )
                 </mixHash>
                 <blockNonce>
                   ( _BLOCKNONCE_CELL => ?_BLOCKNONCE_CELL_c89e25d9 )
                 </blockNonce>
                 <baseFee>
                   ( _BASEFEE_CELL => ?_BASEFEE_CELL_c89e25d9 )
                 </baseFee>
                 <ommerBlockHeaders>
                   ( _OMMERBLOCKHEADERS_CELL => ?_OMMERBLOCKHEADERS_CELL_c89e25d9 )
                 </ommerBlockHeaders>
               </block>
             </evm>
             <network>
               <chainID>
                 ( _CHAINID_CELL => ?_CHAINID_CELL_c89e25d9 )
               </chainID>
               <activeAccounts>
                 ( ( SetItem ( 1032069922050249630382865877677304880282300743300 ) ( SetItem ( 645326474426547203313410069153905908525362434349 ) ( SetItem ( 137122462167341575662000267002353578582749290296 ) SetItem ( 120209876281281145568259943 ) ) ) ) => ?_ACTIVEACCOUNTS_CELL_c89e25d9 )
               </activeAccounts>
               <accounts>
                 ( <account>
                   <acctID>
                     1032069922050249630382865877677304880282300743300
                   </acctID>
                   <balance>
                     ( 0 => ?_ACCT_BALANCE )
                   </balance>
                   <code>
                     #binRuntime ( AssertTest )
                   </code>
                   <storage>
                     ( _ACCT_STORAGE => ?_ACCT_STORAGE_FINAL )
                   </storage>
                   <nonce>
                     ( 0 => ?_ACCT_NONCE )
                   </nonce>
                   ...
                 </account>
                 ( <account>
                   <acctID>
                     137122462167341575662000267002353578582749290296
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     645326474426547203313410069153905908525362434349
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     b"\x00"
                   </code>
                   <storage>
                     ( CHEATCODE_STORAGE => ?CHEATCODE_STORAGE_FINAL )
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( <account>
                   <acctID>
                     120209876281281145568259943
                   </acctID>
                   <balance>
                     0
                   </balance>
                   <code>
                     .ByteArray
                   </code>
                   <storage>
                     .Map
                   </storage>
                   <origStorage>
                     .Map
                   </origStorage>
                   <nonce>
                     0
                   </nonce>
                 </account>
                 ( .Bag => ?_ACCOUNTS_FINAL ) ) ) ) )
               </accounts>
               <txOrder>
                 ( _TXORDER_CELL => ?_TXORDER_CELL_c89e25d9 )
               </txOrder>
               <txPending>
                 ( _TXPENDING_CELL => ?_TXPENDING_CELL_c89e25d9 )
               </txPending>
               <messages>
                 ( _MESSAGES_CELL => ?_MESSAGES_CELL_c89e25d9 )
               </messages>
             </network>
           </ethereum>
         </kevm>
      requires #lookup ( CHEATCODE_STORAGE , #loc ( FoundryCheat . Failed ) ) ==Int 0
       ensures foundry_success  ( ?STATUSCODE_FINAL , #lookup ( ?CHEATCODE_STORAGE_FINAL , #loc ( FoundryCheat . Failed ) ) )
      [label(asserttest-0)]

endmodule

