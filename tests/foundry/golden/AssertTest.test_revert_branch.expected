
┌─ OMITTED HASH (init, expanded)
│    k: #execute ~> CONTINUATION
│    pc: 0
│    callDepth: 0
│    statusCode: STATUSCODE
│    src: tests/foundry/test/Simple.t.sol:5:50
│
│  (515 steps)
├─ OMITTED HASH (split)
│    k: JUMPI 483 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
│    pc: 479
│    callDepth: 0
│    statusCode: STATUSCODE:StatusCode
│    src: tests/foundry/test/Simple.t.sol:22:23
┃
┣━━┓ constraint: { true #Equals VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int }
┃  │
┃  ├─ OMITTED HASH (split)
┃  │    k: JUMPI 483 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
┃  │    pc: 479
┃  │    callDepth: 0
┃  │    statusCode: STATUSCODE:StatusCode
┃  │    src: tests/foundry/test/Simple.t.sol:22:23
┃  ┃
┃  ┣━━┓ constraint: { true #Equals VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int }
┃  ┃  │
┃  ┃  └─ OMITTED HASH (split)
┃  ┃       k: JUMPI 483 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
┃  ┃       pc: 479
┃  ┃       callDepth: 0
┃  ┃       statusCode: STATUSCODE:StatusCode
┃  ┃       src: tests/foundry/test/Simple.t.sol:22:23
┃  ┃     (looped back)
┃  ┃
┃  ┗━━┓ constraint: { true #Equals ( notBool VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) }
┃     │
┃     ├─ OMITTED HASH (leaf)
┃     │    k: JUMPI 483 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
┃     │    pc: 479
┃     │    callDepth: 0
┃     │    statusCode: STATUSCODE:StatusCode
┃     │    src: tests/foundry/test/Simple.t.sol:22:23
┃     │
┃     ┊  constraint: false
┃     ┊  subst: .Subst
┃     └─ OMITTED HASH (target, leaf)
┃          k: #halt ~> CONTINUATION
┃          pc: PC_CELL_5d410f2a
┃          callDepth: CALLDEPTH_CELL_5d410f2a
┃          statusCode: STATUSCODE_FINAL
┃
┗━━┓ constraint: { true #Equals ( notBool VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) }
   │
   ├─ OMITTED HASH (split)
   │    k: JUMPI 483 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
   │    pc: 479
   │    callDepth: 0
   │    statusCode: STATUSCODE:StatusCode
   │    src: tests/foundry/test/Simple.t.sol:22:23
   ┃
   ┣━━┓ constraint: { true #Equals VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int }
   ┃  │
   ┃  └─ OMITTED HASH (leaf)
   ┃       k: JUMPI 483 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
   ┃       pc: 479
   ┃       callDepth: 0
   ┃       statusCode: STATUSCODE:StatusCode
   ┃       src: tests/foundry/test/Simple.t.sol:22:23
   ┃     (continues as previously)
   ┃
   ┗━━┓ constraint: { true #Equals ( notBool VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) }
      │
      └─ OMITTED HASH (split)
           k: JUMPI 483 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
           pc: 479
           callDepth: 0
           statusCode: STATUSCODE:StatusCode
           src: tests/foundry/test/Simple.t.sol:22:23
         (looped back)




module SUMMARY-ASSERTTEST-TEST-REVERT-BRANCH
    
    
           <kevm>
             <k>
               ( #execute
               ~> CONTINUATION => JUMPI 483 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int )
               ~> #pc [ JUMPI ]
               ~> #execute
               ~> CONTINUATION:K )
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               LONDON
             </schedule>
             <ethereum>
               <evm>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <callData>
                     ( AssertTest . test_revert_branch ( VV0_x_114b9705 : uint256 , VV1_y_114b9705 : uint256 ) => b"\x8c\x0e\xdd\x8b" +Bytes #buf ( 32 , VV0_x_114b9705:Int ) +Bytes #buf ( 32 , VV1_y_114b9705:Int ) )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( VV1_y_114b9705:Int : ( VV0_x_114b9705:Int : ( 185 : ( 2349784459 : .WordStack ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( .Bytes => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80" )
                   </localMem>
                   <memoryUsed>
                     ( 0 => 3 )
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( ( <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> => <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account> => <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account> ) )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <prevCaller>
                 .Account
               </prevCaller>
               <prevOrigin>
                 .Account
               </prevOrigin>
               <newCaller>
                 .Account
               </newCaller>
               <newOrigin>
                 .Account
               </newOrigin>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               <expectedAddress>
                 .Account
               </expectedAddress>
               <expectedValue>
                 0
               </expectedValue>
               <expectedData>
                 ( .Bytes => b"" )
               </expectedData>
               <opcodeType>
                 .OpcodeType
               </opcodeType>
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>

endmodule

