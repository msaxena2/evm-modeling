
┌─ 4 (init, expanded)
│    k: #execute ~> CONTINUATION
│    pc: 0
│    callDepth: 0
│    statusCode: STATUSCODE
│    src: tests/foundry/test/Simple.t.sol:5:48
│
│  (515 steps)
├─ 7 (split)
│    k: JUMPI 472 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
│    pc: 468
│    callDepth: 0
│    statusCode: STATUSCODE:StatusCode
│    src: tests/foundry/test/Simple.t.sol:18:19
┃
┃ (branch)
┣━━┓ constraint: { true #Equals VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int }
┃  │
┃  ├─ 9 (expanded)
┃  │    k: JUMPI 472 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
┃  │    pc: 468
┃  │    callDepth: 0
┃  │    statusCode: STATUSCODE:StatusCode
┃  │    src: tests/foundry/test/Simple.t.sol:18:19
┃  │
┃  │  (116 steps)
┃  ├─ 12 (expanded)
┃  │    k: #end EVMC_REVERT ~> #pc [ REVERT ] ~> #execute ~> CONTINUATION:K
┃  │    pc: 918
┃  │    callDepth: 0
┃  │    statusCode: STATUSCODE:StatusCode
┃  │
┃  │  (1 step)
┃  ├─ 16 (expanded)
┃  │    k: #halt ~> #pc [ REVERT ] ~> #execute ~> CONTINUATION:K
┃  │    pc: 918
┃  │    callDepth: 0
┃  │    statusCode: EVMC_REVERT
┃  │
┃  │  (2 steps)
┃  └─ 20 (expanded, stuck, leaf)
┃       k: #halt ~> CONTINUATION:K
┃       pc: 918
┃       callDepth: 0
┃       statusCode: EVMC_REVERT
┃     (stuck)
┃
┗━━┓ constraint: { true #Equals ( notBool VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) }
   │
   ├─ 10 (expanded)
   │    k: JUMPI 472 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int ) ~> #pc [ JUM ...
   │    pc: 468
   │    callDepth: 0
   │    statusCode: STATUSCODE:StatusCode
   │    src: tests/foundry/test/Simple.t.sol:18:19
   │
   │  (62 steps)
   ├─ 14 (expanded)
   │    k: #end EVMC_SUCCESS ~> #pc [ STOP ] ~> #execute ~> CONTINUATION:K
   │    pc: 175
   │    callDepth: 0
   │    statusCode: STATUSCODE:StatusCode
   │    src: tests/foundry/lib/forge-std/src/Script.sol:8:9
   │
   │  (1 step)
   ├─ 18 (expanded)
   │    k: #halt ~> #pc [ STOP ] ~> #execute ~> CONTINUATION:K
   │    pc: 175
   │    callDepth: 0
   │    statusCode: EVMC_SUCCESS
   │    src: tests/foundry/lib/forge-std/src/Script.sol:8:9
   │
   │  (2 steps)
   ├─ 22 (leaf)
   │    k: #halt ~> CONTINUATION:K
   │    pc: 175
   │    callDepth: 0
   │    statusCode: EVMC_SUCCESS
   │    src: tests/foundry/lib/forge-std/src/Script.sol:8:9
   │
   ┊  constraint: true
   ┊  subst: OMITTED SUBST
   └─ 3 (target, leaf)
        k: #halt ~> CONTINUATION
        pc: PC_CELL_5d410f2a
        callDepth: CALLDEPTH_CELL_5d410f2a
        statusCode: STATUSCODE_FINAL


Target Nodes:

3 (target, leaf)
 k: #halt ~> CONTINUATION
 pc: PC_CELL_5d410f2a
 callDepth: CALLDEPTH_CELL_5d410f2a
 statusCode: STATUSCODE_FINAL


Node 20:

( <generatedTop>
  <foundry>
    <kevm>
      <k>
        #halt
        ~> CONTINUATION:K
      </k>
      <mode>
        NORMAL
      </mode>
      <schedule>
        LONDON
      </schedule>
      <ethereum>
        <evm>
          <output>
            b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"
          </output>
          <statusCode>
            EVMC_REVERT
          </statusCode>
          <callStack>
            .List
          </callStack>
          <interimStates>
            .List
          </interimStates>
          <callState>
            <id>
              728815563385977040452943777879061427756277306518
            </id>
            <caller>
              CALLER_ID:Int
            </caller>
            <callData>
              b"\x8c\x0e\xdd\x8b" +Bytes #buf ( 32 , VV0_x_114b9705:Int ) +Bytes #buf ( 32 , VV1_y_114b9705:Int )
            </callData>
            <callValue>
              0
            </callValue>
            <wordStack>
              ( 480 : ( VV1_y_114b9705:Int : ( VV0_x_114b9705:Int : ( 174 : ( selector ( "test_revert_branch(uint256,uint256)" ) : .WordStack ) ) ) ) )
            </wordStack>
            <localMem>
              b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
            </localMem>
            <memoryUsed>
              3
            </memoryUsed>
            <static>
              false
            </static>
            <callDepth>
              0
            </callDepth>
            ...
          </callState>
          <substate>
            <log>
              .List
            </log>
            <accessedAccounts>
              .Set
            </accessedAccounts>
            <accessedStorage>
              .Map
            </accessedStorage>
            ...
          </substate>
          <origin>
            ORIGIN_ID:Int
          </origin>
          <block>
            <number>
              NUMBER_CELL:Int
            </number>
            ...
          </block>
          ...
        </evm>
        <network>
          <accounts>
            ( <account>
              <acctID>
                645326474426547203313410069153905908525362434349
              </acctID>
              <balance>
                0
              </balance>
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                0
              </nonce>
              ...
            </account>
            <account>
              <acctID>
                728815563385977040452943777879061427756277306518
              </acctID>
              <balance>
                0
              </balance>
              <storage>
                .Map
              </storage>
              <origStorage>
                .Map
              </origStorage>
              <nonce>
                1
              </nonce>
              ...
            </account> )
          </accounts>
          ...
        </network>
      </ethereum>
      ...
    </kevm>
    <cheatcodes>
      <prank>
        <prevCaller>
          .Account
        </prevCaller>
        <prevOrigin>
          .Account
        </prevOrigin>
        <newCaller>
          .Account
        </newCaller>
        <newOrigin>
          .Account
        </newOrigin>
        <active>
          false
        </active>
        <singleCall>
          false
        </singleCall>
        ...
      </prank>
      <expectedRevert>
        <isRevertExpected>
          false
        </isRevertExpected>
        ...
      </expectedRevert>
      <expectedOpcode>
        <isOpcodeExpected>
          false
        </isOpcodeExpected>
        <expectedAddress>
          .Account
        </expectedAddress>
        <expectedValue>
          0
        </expectedValue>
        <expectedData>
          b""
        </expectedData>
        <opcodeType>
          .OpcodeType
        </opcodeType>
      </expectedOpcode>
      <expectEmit>
        <recordEvent>
          false
        </recordEvent>
        <isEventExpected>
          false
        </isEventExpected>
        ...
      </expectEmit>
      <whitelist>
        <isCallWhitelistActive>
          false
        </isCallWhitelistActive>
        <isStorageWhitelistActive>
          false
        </isStorageWhitelistActive>
        <addressSet>
          .Set
        </addressSet>
        <storageSlotSet>
          .Set
        </storageSlotSet>
      </whitelist>
    </cheatcodes>
  </foundry>
  ...
</generatedTop>
#And ( { true #Equals 0 <=Int CALLER_ID:Int }
#And ( { true #Equals 0 <=Int ORIGIN_ID:Int }
#And ( { true #Equals 0 <=Int NUMBER_CELL:Int }
#And ( { true #Equals 0 <=Int VV0_x_114b9705:Int }
#And ( { true #Equals 0 <=Int VV1_y_114b9705:Int }
#And ( { true #Equals VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int }
#And ( { true #Equals CALLER_ID:Int <Int pow160 }
#And ( { true #Equals ORIGIN_ID:Int <Int pow160 }
#And ( { true #Equals NUMBER_CELL:Int <=Int maxSInt256 }
#And ( { true #Equals VV0_x_114b9705:Int <Int pow256 }
#And { true #Equals VV1_y_114b9705:Int <Int pow256 } ) ) ) ) ) ) ) ) ) ) )



module SUMMARY-ASSERTTEST-TEST-REVERT-BRANCH
    
    
           <kevm>
             <k>
               ( #execute
               ~> CONTINUATION => JUMPI 472 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int )
               ~> #pc [ JUMPI ]
               ~> #execute
               ~> CONTINUATION:K )
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               LONDON
             </schedule>
             <ethereum>
               <evm>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID
                   </caller>
                   <callData>
                     ( AssertTest . test_revert_branch ( VV0_x_114b9705 : uint256 , VV1_y_114b9705 : uint256 ) => b"\x8c\x0e\xdd\x8b" +Bytes #buf ( 32 , VV0_x_114b9705:Int ) +Bytes #buf ( 32 , VV1_y_114b9705:Int ) )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( .WordStack => ( VV1_y_114b9705:Int : ( VV0_x_114b9705:Int : ( 174 : ( selector ( "test_revert_branch(uint256,uint256)" ) : .WordStack ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( .Bytes => b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80" )
                   </localMem>
                   <memoryUsed>
                     ( 0 => 3 )
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <prevCaller>
                 .Account
               </prevCaller>
               <prevOrigin>
                 .Account
               </prevOrigin>
               <newCaller>
                 .Account
               </newCaller>
               <newOrigin>
                 .Account
               </newOrigin>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               <expectedAddress>
                 .Account
               </expectedAddress>
               <expectedValue>
                 0
               </expectedValue>
               <expectedData>
                 ( .Bytes => b"" )
               </expectedData>
               <opcodeType>
                 .OpcodeType
               </opcodeType>
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int VV0_x_114b9705:Int
       andBool ( 0 <=Int VV1_y_114b9705:Int
       andBool ( VV0_x_114b9705:Int <Int pow256
       andBool ( VV1_y_114b9705:Int <Int pow256
       andBool ( 0 <=Int CALLER_ID
       andBool ( CALLER_ID <Int pow160
       andBool ( 0 <=Int ORIGIN_ID
       andBool ( ORIGIN_ID <Int pow160
       andBool ( 0 <=Int NUMBER_CELL
       andBool ( NUMBER_CELL <=Int maxSInt256
       andBool ( 0 <=Int 9223372036854775807
       andBool ( 9223372036854775807 <Int pow256
       andBool ( 0 <=Int 728815563385977040452943777879061427756277306518
       andBool ( 728815563385977040452943777879061427756277306518 <Int pow160
       andBool ( lengthBytes ( AssertTest . test_revert_branch ( VV0_x_114b9705 : uint256 , VV1_y_114b9705 : uint256 ) ) <Int pow128
               )))))))))))))))
       ensures ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
               ))))))
    
           <kevm>
             <k>
               ( JUMPI 472 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int )
               ~> #pc [ JUMPI ] => #end EVMC_REVERT
               ~> #pc [ REVERT ] )
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               LONDON
             </schedule>
             <ethereum>
               <evm>
                 <output>
                   ( _OUTPUT_CELL => b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01" )
                 </output>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x8c\x0e\xdd\x8b" +Bytes #buf ( 32 , VV0_x_114b9705:Int ) +Bytes #buf ( 32 , VV1_y_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( ( VV1_y_114b9705:Int => 480 ) : ( ( VV0_x_114b9705:Int => VV1_y_114b9705:Int ) : ( ( 174 => VV0_x_114b9705:Int ) : ( ( selector ( "test_revert_branch(uint256,uint256)" ) => 174 ) : ( .WordStack => ( selector ( "test_revert_branch(uint256,uint256)" ) : .WordStack ) ) ) ) ) )
                   </wordStack>
                   <localMem>
                     ( b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80" => b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80" )
                   </localMem>
                   <memoryUsed>
                     3
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <prevCaller>
                 .Account
               </prevCaller>
               <prevOrigin>
                 .Account
               </prevOrigin>
               <newCaller>
                 .Account
               </newCaller>
               <newOrigin>
                 .Account
               </newOrigin>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               <expectedAddress>
                 .Account
               </expectedAddress>
               <expectedValue>
                 0
               </expectedValue>
               <expectedData>
                 b""
               </expectedData>
               <opcodeType>
                 .OpcodeType
               </opcodeType>
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <=Int VV0_x_114b9705:Int
       andBool ( 0 <=Int VV1_y_114b9705:Int
       andBool ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( VV0_x_114b9705:Int <Int pow256
       andBool ( VV1_y_114b9705:Int <Int pow256
               )))))))))))
    
           <kevm>
             <k>
               ( JUMPI 472 bool2Word ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int )
               ~> #pc [ JUMPI ] => #end EVMC_SUCCESS
               ~> #pc [ STOP ] )
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               LONDON
             </schedule>
             <ethereum>
               <evm>
                 <output>
                   ( _OUTPUT_CELL => b"" )
                 </output>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x8c\x0e\xdd\x8b" +Bytes #buf ( 32 , VV0_x_114b9705:Int ) +Bytes #buf ( 32 , VV1_y_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( ( VV1_y_114b9705:Int => selector ( "test_revert_branch(uint256,uint256)" ) ) : ( ( VV0_x_114b9705:Int : ( 174 : ( selector ( "test_revert_branch(uint256,uint256)" ) : .WordStack ) ) ) => .WordStack ) )
                   </wordStack>
                   <localMem>
                     b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   <memoryUsed>
                     3
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <prevCaller>
                 .Account
               </prevCaller>
               <prevOrigin>
                 .Account
               </prevOrigin>
               <newCaller>
                 .Account
               </newCaller>
               <newOrigin>
                 .Account
               </newOrigin>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               <expectedAddress>
                 .Account
               </expectedAddress>
               <expectedValue>
                 0
               </expectedValue>
               <expectedData>
                 b""
               </expectedData>
               <opcodeType>
                 .OpcodeType
               </opcodeType>
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <=Int VV0_x_114b9705:Int
       andBool ( 0 <=Int VV1_y_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( ( notBool VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int )
       andBool ( VV0_x_114b9705:Int <Int pow256
       andBool ( VV1_y_114b9705:Int <Int pow256
               )))))))))))
       ensures VV0_x_114b9705:Int <Int VV1_y_114b9705:Int
    
           <kevm>
             <k>
               ( #end EVMC_REVERT => #halt )
               ~> #pc [ REVERT ]
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               LONDON
             </schedule>
             <ethereum>
               <evm>
                 <output>
                   b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"
                 </output>
                 <statusCode>
                   ( _STATUSCODE => EVMC_REVERT )
                 </statusCode>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x8c\x0e\xdd\x8b" +Bytes #buf ( 32 , VV0_x_114b9705:Int ) +Bytes #buf ( 32 , VV1_y_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( 480 : ( VV1_y_114b9705:Int : ( VV0_x_114b9705:Int : ( 174 : ( selector ( "test_revert_branch(uint256,uint256)" ) : .WordStack ) ) ) ) )
                   </wordStack>
                   <localMem>
                     b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   <memoryUsed>
                     3
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <prevCaller>
                 .Account
               </prevCaller>
               <prevOrigin>
                 .Account
               </prevOrigin>
               <newCaller>
                 .Account
               </newCaller>
               <newOrigin>
                 .Account
               </newOrigin>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               <expectedAddress>
                 .Account
               </expectedAddress>
               <expectedValue>
                 0
               </expectedValue>
               <expectedData>
                 b""
               </expectedData>
               <opcodeType>
                 .OpcodeType
               </opcodeType>
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <=Int VV0_x_114b9705:Int
       andBool ( 0 <=Int VV1_y_114b9705:Int
       andBool ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( VV0_x_114b9705:Int <Int pow256
       andBool ( VV1_y_114b9705:Int <Int pow256
               )))))))))))
    
           <kevm>
             <k>
               ( #end EVMC_SUCCESS => #halt )
               ~> #pc [ STOP ]
               ~> #execute
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               LONDON
             </schedule>
             <ethereum>
               <evm>
                 <output>
                   b""
                 </output>
                 <statusCode>
                   ( _STATUSCODE => EVMC_SUCCESS )
                 </statusCode>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x8c\x0e\xdd\x8b" +Bytes #buf ( 32 , VV0_x_114b9705:Int ) +Bytes #buf ( 32 , VV1_y_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( selector ( "test_revert_branch(uint256,uint256)" ) : .WordStack )
                   </wordStack>
                   <localMem>
                     b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   <memoryUsed>
                     3
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <prevCaller>
                 .Account
               </prevCaller>
               <prevOrigin>
                 .Account
               </prevOrigin>
               <newCaller>
                 .Account
               </newCaller>
               <newOrigin>
                 .Account
               </newOrigin>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               <expectedAddress>
                 .Account
               </expectedAddress>
               <expectedValue>
                 0
               </expectedValue>
               <expectedData>
                 b""
               </expectedData>
               <opcodeType>
                 .OpcodeType
               </opcodeType>
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <=Int VV0_x_114b9705:Int
       andBool ( 0 <=Int VV1_y_114b9705:Int
       andBool ( VV0_x_114b9705:Int <Int VV1_y_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( VV0_x_114b9705:Int <Int pow256
       andBool ( VV1_y_114b9705:Int <Int pow256
               )))))))))))
    
           <kevm>
             <k>
               #halt
               ~> ( #pc [ REVERT ]
               ~> #execute => .K )
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               LONDON
             </schedule>
             <ethereum>
               <evm>
                 <output>
                   b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01"
                 </output>
                 <statusCode>
                   EVMC_REVERT
                 </statusCode>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x8c\x0e\xdd\x8b" +Bytes #buf ( 32 , VV0_x_114b9705:Int ) +Bytes #buf ( 32 , VV1_y_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( 480 : ( VV1_y_114b9705:Int : ( VV0_x_114b9705:Int : ( 174 : ( selector ( "test_revert_branch(uint256,uint256)" ) : .WordStack ) ) ) ) )
                   </wordStack>
                   <localMem>
                     b"NH{q\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   <memoryUsed>
                     3
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <prevCaller>
                 .Account
               </prevCaller>
               <prevOrigin>
                 .Account
               </prevOrigin>
               <newCaller>
                 .Account
               </newCaller>
               <newOrigin>
                 .Account
               </newOrigin>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               <expectedAddress>
                 .Account
               </expectedAddress>
               <expectedValue>
                 0
               </expectedValue>
               <expectedData>
                 b""
               </expectedData>
               <opcodeType>
                 .OpcodeType
               </opcodeType>
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <=Int VV0_x_114b9705:Int
       andBool ( 0 <=Int VV1_y_114b9705:Int
       andBool ( VV1_y_114b9705:Int <=Int VV0_x_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( VV0_x_114b9705:Int <Int pow256
       andBool ( VV1_y_114b9705:Int <Int pow256
               )))))))))))
    
           <kevm>
             <k>
               #halt
               ~> ( #pc [ STOP ]
               ~> #execute => .K )
               ~> _CONTINUATION
             </k>
             <mode>
               NORMAL
             </mode>
             <schedule>
               LONDON
             </schedule>
             <ethereum>
               <evm>
                 <output>
                   b""
                 </output>
                 <statusCode>
                   EVMC_SUCCESS
                 </statusCode>
                 <callStack>
                   .List
                 </callStack>
                 <interimStates>
                   .List
                 </interimStates>
                 <callState>
                   <id>
                     728815563385977040452943777879061427756277306518
                   </id>
                   <caller>
                     CALLER_ID:Int
                   </caller>
                   <callData>
                     b"\x8c\x0e\xdd\x8b" +Bytes #buf ( 32 , VV0_x_114b9705:Int ) +Bytes #buf ( 32 , VV1_y_114b9705:Int )
                   </callData>
                   <callValue>
                     0
                   </callValue>
                   <wordStack>
                     ( selector ( "test_revert_branch(uint256,uint256)" ) : .WordStack )
                   </wordStack>
                   <localMem>
                     b"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x80"
                   </localMem>
                   <memoryUsed>
                     3
                   </memoryUsed>
                   <static>
                     false
                   </static>
                   <callDepth>
                     0
                   </callDepth>
                   ...
                 </callState>
                 <substate>
                   <log>
                     .List
                   </log>
                   <accessedAccounts>
                     .Set
                   </accessedAccounts>
                   <accessedStorage>
                     .Map
                   </accessedStorage>
                   ...
                 </substate>
                 <origin>
                   ORIGIN_ID:Int
                 </origin>
                 <block>
                   <number>
                     NUMBER_CELL:Int
                   </number>
                   ...
                 </block>
                 ...
               </evm>
               <network>
                 <accounts>
                   ( <account>
                     <acctID>
                       645326474426547203313410069153905908525362434349
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       0
                     </nonce>
                     ...
                   </account>
                   <account>
                     <acctID>
                       728815563385977040452943777879061427756277306518
                     </acctID>
                     <balance>
                       0
                     </balance>
                     <storage>
                       .Map
                     </storage>
                     <origStorage>
                       .Map
                     </origStorage>
                     <nonce>
                       1
                     </nonce>
                     ...
                   </account> )
                 </accounts>
                 ...
               </network>
             </ethereum>
             ...
           </kevm>
           <cheatcodes>
             <prank>
               <prevCaller>
                 .Account
               </prevCaller>
               <prevOrigin>
                 .Account
               </prevOrigin>
               <newCaller>
                 .Account
               </newCaller>
               <newOrigin>
                 .Account
               </newOrigin>
               <active>
                 false
               </active>
               <singleCall>
                 false
               </singleCall>
               ...
             </prank>
             <expectedRevert>
               <isRevertExpected>
                 false
               </isRevertExpected>
               ...
             </expectedRevert>
             <expectedOpcode>
               <isOpcodeExpected>
                 false
               </isOpcodeExpected>
               <expectedAddress>
                 .Account
               </expectedAddress>
               <expectedValue>
                 0
               </expectedValue>
               <expectedData>
                 b""
               </expectedData>
               <opcodeType>
                 .OpcodeType
               </opcodeType>
             </expectedOpcode>
             <expectEmit>
               <recordEvent>
                 false
               </recordEvent>
               <isEventExpected>
                 false
               </isEventExpected>
               ...
             </expectEmit>
             <whitelist>
               <isCallWhitelistActive>
                 false
               </isCallWhitelistActive>
               <isStorageWhitelistActive>
                 false
               </isStorageWhitelistActive>
               <addressSet>
                 .Set
               </addressSet>
               <storageSlotSet>
                 .Set
               </storageSlotSet>
             </whitelist>
           </cheatcodes>
         </foundry>
      requires ( 0 <=Int CALLER_ID:Int
       andBool ( 0 <=Int ORIGIN_ID:Int
       andBool ( 0 <=Int NUMBER_CELL:Int
       andBool ( 0 <=Int VV0_x_114b9705:Int
       andBool ( 0 <=Int VV1_y_114b9705:Int
       andBool ( VV0_x_114b9705:Int <Int VV1_y_114b9705:Int
       andBool ( CALLER_ID:Int <Int pow160
       andBool ( ORIGIN_ID:Int <Int pow160
       andBool ( NUMBER_CELL:Int <=Int maxSInt256
       andBool ( VV0_x_114b9705:Int <Int pow256
       andBool ( VV1_y_114b9705:Int <Int pow256
               )))))))))))

endmodule

