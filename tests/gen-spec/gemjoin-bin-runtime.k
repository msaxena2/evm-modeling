requires "edsl.md"

module GEMJOIN-BIN-RUNTIME
    imports public BIN-RUNTIME
    
    syntax Contract ::= GemJoinContract 
    
    syntax GemJoinContract ::= "GemJoin" [klabel(contract_GemJoin), symbol()]
    
    syntax GemJoinStorage ::= "wards" "[" Int "]" 
    
    syntax GemJoinStorage ::= "live" 
    
    syntax Int ::= GemJoinContract "." GemJoinStorage [klabel(storage_GemJoin), alias()]
    
    rule  ( GemJoin.wards[V0] => #hashedLocation("Solidity", 0 +Int 0, V0) )
      
    
    rule  ( GemJoin.live => 0 +Int 1 )
      
    
    syntax ByteArray ::= GemJoinContract "." GemJoinFunction [klabel(function_GemJoin), symbol(), function()]
    
    syntax GemJoinFunction ::= "cage" "(" ")" 
    
    syntax GemJoinFunction ::= "dec" "(" ")" 
    
    syntax GemJoinFunction ::= "deny" "(" Int ")" 
    
    syntax GemJoinFunction ::= "exit" "(" Int "," Int ")" 
    
    syntax GemJoinFunction ::= "gem" "(" ")" 
    
    syntax GemJoinFunction ::= "ilk" "(" ")" 
    
    syntax GemJoinFunction ::= "join" "(" Int "," Int ")" 
    
    syntax GemJoinFunction ::= "live" "(" ")" 
    
    syntax GemJoinFunction ::= "rely" "(" Int ")" 
    
    syntax GemJoinFunction ::= "vat" "(" ")" 
    
    syntax GemJoinFunction ::= "wards" "(" Int ")" 
    
    rule  ( GemJoin.cage() => #abiCallData("cage", .TypedArgs) )
      
    
    rule  ( GemJoin.dec() => #abiCallData("dec", .TypedArgs) )
      
    
    rule  ( GemJoin.deny(USR) => #abiCallData("deny", #address( USR )) )
       ensures #rangeAddress(USR)
      
    
    rule  ( GemJoin.exit(USR, WAD) => #abiCallData("exit", #address( USR ), #uint256( WAD )) )
       ensures ( #rangeAddress(USR)
       andBool ( #rangeUInt(256, WAD)
               ))
      
    
    rule  ( GemJoin.gem() => #abiCallData("gem", .TypedArgs) )
      
    
    rule  ( GemJoin.ilk() => #abiCallData("ilk", .TypedArgs) )
      
    
    rule  ( GemJoin.join(USR, WAD) => #abiCallData("join", #address( USR ), #uint256( WAD )) )
       ensures ( #rangeAddress(USR)
       andBool ( #rangeUInt(256, WAD)
               ))
      
    
    rule  ( GemJoin.live() => #abiCallData("live", .TypedArgs) )
      
    
    rule  ( GemJoin.rely(USR) => #abiCallData("rely", #address( USR )) )
       ensures #rangeAddress(USR)
      
    
    rule  ( GemJoin.vat() => #abiCallData("vat", .TypedArgs) )
      
    
    rule  ( GemJoin.wards(V0) => #abiCallData("wards", #address( V0 )) )
       ensures #rangeAddress(V0)
      
    
    rule  ( #binRuntime(GemJoin) => #parseByteStack( "" ) )
      
    
    rule  ( selector("cage") => 1763987465 )
      
    
    rule  ( selector("dec") => 3015506562 )
      
    
    rule  ( selector("deny") => 2622662641 )
      
    
    rule  ( selector("exit") => 4016651245 )
      
    
    rule  ( selector("gem") => 2077408935 )
      
    
    rule  ( selector("ilk") => 3318622238 )
      
    
    rule  ( selector("join") => 994944671 )
      
    
    rule  ( selector("live") => 2507842956 )
      
    
    rule  ( selector("rely") => 1710941022 )
      
    
    rule  ( selector("vat") => 911646327 )
      
    
    rule  ( selector("wards") => 3207937467 )
      

endmodule

