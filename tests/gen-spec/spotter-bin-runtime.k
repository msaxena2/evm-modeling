requires "edsl.md"

module SPOTTER-BIN-RUNTIME
    imports public BIN-RUNTIME
    
    syntax Contract ::= SpotterContract 
    
    syntax SpotterContract ::= "Spotter" [klabel(contract_Spotter), symbol()]
    
    syntax SpotterStorage ::= "wards" "[" Int "]" 
    
    syntax SpotterStorage ::= "ilks" "[" Int "]" "." "pip" 
    
    syntax SpotterStorage ::= "ilks" "[" Int "]" "." "mat" 
    
    syntax SpotterStorage ::= "par" 
    
    syntax SpotterStorage ::= "live" 
    
    syntax Int ::= SpotterContract "." SpotterStorage [klabel(storage_Spotter), alias()]
    
    rule  ( Spotter.wards[V0] => #hashedLocation("Solidity", 0 +Int 0, V0) )
      
    
    rule  ( Spotter.ilks[V0].pip => #hashedLocation("Solidity", 0 +Int 1, V0) +Int 0 )
      
    
    rule  ( Spotter.ilks[V0].mat => #hashedLocation("Solidity", 0 +Int 1, V0) +Int 1 )
      
    
    rule  ( Spotter.par => 0 +Int 2 )
      
    
    rule  ( Spotter.live => 0 +Int 3 )
      
    
    syntax ByteArray ::= SpotterContract "." SpotterFunction [klabel(function_Spotter), symbol(), function()]
    
    syntax SpotterFunction ::= "cage" "(" ")" 
    
    syntax SpotterFunction ::= "deny" "(" Int ")" 
    
    syntax SpotterFunction ::= "file" "(" Int "," Int "," Int ")" 
    
    syntax SpotterFunction ::= "file" "(" Int "," Int ")" 
    
    syntax SpotterFunction ::= "file" "(" Int "," Int "," Int ")" 
    
    syntax SpotterFunction ::= "ilks" "(" Int ")" 
    
    syntax SpotterFunction ::= "live" "(" ")" 
    
    syntax SpotterFunction ::= "par" "(" ")" 
    
    syntax SpotterFunction ::= "poke" "(" Int ")" 
    
    syntax SpotterFunction ::= "rely" "(" Int ")" 
    
    syntax SpotterFunction ::= "vat" "(" ")" 
    
    syntax SpotterFunction ::= "wards" "(" Int ")" 
    
    rule  ( Spotter.cage() => #abiCallData("cage", .TypedArgs) )
      
    
    rule  ( Spotter.deny(USR) => #abiCallData("deny", #address( USR )) )
       ensures #rangeAddress(USR)
      
    
    rule  ( Spotter.file(ILK, WHAT, DATA) => #abiCallData("file", #bytes32( ILK ), #bytes32( WHAT ), #uint256( DATA )) )
       ensures ( #rangeUInt(256, ILK)
       andBool ( #rangeUInt(256, WHAT)
       andBool ( #rangeUInt(256, DATA)
               )))
      
    
    rule  ( Spotter.file(WHAT, DATA) => #abiCallData("file", #bytes32( WHAT ), #uint256( DATA )) )
       ensures ( #rangeUInt(256, WHAT)
       andBool ( #rangeUInt(256, DATA)
               ))
      
    
    rule  ( Spotter.file(ILK, WHAT, DATA) => #abiCallData("file", #bytes32( ILK ), #bytes32( WHAT ), #address( DATA )) )
       ensures ( #rangeUInt(256, ILK)
       andBool ( #rangeUInt(256, WHAT)
       andBool ( #rangeAddress(DATA)
               )))
      
    
    rule  ( Spotter.ilks(V0) => #abiCallData("ilks", #bytes32( V0 )) )
       ensures #rangeUInt(256, V0)
      
    
    rule  ( Spotter.live() => #abiCallData("live", .TypedArgs) )
      
    
    rule  ( Spotter.par() => #abiCallData("par", .TypedArgs) )
      
    
    rule  ( Spotter.poke(ILK) => #abiCallData("poke", #bytes32( ILK )) )
       ensures #rangeUInt(256, ILK)
      
    
    rule  ( Spotter.rely(USR) => #abiCallData("rely", #address( USR )) )
       ensures #rangeAddress(USR)
      
    
    rule  ( Spotter.vat() => #abiCallData("vat", .TypedArgs) )
      
    
    rule  ( Spotter.wards(V0) => #abiCallData("wards", #address( V0 )) )
       ensures #rangeAddress(V0)
      
    
    rule  ( #binRuntime(Spotter) => #parseByteStack( "0x608060405234801561001057600080fd5b50600436106100b45760003560e01c806369245009116100715780636924500914610165578063957aa58c1461016f5780639c52a7f11461018d578063bf353dbb146101a9578063d9638d36146101d9578063ebecb39d1461020a576100b4565b80631504460f146100b95780631a0b287e146100d557806329ae8114146100f157806336569e771461010d578063495d32cb1461012b57806365fae35e14610149575b600080fd5b6100d360048036038101906100ce9190610c6b565b610226565b005b6100ef60048036038101906100ea9190610cce565b610421565b005b61010b60048036038101906101069190610d21565b6105a7565b005b610115610717565b6040516101229190610de0565b60405180910390f35b61013361073b565b6040516101409190610e0a565b60405180910390f35b610163600480360381019061015e9190610e63565b610741565b005b61016d61084c565b005b610177610903565b6040516101849190610e0a565b60405180910390f35b6101a760048036038101906101a29190610e63565b610909565b005b6101c360048036038101906101be9190610e63565b610a14565b6040516101d09190610e0a565b60405180910390f35b6101f360048036038101906101ee9190610c6b565b610a2c565b604051610201929190610eb1565b60405180910390f35b610224600480360381019061021f9190610eda565b610a70565b005b6000806001600084815260200190815260200160002060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166359e02dd76040518163ffffffff1660e01b815260040160408051808303816000875af11580156102ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102cf9190610f7a565b915091506000816102e1576000610351565b60016000858152602001908152602001600020600101546b033b2e3c9fd0803ce80000006002546b033b2e3c9fd0803ce8000000633b9aca008760001c6103289190610fe9565b6103329190610fe9565b61033c9190611072565b6103469190610fe9565b6103509190611072565b5b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16631a0b287e85836040518363ffffffff1660e01b81526004016103ae9291906110d8565b600060405180830381600087803b1580156103c857600080fd5b505af11580156103dc573d6000803e3d6000fd5b505050507fdfd7467e425a8107cfd368d159957692c25085aacbcf5228ce08f10f2146486e8484836040516104139392919061110d565b60405180910390a150505050565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146104a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610499906111a1565b60405180910390fd5b6001600354146104e7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104de9061120d565b60405180910390fd5b7f6d61740000000000000000000000000000000000000000000000000000000000820361052e57806001600085815260200190815260200160002060010181905550610569565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056090611279565b60405180910390fd5b81837f851aa1caf4888170ad8875449d18f0f512fd6deb2a6571ea1a41fb9f95acbcd18360405161059a9190610e0a565b60405180910390a3505050565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610628576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161061f906111a1565b60405180910390fd5b60016003541461066d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106649061120d565b60405180910390fd5b7f706172000000000000000000000000000000000000000000000000000000000082036106a057806002819055506106db565b6040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106d290611279565b60405180910390fd5b817fe986e40cc8c151830d4f61050f4fb2e4add8567caad2d5f5496f9158e91fe4c78260405161070b9190610e0a565b60405180910390a25050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60025481565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146107c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b9906111a1565b60405180910390fd5b60016000808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167fdd0e34038ac38b2a1ce960229778ac48a8719bc900b6c4f8d0475c6e8b385a6060405160405180910390a250565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054146108cd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c4906111a1565b60405180910390fd5b60006003819055507f2308ed18a14e800c39b86eb6ea43270105955ca385b603b64eca89f98ae8fbda60405160405180910390a1565b60035481565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541461098a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610981906111a1565b60405180910390fd5b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508073ffffffffffffffffffffffffffffffffffffffff167f184450df2e323acec0ed3b5c7531b81f9b4cdef7914dfd4c0a4317416bb5251b60405160405180910390a250565b60006020528060005260406000206000915090505481565b60016020528060005260406000206000915090508060000160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16908060010154905082565b60016000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205414610af1576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610ae8906111a1565b60405180910390fd5b600160035414610b36576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b2d9061120d565b60405180910390fd5b7f70697000000000000000000000000000000000000000000000000000000000008203610bb757806001600085815260200190815260200160002060000160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550610bf2565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610be990611279565b60405180910390fd5b81837f4ff2caaa972a7c6629ea01fae9c93d73cc307d13ea4c369f9bbbb7f9b7e9461d83604051610c2391906112a8565b60405180910390a3505050565b600080fd5b6000819050919050565b610c4881610c35565b8114610c5357600080fd5b50565b600081359050610c6581610c3f565b92915050565b600060208284031215610c8157610c80610c30565b5b6000610c8f84828501610c56565b91505092915050565b6000819050919050565b610cab81610c98565b8114610cb657600080fd5b50565b600081359050610cc881610ca2565b92915050565b600080600060608486031215610ce757610ce6610c30565b5b6000610cf586828701610c56565b9350506020610d0686828701610c56565b9250506040610d1786828701610cb9565b9150509250925092565b60008060408385031215610d3857610d37610c30565b5b6000610d4685828601610c56565b9250506020610d5785828601610cb9565b9150509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000610da6610da1610d9c84610d61565b610d81565b610d61565b9050919050565b6000610db882610d8b565b9050919050565b6000610dca82610dad565b9050919050565b610dda81610dbf565b82525050565b6000602082019050610df56000830184610dd1565b92915050565b610e0481610c98565b82525050565b6000602082019050610e1f6000830184610dfb565b92915050565b6000610e3082610d61565b9050919050565b610e4081610e25565b8114610e4b57600080fd5b50565b600081359050610e5d81610e37565b92915050565b600060208284031215610e7957610e78610c30565b5b6000610e8784828501610e4e565b91505092915050565b6000610e9b82610dad565b9050919050565b610eab81610e90565b82525050565b6000604082019050610ec66000830185610ea2565b610ed36020830184610dfb565b9392505050565b600080600060608486031215610ef357610ef2610c30565b5b6000610f0186828701610c56565b9350506020610f1286828701610c56565b9250506040610f2386828701610e4e565b9150509250925092565b600081519050610f3c81610c3f565b92915050565b60008115159050919050565b610f5781610f42565b8114610f6257600080fd5b50565b600081519050610f7481610f4e565b92915050565b60008060408385031215610f9157610f90610c30565b5b6000610f9f85828601610f2d565b9250506020610fb085828601610f65565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ff482610c98565b9150610fff83610c98565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048311821515161561103857611037610fba565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061107d82610c98565b915061108883610c98565b92508261109857611097611043565b5b828204905092915050565b6110ac81610c35565b82525050565b7f73706f7400000000000000000000000000000000000000000000000000000000815250565b60006060820190506110ed60008301856110a3565b6110f9602083016110b2565b6111066040830184610dfb565b9392505050565b600060608201905061112260008301866110a3565b61112f60208301856110a3565b61113c6040830184610dfb565b949350505050565b600082825260208201905092915050565b7f53706f747465722f6e6f742d617574686f72697a656400000000000000000000600082015250565b600061118b601683611144565b915061119682611155565b602082019050919050565b600060208201905081810360008301526111ba8161117e565b9050919050565b7f53706f747465722f6e6f742d6c69766500000000000000000000000000000000600082015250565b60006111f7601083611144565b9150611202826111c1565b602082019050919050565b60006020820190508181036000830152611226816111ea565b9050919050565b7f53706f747465722f66696c652d756e7265636f676e697a65642d706172616d00600082015250565b6000611263601f83611144565b915061126e8261122d565b602082019050919050565b6000602082019050818103600083015261129281611256565b9050919050565b6112a281610e25565b82525050565b60006020820190506112bd6000830184611299565b9291505056fea264697066735822122013e49bb455e08dbb528b352d9fc1742d2f5877631b7b2b05baf8b8aaa3e35a2a64736f6c637828302e382e31332d646576656c6f702e323032322e342e32362b636f6d6d69742e61626161356330650059" ) )
      
    
    rule  ( selector("cage") => 1763987465 )
      
    
    rule  ( selector("deny") => 2622662641 )
      
    
    rule  ( selector("file") => 3958158237 )
      
    
    rule  ( selector("file") => 436938878 )
      
    
    rule  ( selector("file") => 699302164 )
      
    
    rule  ( selector("ilks") => 3647180086 )
      
    
    rule  ( selector("live") => 2507842956 )
      
    
    rule  ( selector("par") => 1230844619 )
      
    
    rule  ( selector("poke") => 352601615 )
      
    
    rule  ( selector("rely") => 1710941022 )
      
    
    rule  ( selector("vat") => 911646327 )
      
    
    rule  ( selector("wards") => 3207937467 )
      

endmodule

