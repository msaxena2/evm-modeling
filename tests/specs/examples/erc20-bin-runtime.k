requires "edsl.md"

module ERC20-BIN-RUNTIME
    imports public EDSL
    
    syntax ERC20Contract ::= "ERC20" [klabel(contract_ERC20)]
    
    syntax ERC20Storage ::= "_balances" "[" Int "]" 
    
    syntax ERC20Storage ::= "_allowances" "[" Int "]" "[" Int "]" 
    
    syntax ERC20Storage ::= "_totalSupply" 
    
    syntax ERC20Storage ::= "_decimals" 
    
    syntax ERC20Storage ::= "_name" 
    
    syntax ERC20Storage ::= "_symbol" 
    
    syntax Int ::= ERC20Contract "." ERC20Storage [klabel(storage_ERC20), alias()]
    
    rule  ( ERC20._balances[V0] => #hashedLocation("Solidity", 0 +Int 0, V0) )
      
    
    rule  ( ERC20._allowances[V0][V1] => #hashedLocation("Solidity", #hashedLocation("Solidity", 0 +Int 1, V0), V1) )
      
    
    rule  ( ERC20._totalSupply => 0 +Int 2 )
      
    
    rule  ( ERC20._decimals => 0 +Int 3 )
      
    
    rule  ( ERC20._name => 0 +Int 4 )
      
    
    rule  ( ERC20._symbol => 0 +Int 5 )
      
    
    syntax ByteArray ::= ERC20Contract "." ERC20Function [klabel(function_ERC20), function()]
    
    syntax ERC20Function ::= "allowance" "(" Int "," Int ")" 
    
    syntax ERC20Function ::= "approve" "(" Int "," Int ")" 
    
    syntax ERC20Function ::= "balanceOf" "(" Int ")" 
    
    syntax ERC20Function ::= "decimals" "(" ")" 
    
    syntax ERC20Function ::= "name" "(" ")" 
    
    syntax ERC20Function ::= "symbol" "(" ")" 
    
    syntax ERC20Function ::= "totalSupply" "(" ")" 
    
    syntax ERC20Function ::= "transfer" "(" Int "," Int ")" 
    
    syntax ERC20Function ::= "transferFrom" "(" Int "," Int "," Int ")" 
    
    rule  ( ERC20.allowance(OWNER, SPENDER) => #abiCallData("allowance", #address(OWNER), #address(SPENDER)) )
       ensures ( #rangeAddress(OWNER)
       andBool ( #rangeAddress(SPENDER)
               ))
      
    
    rule  ( ERC20.approve(SPENDER, AMOUNT) => #abiCallData("approve", #address(SPENDER), #uint256(AMOUNT)) )
       ensures ( #rangeAddress(SPENDER)
       andBool ( #rangeUInt(256, AMOUNT)
               ))
      
    
    rule  ( ERC20.balanceOf(ACCOUNT) => #abiCallData("balanceOf", #address(ACCOUNT)) )
       ensures #rangeAddress(ACCOUNT)
      
    
    rule  ( ERC20.decimals() => #abiCallData("decimals", .TypedArgs) )
      
    
    rule  ( ERC20.name() => #abiCallData("name", .TypedArgs) )
      
    
    rule  ( ERC20.symbol() => #abiCallData("symbol", .TypedArgs) )
      
    
    rule  ( ERC20.totalSupply() => #abiCallData("totalSupply", .TypedArgs) )
      
    
    rule  ( ERC20.transfer(TO, AMOUNT) => #abiCallData("transfer", #address(TO), #uint256(AMOUNT)) )
       ensures ( #rangeAddress(TO)
       andBool ( #rangeUInt(256, AMOUNT)
               ))
      
    
    rule  ( ERC20.transferFrom(FROM, TO, AMOUNT) => #abiCallData("transferFrom", #address(FROM), #address(TO), #uint256(AMOUNT)) )
       ensures ( #rangeAddress(FROM)
       andBool ( #rangeAddress(TO)
       andBool ( #rangeUInt(256, AMOUNT)
               )))
      
    
    syntax ByteArray ::= "#binRuntime" "(" ERC20Contract ")" [klabel(binRuntime), alias()]
    
    rule  ( #binRuntime(ERC20) => #parseByteStack( "0x608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce5671461013457806370a082311461015257806395d89b4114610182578063a9059cbb146101a0578063dd62ed3e146101d057610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a0610200565b6040516100ad919061098f565b60405180910390f35b6100d060048036038101906100cb9190610a4a565b610292565b6040516100dd9190610aa5565b60405180910390f35b6100ee6102a9565b6040516100fb9190610acf565b60405180910390f35b61011e60048036038101906101199190610aea565b6102b3565b60405161012b9190610aa5565b60405180910390f35b61013c6103a6565b6040516101499190610acf565b60405180910390f35b61016c60048036038101906101679190610b3d565b6103c0565b6040516101799190610acf565b60405180910390f35b61018a610408565b604051610197919061098f565b60405180910390f35b6101ba60048036038101906101b59190610a4a565b61049a565b6040516101c79190610aa5565b60405180910390f35b6101ea60048036038101906101e59190610b6a565b6104b1565b6040516101f79190610acf565b60405180910390f35b60606004805461020f90610bd9565b80601f016020809104026020016040519081016040528092919081815260200182805461023b90610bd9565b80156102885780601f1061025d57610100808354040283529160200191610288565b820191906000526020600020905b81548152906001019060200180831161026b57829003601f168201915b5050505050905090565b600061029f338484610538565b6001905092915050565b6000600254905090565b60006102c084848461069e565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610384576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037b90610c7d565b60405180910390fd5b61039a853385846103959190610ccc565b610538565b60019150509392505050565b6000600360009054906101000a900460ff1660ff16905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606005805461041790610bd9565b80601f016020809104026020016040519081016040528092919081815260200182805461044390610bd9565b80156104905780601f1061046557610100808354040283529160200191610490565b820191906000526020600020905b81548152906001019060200180831161047357829003601f168201915b5050505050905090565b60006104a733848461069e565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156105a8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161059f90610d72565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610618576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161060f90610e04565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561070e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161070590610e96565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561077e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161077590610f28565b60405180910390fd5b60008060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905060008060008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083e90610fba565b60405180910390fd5b600083826108559190610ccc565b9050600084846108659190610fda565b9050816000808973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550806000808873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050505050505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610930578082015181840152602081019050610915565b8381111561093f576000848401525b50505050565b6000601f19601f8301169050919050565b6000610961826108f6565b61096b8185610901565b935061097b818560208601610912565b61098481610945565b840191505092915050565b600060208201905081810360008301526109a98184610956565b905092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006109e1826109b6565b9050919050565b6109f1816109d6565b81146109fc57600080fd5b50565b600081359050610a0e816109e8565b92915050565b6000819050919050565b610a2781610a14565b8114610a3257600080fd5b50565b600081359050610a4481610a1e565b92915050565b60008060408385031215610a6157610a606109b1565b5b6000610a6f858286016109ff565b9250506020610a8085828601610a35565b9150509250929050565b60008115159050919050565b610a9f81610a8a565b82525050565b6000602082019050610aba6000830184610a96565b92915050565b610ac981610a14565b82525050565b6000602082019050610ae46000830184610ac0565b92915050565b600080600060608486031215610b0357610b026109b1565b5b6000610b11868287016109ff565b9350506020610b22868287016109ff565b9250506040610b3386828701610a35565b9150509250925092565b600060208284031215610b5357610b526109b1565b5b6000610b61848285016109ff565b91505092915050565b60008060408385031215610b8157610b806109b1565b5b6000610b8f858286016109ff565b9250506020610ba0858286016109ff565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bf157607f821691505b60208210811415610c0557610c04610baa565b5b50919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206160008201527f6c6c6f77616e6365000000000000000000000000000000000000000000000000602082015250565b6000610c67602883610901565b9150610c7282610c0b565b604082019050919050565b60006020820190508181036000830152610c9681610c5a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610cd782610a14565b9150610ce283610a14565b925082821015610cf557610cf4610c9d565b5b828203905092915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610d5c602483610901565b9150610d6782610d00565b604082019050919050565b60006020820190508181036000830152610d8b81610d4f565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610dee602283610901565b9150610df982610d92565b604082019050919050565b60006020820190508181036000830152610e1d81610de1565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000610e80602583610901565b9150610e8b82610e24565b604082019050919050565b60006020820190508181036000830152610eaf81610e73565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000610f12602383610901565b9150610f1d82610eb6565b604082019050919050565b60006020820190508181036000830152610f4181610f05565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000610fa4602683610901565b9150610faf82610f48565b604082019050919050565b60006020820190508181036000830152610fd381610f97565b9050919050565b6000610fe582610a14565b9150610ff083610a14565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0382111561102557611024610c9d565b5b82820190509291505056fea26469706673582212202e2dc6ac9cc87eaf69f4348eeb56b9df61e0e7a10fc98299772bfb4e8a91089164736f6c637828302e382e31302d646576656c6f702e323032312e31322e322b636f6d6d69742e66633431303833300059" ) )
      
    
    syntax Int ::= "selector" "(" String ")" [klabel(abi_selector), alias()]
    
    rule  ( selector("allowance") => 3714247998 )
      
    
    rule  ( selector("approve") => 157198259 )
      
    
    rule  ( selector("balanceOf") => 1889567281 )
      
    
    rule  ( selector("decimals") => 826074471 )
      
    
    rule  ( selector("name") => 117300739 )
      
    
    rule  ( selector("symbol") => 2514000705 )
      
    
    rule  ( selector("totalSupply") => 404098525 )
      
    
    rule  ( selector("transfer") => 2835717307 )
      
    
    rule  ( selector("transferFrom") => 599290589 )
      

endmodule
