#!/usr/bin/env bash

set -euo pipefail
shopt -s extglob

notif() { echo "== $@" >&2 ; }
fatal() { echo "[FATAL] $@" ; exit 1 ; }

check_k_install() {
    which kast &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
    which krun &> /dev/null \
        || fatal "Must have K installed! See https://github.com/kframework/k/releases."
}

INSTALL_BIN="$(cd $(dirname $0) && pwd)"
INSTALL_LIB="$(dirname ${INSTALL_BIN})/lib/kevm"
INSTALL_INCLUDE=${INSTALL_LIB}/include

install_k_bin=${INSTALL_LIB}/kframework/bin
plugin_include=${INSTALL_LIB}/blockchain-k-plugin/include
libff_dir=${INSTALL_LIB}/libff

export PATH="$install_k_bin:$INSTALL_BIN:$INSTALL_LIB:$PATH"
export LD_LIBRARY_PATH=${LD_LIBRARY_PATH:-}:/usr/local/lib

export K_OPTS="${K_OPTS:--Xmx16G -Xss512m}"

export KLAB_OUT="${KLAB_OUT:-~/.klab}"

# Runners
# -------

# User Commands

run_kompile() {
    local kompile_opts openssl_root

    kompile_opts=(  --backend "${backend}" "${run_file}"                                 )
    kompile_opts+=( -I "${INSTALL_INCLUDE}/kframework" -I "${plugin_include}/kframework" )
    kompile_opts+=( --hook-namespaces "JSON KRYPTO"                                      )
    kompile_opts+=( --emit-json                                                          )
    case "${backend}" in
        haskell)    kompile_opts+=( --md-selector 'k & ! nobytes' )
                    ;;
        java)       kompile_opts+=( --md-selector 'k & ! bytes' )
                    ;;
        llvm)       kompile_opts+=( --md-selector 'k & ! nobytes'                                                 )
                    kompile_opts+=( -ccopt -L${libff_dir}/lib -ccopt -I${libff_dir}/include                       )
                    kompile_opts+=( -ccopt ${plugin_include}/c/plugin_util.cpp                                    )
                    kompile_opts+=( -ccopt ${plugin_include}/c/crypto.cpp                                         )
                    kompile_opts+=( -ccopt ${plugin_include}/c/blake2.cpp                                         )
                    kompile_opts+=( -ccopt -g -ccopt -std=c++14                                                   )
                    kompile_opts+=( -ccopt -lff -ccopt -lcryptopp -ccopt -lsecp256k1 -ccopt -lssl -ccopt -lcrypto )
                    if [[ "$(uname -s)" == 'Linux' ]]; then
                        kompile_opts+=( -ccopt -lprocps )
                    elif [[ "$(uname -s)" == 'Darwin' ]]; then
                        openssl_root="$(brew --prefix openssl)"
                        kompile_opts+=( -I/usr/local/include -L/usr/local/lib -I${openssl_root}/include -L${openssl_root}/lib )
                    fi
                 ;;
        *)       fatal "Unknown backend for kompile: ${backend}" ;;
    esac
    kompile "${kompile_opts[@]}" "$@"
}

run_krun() {
    local cschedule cmode cchainid parser

    check_k_install

    case "$backend" in
        java)
            cschedule=$cSCHEDULE_kast
            cmode=$cMODE_kast
            cchainid=$cCHAINID_kast
            parser='printf %s'
            ;;
        *)
            cschedule=$cSCHEDULE_kore
            cmode=$cMODE_kore
            cchainid=$cCHAINID_kore
            parser='cat'
            ;;
    esac
    krun --directory "$backend_dir"                   \
         -cSCHEDULE="$cschedule" -pSCHEDULE="$parser" \
         -cMODE="$cmode"         -pMODE="$parser"     \
         -cCHAINID="$cchainid"   -pCHAINID="$parser"  \
         "$run_file" "$@"
}

run_kast() {
    local output_mode

    output_mode="${1:-kore}" ; shift

    case "$run_file-$output_mode" in
        *.json-kast) kast-json.py "$run_file" "$cSCHEDULE_kast" "$cMODE_kast" "$cCHAINID_kast"                  ;;
        *.json-kore) kore-json.py "$run_file" "$cSCHEDULE_kore" "$cMODE_kore" "$cCHAINID_kore"                  ;;
        *)           check_k_install ; kast --directory "$backend_dir" "$run_file" --output "$output_mode" "$@" ;;
    esac
}

run_prove() {
    local def_module run_dir proof_args haskell_backend_command bug_report_name eventlog_name

    check_k_install

    def_module="$1" ; shift
    bug_report_name="kevm-bug-$(basename "${run_file%-spec.k}")"
    eventlog_name="$run_file.eventlog"

    haskell_backend_command=(kore-exec)
    ! $bug_report || haskell_backend_command+=(--bug-report "$bug_report_name")
    ! $profile    || haskell_backend_command+=(+RTS -l -ol$eventlog_name -RTS)

    proof_args=(--def-module "$def_module")
    ! $debug                                   || proof_args+=(--debug)
    ! $debugger                                || proof_args+=(--debugger)
    [[ ${#haskell_backend_command[@]} -le 1 ]] || proof_args+=(--haskell-backend-command "${haskell_backend_command[*]}")
    [[ ! -f ${concrete_rules_file} ]]          || proof_args+=(--concrete-rules "$(cat ${concrete_rules_file} | tr '\n' ',')")

    ! $debug || set -x
    if $profile; then
        timeout -s INT "$profile_timeout" kprove --directory "$backend_dir" "$run_file" "${proof_args[@]}" "$@" || true
        kore-prof "$eventlog_name" $kore_prof_args > "$eventlog_name.json"
    else
        kprove --directory "$backend_dir" "$run_file" "${proof_args[@]}" "$@"
    fi
}

run_search() {
    local search_pattern
    search_pattern="$1" ; shift
    run_krun --search --pattern "$search_pattern" "$@"
}

run_klab() {
    local run_mode klab_log def_module omit_cells omit_labels

    run_mode="$1" ; shift
    klab_log="$(basename "${run_file%-spec.k}").k"

    def_module="$1" ; shift

    omit_cells='<substate> <jumpDests> <program> <code> <callGas> <touchedAccounts> <interimStates> <callStack> <callData> <block> <txOrder> <txPending> <messages>'
    omit_labels='#mkCall________EVM #callWithCode_________EVM #create_____EVM #mkCreate_____EVM #newAddrCreate2 #finishCodeDeposit___EVM'

    "$0" "$run_mode" --backend java "$run_file" "$def_module"                           \
        --concrete-rules-file "${concrete_rules_file}"                                  \
        --state-log --state-log-path "$KLAB_OUT/data" --state-log-id "$klab_log"        \
        --state-log-events OPEN,REACHINIT,REACHTARGET,REACHPROVED,RULE,SRULE,NODE,CLOSE \
        --output-flatten "_Map_ #And"                                                   \
        --output-omit "$omit_cells $omit_labels"                                        \
        --no-alpha-renaming --restore-original-names --no-sort-collections              \
        --output json                                                                   \
        "$@"
}

view_klab() {
    local klab_log

    klab_log="$(basename "${run_file%-spec.k}")"

    # klab often runs out of stack space when running long-running KEVM programs
    # klab debug "$klab_log"
    KLAB_NODE_STACK_SIZE="${KLAB_NODE_STACK_SIZE:-300000}"
    node --max-old-space-size=4096 --stack-size=$KLAB_NODE_STACK_SIZE $(dirname $(which klab))/../libexec/klab-debug "$klab_log"
}

# Dev Commands

run_interpret() {
    local interpreter kast output output_text output_format exit_status cmdprefix

    interpreter="$backend_dir/driver-kompiled/interpreter"
    kast="$(mktemp)"
    output="$(mktemp)"
    output_text="$(mktemp)"
    trap "rm -rf $kast $output $output_text" INT TERM EXIT
    exit_status=0
    cmdprefix=
    output_format='kore'
    case "$backend" in
        java)    run_kast kast > "$kast"
                 output_format='kast'
                 run_file="$kast"
                 run_krun --parser 'cat' --output kast > "$output" || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format"
                 fi
                 exit "$exit_status"
                 ;;

        llvm)    run_kast kore > "$kast"
                 if $debugger; then cmdprefix="gdb --args"; fi
                 $cmdprefix "$interpreter" "$kast" -1 "$output" "$@" \
                     || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format" --sort GeneratedTopCell
                 fi
                 exit "$exit_status"
                 ;;

        haskell) run_kast kore > "$kast"
                 kore-exec "$backend_dir/driver-kompiled/definition.kore" --pattern "$kast" --module ETHEREUM-SIMULATION --smt none --output "$output" \
                     || exit_status="$?"
                 if [[ "$unparse" == 'true' ]] && [[ "$exit_status" != '0' ]]; then
                     cat "$output" | "$0" kast --backend "$backend" - pretty --input "$output_format" --sort GeneratedTopCell
                 fi
                 exit "$exit_status"
                 ;;

        *)      fatal "Bad backend for interpreter: '$backend'"
                ;;
    esac
}

# Main
# ----

run_command="$1" ; shift

if [[ "$run_command" == 'help' ]] || [[ "$run_command" == '--help' ]] ; then
    echo "
        usage: $0 run          [--backend (llvm|java|haskell)]           <KEVM_arg>* <pgm>  <K arg>*
               $0 interpret    [--backend (llvm)] [--debug|--no-unparse] <KEVM_arg>* <pgm>  <interpreter arg>*
               $0 interpret    [--backend (java|haskell)] [--no-unparse] <KEVM_arg>* <pgm>
               $0 kast         [--backend (llvm|java|haskell)]           <KEVM_arg>* <pgm>  <output format> <K arg>*
               $0 prove        [--backend (java|haskell)]                            <spec> <def_module> <KEVM_arg>* <K arg>*
               $0 search       [--backend (java|haskell)]                            <pgm>  <pattern> <K arg>*
               $0 kompile      [--backend (java|llvm|haskell)]                       <main> <K arg>*
               $0 klab-run                                                           <pgm>  <K arg>*
               $0 klab-prove                                                         <spec> <def_module> <K arg>*
               $0 klab-view                                                          <spec>

               $0 [help|--help|version|--version]

           $0 run       : Run a single EVM program
           $0 interpret : Run JSON EVM programs without K Frontend (external parser)
           $0 kast      : Parse an EVM program and output it in a supported format
           $0 prove     : Run an EVM K proof
           $0 search    : Search for a K pattern in an EVM program execution
           $0 kompile   : Run kompile with arguments setup to include KEVM parameters as defaults
           $0 klab-(run|prove) : Run program or prove spec and dump StateLogs which KLab can read
           $0 klab-view : View the statelog associated with a given program or spec

           $0 help    : Display this help message.
           $0 version : Display the versions of KEVM, K, Kore, and Z3 in use.

           Note: <pgm> is a path to a file containing an EVM program/test.
                 <spec> is a K specification to be proved.
                 <main> is a K definition to be kompiled, which may include files from KEVM.
                 <KEVM arg> is one of [--mode (NORMAL|VMTESTS)]
                                      [--schedule (BERLIN|ISTANBUL|PETERSBURG|CONSTANTINOPLE|BYZANTIUM|SPURIOUS_DRAGON|TANGERINE_WHISTLE|HOMESTEAD|FRONTIER|DEFAULT)]
                                      [--chainid NNN]
                                      [--concrete-rules-file <concrete_rules_file>]
                                      [--bug-report]
                                      [--profile]
                                      [--profile-timeout <duration>]
                                      [--kore-prof-args \"<kore-prof arg>*\"]
                 <K arg> is an argument you want to pass to K.
                 <interpreter arg> is an argument you want to pass to the derived interpreter.
                 <kore-prof arg> is an argument you want to pass to kore-prof.
                 <output format> is the format for Kast to output the term in.
                 <pattern> is the configuration pattern to search for.
                 <def_module> is the module to take as axioms when doing verification.
                 <duration> is a timeout specifier as for GNU timeout.

           klab-view: Make sure that the 'klab/bin' directory is on your PATH to use this option.
    "
    exit 0
fi

if [[ "$run_command" == 'version' ]] || [[ "$run_command" == '--version' ]]; then
    notif "KEVM Version"
    cat $INSTALL_LIB/version
    exit 0
fi

backend="llvm"
debug=false
dump=false
unparse=true
debugger=false
profile=false
profile_timeout="0"
kore_prof_args=""
bug_report=false
mode=NORMAL
schedule=BERLIN
chainid=1
concrete_rules_file=
[[ ! "$run_command" == 'prove' ]] || backend='java'
[[ ! "$run_command" =~ klab*   ]] || backend='java'
kevm_port='8545'
kevm_host='127.0.0.1'
args=()
while [[ $# -gt 0 ]]; do
    arg="$1"
    case $arg in
        --debug)               debug=true ; args+=("$1") ; shift   ;;
        --dump)                dump=true                 ; shift   ;;
        --no-unparse)          unparse=false             ; shift   ;;
        --debugger)            debugger=true             ; shift   ;;
        --profile)             profile=true              ; shift   ;;
        --profile-timeout)     profile_timeout="$2"      ; shift 2 ;;
        --kore-prof-args)      kore_prof_args="$2"       ; shift 2 ;;
        --bug-report)          bug_report=true           ; shift   ;;
        --backend)             backend="$2"              ; shift 2 ;;
        --backend-dir)         backend_dir="$2"          ; shift 2 ;;
        --concrete-rules-file) concrete_rules_file="$2"  ; shift 2 ;;
        --mode)                mode="$2"                 ; shift 2 ;;
        --schedule)            schedule="$2"             ; shift 2 ;;
        --chainid)             chainid="$2"              ; shift 2 ;;
        -p|--port)             kevm_port="$2"            ; shift 2 ;;
        -h|--host|--hostname)  kevm_host="$2"            ; shift 2 ;;
        *)                     args+=("$1")              ; shift   ;;
    esac
done
[[ "${#args[@]}" -le 0 ]] || set -- "${args[@]}"
backend_dir="${backend_dir:-$INSTALL_LIB/$backend}"

! $debugger || [[ "$backend" == haskell ]] || [[ "$backend" == llvm ]] || fatal "Option --debugger only usable with --backend [llvm|haskell]!"
! $profile  || [[ "$backend" == haskell ]] || fatal "Option --profile only usable with --backend haskell!"
[[ $profile_timeout = "0" ]] || $profile   || fatal "Option --profile-timeout only usable with --profile!"
[[ $kore_prof_args = "" ]]   || $profile   || fatal "Option --kore-prof-args only usable with --profile!"

# get the run file
run_file="$1" ; shift
if [[ "$run_file" == '-' ]]; then
    tmp_input="$(mktemp)"
    trap "rm -rf $tmp_input" INT TERM EXIT
    cat - > "$tmp_input"
    run_file="$tmp_input"
fi
[[ -f "$run_file" ]] || fatal "File does not exist: $run_file"

cMODE_kore="Lbl${mode}{}()"
cSCHEDULE_kore="Lbl${schedule}'Unds'EVM{}()"
cCHAINID_kore="\dv{SortInt{}}(\"${chainid}\")"

cMODE_kast="\`${mode}\`(.KList)"
cSCHEDULE_kast="\`${schedule}_EVM\`(.KList)"
cCHAINID_kast="#token(\"${chainid}\",\"Int\")"

case "$run_command-$backend" in
    kompile-@(java|llvm|haskell)   ) run_kompile                     "$@" ;;
    run-@(java|llvm|haskell)       ) run_krun                        "$@" ;;
    kast-@(java|llvm|haskell)      ) run_kast                        "$@" ;;
    interpret-@(llvm|haskell|java) ) run_interpret                   "$@" ;;
    prove-@(java|haskell)          ) run_prove                       "$@" ;;
    search-@(java|haskell)         ) run_search                      "$@" ;;
    klab-@(run|prove)-java         ) run_klab "${run_command#klab-}" "$@" ;;
    klab-view-java                 ) view_klab                       "$@" ;;
    *) $0 help ; fatal "Unknown command on backend: $run_command $backend" ;;
esac
